consumes:
- application/json
definitions:
  apperrors.ErrorCode:
    enum:
    - access_token_expired
    - authentication_error
    - authorization_error
    - database_error
    - forbidden
    - invalid_correlation_id
    - internal_error
    - invalid_request
    - invalid_url_param
    - malformed_body
    - not_implemented
    - password_too_short
    - refresh_token_invalid
    - request_too_large
    - rate_limit_exceeded
    - resource_already_exists
    - resource_expired
    - resource_in_use
    - resource_not_found
    - token_invalid
    type: string
    x-enum-varnames:
    - ErrCodeAccessTokenExpired
    - ErrCodeAuthenticationFailure
    - ErrCodeAuthorizationFailure
    - ErrCodeDatabaseError
    - ErrCodeForbidden
    - ErrCodeInvalidCorrelationID
    - ErrCodeInternalError
    - ErrCodeInvalidRequest
    - ErrCodeInvalidURLParam
    - ErrCodeMalformedBody
    - ErrCodeNotImplemented
    - ErrCodePasswordTooShort
    - ErrCodeRefreshTokenInvalid
    - ErrCodeRequestTooLarge
    - ErrCodeRateLimitExceeded
    - ErrCodeResourceAlreadyExists
    - ErrCodeResourceExpired
    - ErrCodeResourceInUse
    - ErrCodeResourceNotFound
    - ErrCodeTokenInvalid
  auth.AccessTokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTaWduYWxzZCIsInN1YiI6ImMxMjQ1Yjc0LTMyMTQtNDUzOS04YTgyLTY2NDNkMzllNjk5YiIsImV4cCI6MTc0ODU4ODE2MiwiaWF0IjoxNzQ4NTg2MzYyLCJhY2NvdW50X2lkIjoiYzEyNDViNzQtMzIxNC00NTM5LThhODItNjY0M2QzOWU2OTliIiwiYWNjb3VudF90eXBlIjoidXNlciIsInJvbGUiOiJvd25lciIsImlzbl9wZXJtcyI6eyJzYW1wbGUtaXNuLS1leGFtcGxlLW9yZyI6eyJwZXJtaXNzaW9uIjoid3JpdGUiLCJzaWduYWxfdHlwZXMiOlsic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC4xIiwic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC4yIiwic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC4zIiwic2FtcGxlLXNpZ25hbG5ldy0tZXhhbXBsZS1vcmcvdjAuMC4xIiwic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC40Il19LCJzYW1wbGUtaXNuLS1zYXVsLW9yZyI6eyJwZXJtaXNzaW9uIjoid3JpdGUiLCJzaWduYWxfdHlwZXMiOlsic2FtcGxlLXNpZ25hbC0tc2F1bC1vcmcvdjAuMC4xIl19fX0.33ANor7XHWkB87npB4RWsJUjBnJHdYZce-lT8w_IN_s
        type: string
      account_id:
        example: a38c99ed-c75c-4a4a-a901-c9485cf93cf3
        type: string
      account_type:
        enum:
        - user
        - service_account
        type: string
      expires_in:
        description: seconds
        example: 1800
        type: integer
      isn_perms:
        additionalProperties:
          $ref: '#/definitions/auth.IsnPerms'
        type: object
      role:
        enum:
        - owner
        - admin
        - member
        example: admin
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  auth.IsnPerms:
    properties:
      permission:
        enum:
        - read
        - write
        example: read
        type: string
      signal_batch_id:
        example: 967affe9-5628-4fdd-921f-020051344a12
        type: string
      signal_types:
        description: list of available signal types for the isn
        example:
        - signal-type-1/v0.0.1
        - signal-type-2/v1.0.0
        items:
          type: string
        type: array
    type: object
  auth.ServiceAccountTokenRequest:
    properties:
      client_id:
        example: sa_example-org_k7j2m9x1
        type: string
      client_secret:
        example: dGhpcyBpcyBhIHNlY3JldA
        type: string
    type: object
  database.GetForDisplaySignalTypeByIsnIDRow:
    properties:
      created_at:
        type: string
      detail:
        type: string
      id:
        type: string
      is_in_use:
        type: boolean
      readme_url:
        type: string
      schema_url:
        type: string
      sem_ver:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  database.GetForDisplayUserByIsnIDRow:
    properties:
      account_id:
        type: string
      created_at:
        type: string
      updated_at:
        type: string
    type: object
  database.GetUserByIDRow:
    properties:
      account_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      user_role:
        type: string
    type: object
  database.GetUsersRow:
    properties:
      account_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      updated_at:
        type: string
      user_role:
        type: string
    type: object
  database.Isn:
    properties:
      created_at:
        type: string
      detail:
        type: string
      id:
        type: string
      is_in_use:
        type: boolean
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_account_id:
        type: string
      visibility:
        type: string
    type: object
  database.ServiceAccount:
    properties:
      account_id:
        type: string
      client_contact_email:
        type: string
      client_id:
        type: string
      client_organization:
        type: string
      created_at:
        type: string
      updated_at:
        type: string
    type: object
  database.SignalType:
    properties:
      created_at:
        type: string
      detail:
        type: string
      id:
        type: string
      is_in_use:
        type: boolean
      isn_id:
        type: string
      readme_url:
        type: string
      schema_content:
        type: string
      schema_url:
        type: string
      sem_ver:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  handlers.CreateIsnRequest:
    properties:
      detail:
        example: Sample ISN description
        type: string
      is_in_use:
        example: true
        type: boolean
      title:
        example: Sample ISN @example.org
        type: string
      visibility:
        enum:
        - public
        - private
        example: private
        type: string
    type: object
  handlers.CreateIsnResponse:
    properties:
      id:
        example: 67890684-3b14-42cf-b785-df28ce570400
        type: string
      resource_url:
        example: http://localhost:8080/api/isn/sample-isn--example-org
        type: string
      slug:
        example: sample-isn--example-org
        type: string
    type: object
  handlers.CreateServiceAccountRequest:
    properties:
      client_contact_email:
        example: example@example.com
        type: string
      client_organization:
        example: example org
        type: string
    type: object
  handlers.CreateServiceAccountResponse:
    properties:
      client_id:
        example: sa_example-org_k7j2m9x1
        type: string
      expires_at:
        example: "2024-12-25T10:30:00Z"
        type: string
      expires_in:
        example: 172800
        type: integer
      setup_url:
        example: https://api.example.com/auth/service-accounts/setup/550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  handlers.CreateSignalTypeRequest:
    properties:
      bump_type:
        description: this is used to increment semver for the signal definition
        enum:
        - major
        - minor
        - patch
        example: patch
        type: string
      detail:
        description: description
        example: description
        type: string
      readme_url:
        description: 'README file URL: must be a GitHub URL ending in .md'
        example: https://github.com/user/project/blob/2025.01.01/readme.md
        type: string
      schema_url:
        description: 'JSON schema URL: must be a GitHub URL ending in .json, OR use
          https://github.com/skip/validation/main/schema.json to disable validation'
        example: https://github.com/user/project/blob/2025.01.01/schema.json
        type: string
      title:
        description: unique title
        example: Sample Signal @example.org
        type: string
    type: object
  handlers.CreateSignalTypeResponse:
    properties:
      resource_url:
        example: http://localhost:8080/api/isn/sample-isn--example-org/signals_types/sample-signal--example-org/v0.0.1
        type: string
      sem_ver:
        example: 0.0.1
        type: string
      slug:
        example: sample-signal--example-org
        type: string
    type: object
  handlers.CreateSignalsBatchResponse:
    properties:
      account_id:
        example: a38c99ed-c75c-4a4a-a901-c9485cf93cf3
        type: string
      resource_url:
        example: http://localhost:8080/api/isn/sample-isn--example-org/account/{account_id}/batch/{signals_batch_id}
        type: string
      signals_batch_id:
        example: b51faf05-aaed-4250-b334-2258ccdf1ff2
        type: string
    type: object
  handlers.CreateSignalsRequestDoc:
    properties:
      signals:
        items:
          properties:
            content:
              additionalProperties: {}
              type: object
            correlation_id:
              example: 75b45fe1-ecc2-4629-946b-fd9058c3b2ca
              type: string
            local_ref:
              example: item_id_#1
              type: string
          type: object
        type: array
    type: object
  handlers.CreateSignalsResponse:
    properties:
      account_id:
        example: a38c99ed-c75c-4a4a-a901-c9485cf93cf3
        type: string
      isn_slug:
        example: sample-isn--example-org
        type: string
      signal_type_path:
        example: signal-type-1/v0.0.1
        type: string
      stored_signals:
        items:
          $ref: '#/definitions/handlers.StoredSignal'
        type: array
    type: object
  handlers.CreateUserRequest:
    properties:
      email:
        example: example@example.com
        type: string
      password:
        description: passwords must be at least 11 characters long
        example: lkIB53@6O^Y
        type: string
    type: object
  handlers.IsnAndLinkedInfo:
    properties:
      created_at:
        type: string
      detail:
        type: string
      id:
        type: string
      is_in_use:
        type: boolean
      signal_types:
        items:
          $ref: '#/definitions/database.GetForDisplaySignalTypeByIsnIDRow'
        type: array
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/database.GetForDisplayUserByIsnIDRow'
      visibility:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        example: example@example.com
        type: string
      password:
        description: passwords must be at least 11 characters long
        example: lkIB53@6O^Y
        type: string
    type: object
  handlers.ResetUserPasswordRequest:
    properties:
      new_password:
        description: Admin provides the new password
        type: string
    type: object
  handlers.ResetUserPasswordResponse:
    properties:
      message:
        type: string
    type: object
  handlers.SignalTypeAndLinkedInfo:
    properties:
      created_at:
        type: string
      detail:
        type: string
      id:
        type: string
      is_in_use:
        type: boolean
      isn:
        $ref: '#/definitions/database.Isn'
      readme_url:
        type: string
      schema_url:
        type: string
      sem_ver:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  handlers.SignalVersionDoc:
    properties:
      account_id:
        example: a38c99ed-c75c-4a4a-a901-c9485cf93cf3
        type: string
      account_type:
        example: user
        type: string
      content:
        additionalProperties: {}
        type: object
      correlated_local_ref:
        example: item_id_#2
        type: string
      correlated_signal_id:
        example: 17c50d26-1da6-4ac0-897f-3a2f85f07cd3
        type: string
      created_at:
        example: "2025-06-03T13:47:47.331787+01:00"
        type: string
      email:
        example: user@example.com
        type: string
      local_ref:
        example: item_id_#1
        type: string
      signal_id:
        example: 4cedf4fa-2a01-4cbf-8668-6b44f8ac6e19
        type: string
      signal_version_id:
        example: 835788bd-789d-4091-96e3-db0f51ccbabc
        type: string
      version_number:
        example: 1
        type: integer
    type: object
  handlers.StoredSignal:
    properties:
      local_ref:
        example: item_id_#1
        type: string
      signal_version_id:
        example: 835788bd-789d-4091-96e3-db0f51ccbabc
        type: string
      version_number:
        example: 1
        type: integer
    type: object
  handlers.UpdateIsnRequest:
    properties:
      detail:
        example: Sample ISN description
        type: string
      is_in_use:
        example: true
        type: boolean
      visibility:
        enum:
        - public
        - private
        example: private
        type: string
    type: object
  handlers.UpdatePasswordRequest:
    properties:
      current_password:
        example: lkIB53@6O^Y
        type: string
      new_password:
        example: ue6U>&X3j570
        type: string
    type: object
  handlers.UpdateSignalTypeRequest:
    properties:
      detail:
        description: updated description
        example: description
        type: string
      is_in_use:
        description: whether this signal type version is actively used
        example: false
        type: boolean
      readme_url:
        description: 'README file URL: must be a GitHub URL ending in .md'
        example: https://github.com/user/project/blob/2025.01.01/readme.md
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      error_code:
        allOf:
        - $ref: '#/definitions/apperrors.ErrorCode'
        example: example_error_code
      message:
        example: message describing the error
        type: string
    type: object
  version.Info:
    properties:
      build_date:
        example: "2025-01-01T12:00:00Z"
        type: string
      git_commit:
        example: abc123
        type: string
      version:
        example: v1.0.0
        type: string
    type: object
info:
  contact: {}
  description: |
    Signals ISN service API for managing Information Sharing Networks

    ## Common Error Responses
    All endpoints may return:
    - `413` Request body exceeds size limit
    - `429` Rate limit exceeded
    - `500` Internal server error

    Individual endpoints document their specific business logic errors.

    ## Request Limits
    All endpoints are protected by:
    - **Rate limiting**: Configurable requests per second (default: 100 RPS, 20 burst)
    - **Request size limits**: 64KB for admin/auth endpoints, 5MB for signal ingestion

    Check the X-Max-Request-Body response header for the configured limit on signals payload.

    The rate limit is set globaly and prevents abuse of the service.
    In production there will be additional protections in place such as per-IP rate limiting provided by the load balancer/reverse proxy.

    ## Authentication & Authorization

    ### Authentication Flow
    - **Web users**: Login → get JWT + refresh cookie → use JWT for API calls
    - **Service accounts**: Authenticate with Client credentials → get JWT → use JWT for API calls → re-authenticate when expired

    ### Authorization
    All protected API endpoints expect valid JWT access tokens containing user identity and permissions.

    tokens should be supplied using:
    **Authorization header**: `Bearer <token>`

    **Token refresh:**
    - **Web users**: Refresh tokens (HTTP-only cookies) automatically renew access tokens
    - **Service accounts**: Must re-authenticate with client credentials when tokens expire

    Access tokens expire in 30 minutes

    Refresh tokens expire in 30 days (web users only)
  license:
    name: MIT
  title: Signals ISN API
  version: "1.0"
paths:
  /admin/accounts/{account_id}/disable:
    post:
      description: |-
        Disabling an account prevents it from being used to create new access tokens.

        The handler will also revoke:
        - client secrets/one-time secrets (service accounts)
        - refresh tokens (web users).

        Note: The site owner account cannot be disabled to prevent system lockout.
        Only owners and admins can disable accounts.
      parameters:
      - description: Account ID to disable
        in: path
        name: account_id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Invalid account ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: 'Authentication failed '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Cannot disable site owner account
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Disable an account
      tags:
      - Site admin
  /admin/accounts/{account_id}/enable:
    post:
      description: "For service accounts, you will need to register them again using
        /auth/register/service-accounts\nThe client ID will remain the same but they
        must go through\tthe setup process again.\n\nFor user accounts, they can immediately
        log in again.\n\nOnly owners and admins can enable accounts."
      parameters:
      - description: Account ID to enable
        in: path
        name: account_id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Invalid account ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: 'Authentication failed '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: 'Insufficient permissions '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Enable an account
      tags:
      - Site admin
  /admin/reset:
    post:
      description: |-
        Delete all registered users and associated data.
        This endpoint only works on environments configured as 'dev'
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: reset
      tags:
      - Site admin
  /admin/service-accounts:
    get:
      description: |-
        Get a list of all service accounts in the system.
        Only owners and admins can view service account lists.
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.ServiceAccount'
            type: array
        "401":
          description: 'Authentication failed '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: 'Insufficient permissions '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Get all service accounts
      tags:
      - Site admin
  /admin/service-accounts/{id}:
    get:
      description: |-
        Get a specific service account by account ID.
        Only owners and admins can view service account details.
      parameters:
      - description: Service Account ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.ServiceAccount'
        "400":
          description: Invalid service account ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: 'Authentication failed '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: 'Insufficient permissions '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Service account not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Get service account
      tags:
      - Site admin
  /admin/users:
    get:
      description: This api displays all the site users and their email addreses (can
        only be used by owner account)
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.GetUsersRow'
            type: array
        "401":
          description: 'Authentication failed '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: 'Insufficient permissions '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Get registered users
      tags:
      - Site admin
  /admin/users/{id}:
    get:
      description: This api displays a site user and their email addreses (can only
        be used by owner account)
      parameters:
      - description: user id
        example: 68fb5f5b-e3f5-4a96-8d35-cd2203a06f73
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.GetUserByIDRow'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: 'Authentication failed '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: 'Insufficient permissions '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Get registered user
      tags:
      - Site admin
  /admin/users/{user_id}/reset-password:
    put:
      description: Allows admins to reset a user's password (use this endpoint if
        the user has forgotten their password)
      parameters:
      - description: User Account ID
        in: path
        name: user_id
        required: true
        type: string
      - description: New password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ResetUserPasswordRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResetUserPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden - admin role required
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Reset user password
      tags:
      - Site admin
  /api/auth/admins/account/{account_id}:
    delete:
      description: this endpoint can only be used by the site owner account
      parameters:
      - description: account id
        example: a38c99ed-c75c-4a4a-a901-c9485cf93cf3
        in: path
        name: account_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Revoke account admin role
      tags:
      - auth
    put:
      description: |-
        This endpoint grants the admin role to a site member

        An admin can:
        - Create an ISN
        - Define the signal_types used in the ISN
        - read/write to their own ISNs
        - Grant other accounts read or write access to their ISNs
        - Create service accounts

        this endpoint can only be used by the site owner account
      parameters:
      - description: account id
        example: a38c99ed-c75c-4a4a-a901-c9485cf93cf3
        in: path
        name: account_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Grant admin role
      tags:
      - auth
  /api/auth/login:
    post:
      description: |-
        The response body includes an access token which can be used to access the protected enpoints, assuming the account has the appropriate permissions.
        The access_token is valid for 30 mins.

        As part of the login response, the server sets a http-only cookie on the client that will allow it to use the /auth/refresh endpoint to renew the access_token
        The refresh_token lasts 30 days unless it is revoked earlier.

        The account's role and permissions are encoded and encloded as part of the jwt access token and also provided in the response body
        To renew the refresh_token, log in again.
      parameters:
      - description: email and password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AccessTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Login
      tags:
      - auth
  /api/auth/password/reset:
    put:
      description: |
        Use this api when a user wants to reset their password.  Requires a valid access token and the current password
      parameters:
      - description: user details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdatePasswordRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: 'Bad request with possible error codes: malformed_body, password_too_short'
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: 'Unauthorized with possible error code: authentication_error'
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Password reset
      tags:
      - auth
  /api/auth/register:
    post:
      description: |-
        The first user to be created for this service will be created with an admin role.
        Subsequent accounts default to standard member roles.
        New members can't access any information beyond the public data on the site until an admin grants them access to an ISN.
      parameters:
      - description: user details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      responses:
        "201":
          description: Created
        "400":
          description: 'Bad request with possible error codes: malformed_body, password_too_short'
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: 'Conflict with possible error code: resource_already_exists'
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register user
      tags:
      - auth
  /api/auth/register/service-accounts:
    post:
      description: |
        Registring a new service account creates a one time link with the client credentials in it - this must be used by the client within 48 hrs.

        If you want to reissue a client's credentials call this endpoint again with the same client organization and contact email.
        A new one time setup url will be generated and the old one will be revoked.
        Note the client_id will remain the same and any existing client secrets will be revoked.

        You have to be an admin or the site owner to use this endpoint
      parameters:
      - description: service account details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateServiceAccountRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CreateServiceAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerServiceAccount: []
      summary: Register a new service account
      tags:
      - Service accounts
  /api/auth/service-accounts/setup/{setup_id}:
    get:
      description: |
        Exchange one-time setup token for permanent client credentials (the one-time request url is created when a new service account is registered).
        the endpoint renders a html page that the user can use to copy their client credentials.
        The setup url is only valid for 48 hours.
      parameters:
      - description: One-time setup ID
        in: path
        name: setup_id
        required: true
        type: string
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Complete service account setup
      tags:
      - Service accounts
  /api/isn:
    get:
      description: get a list of the configured ISNs
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Isn'
            type: array
      summary: Get the ISNs
      tags:
      - ISN view
  /api/isn/:
    post:
      description: |-
        Create an Information Sharing Network (ISN)

        visibility = "private" means that signalsd on the network can only be seen by network participants.

        ISN admins automatically get write permission for their own sites, so this endpoint also starts a signals batch for them.
        Owners automatically get write permission on all isns, so a batch is started for them also.

        This endpoint can only be used by the site owner or an admin
      parameters:
      - description: ISN details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateIsnRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateIsnResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      - RefreshTokenCookieAuth: []
      summary: Create an ISN
      tags:
      - ISN configuration
  /api/isn/{isn_slug}:
    put:
      description: |-
        Update the ISN details
        This endpoint can only be used by the site owner or the ISN admin
      parameters:
      - description: isn slug
        example: sample-isn--example-org
        in: path
        name: isn_slug
        required: true
        type: string
      - description: ISN details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateIsnRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Update an ISN
      tags:
      - ISN configuration
  /api/isn/{isn_slug}/accounts/{account_id}/batches:
    get:
      description: |-
        TODO - get latest, previous, by data ranage
        TODO
      responses: {}
      summary: Get details about a set of signal batches
      tags:
      - Service accounts
  /api/isn/{isn_slug}/accounts/{account_id}/batches/{signals_batch_id}:
    get:
      description: TODO - get by id. Include status (errs, received, latest localref
        in batch)
      responses: {}
      summary: Get a signal batch
      tags:
      - Service accounts
  /api/isn/{isn_slug}/batches:
    post:
      description: |
        This endpoint is used by service accounts to create a new batch used to track signals sent to the specified isn

        For user accounts, a batch is automatically created when they are granted write permission to an isn and is only closed if their permission to write to the isn is revoked

        For service accounts, the client app can decide how long to keep a batch open
        (a batch status summary is sent to a webhook after the batch closes)

        opening a batch closes the previous batch created on the isn for this account.

        Signals can only be sent to open batches.

        authentication is based on the supplied access token:
        (the site owner; the isn admin and members with an isn_perm= write can create a batch)
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateSignalsBatchResponse'
      security:
      - BearerAccessToken: []
      summary: Create a new signal batch
      tags:
      - Service accounts
  /api/isn/{isn_slug}/signal_types:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.SignalType'
            type: array
      summary: Get the signal definitions
      tags:
      - ISN view
    post:
      description: |
        A signal type describes a data set that is sharable over an ISN.  Setup the ISN before defining any signal defs.
        Signal types specify a record that can be shared over the ISN
        - Each type has a unique title
        - A URL-friendly slug is created based on the title supplied when you load the first version of a definition.
        - The title and slug fields can't be changed and it is not allowed to reuse a slug that was created by another account.
        - The field definition is held as an external JSON schema file

        Schema URL Requirements
        - Must be a valid JSON schema on a public github repo (e.g., https://github.com/org/repo/blob/2025.01.01/schema.json)
        - To disable schema validation, use: https://github.com/skip/validation/main/schema.json

        Versions
        - A signal type can have multiple versions - these share the same title/slug but have different JSON schemas
        - Use this endpoint to create the first version - the bump_type (major/minor/patch) determines the initial semver (1.0.0, 0.1.0 or 0.0.1)
        - Subsequent POSTs to this endpoint that reference a previously submitted title/slug but point to a different schema will increment the version

        Signal type definitions are referred to with a URL like this: http://{hostname}/api/isn/{isn_slug}/signal_types/{slug}/v{sem_ver}
      parameters:
      - description: signal definition details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateSignalTypeRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateSignalTypeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Create signal type definition
      tags:
      - Signal definitions
  /api/isn/{isn_slug}/signal_types/{slug}/v{sem_ver}:
    delete:
      description: Only signal types that have never been referenced by signals can
        be deleted
      parameters:
      - description: signal type slug
        example: sample-signal--example-org
        in: path
        name: slug
        required: true
        type: string
      - description: version to be deleted
        example: 0.0.1
        in: path
        name: sem_ver
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Delete a signal definition
      tags:
      - Signal definitions
    get:
      parameters:
      - description: signal definiton slug
        example: sample-signal--example-org
        in: path
        name: slug
        required: true
        type: string
      - description: version to be recieved
        example: 0.0.1
        in: path
        name: sem_ver
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SignalTypeAndLinkedInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get a signal definition
      tags:
      - ISN view
    put:
      description: |-
        users can mark the signal type as *in use/not in use* and update the description or link to the readme file

        It is not allowed to update the schema url - instead users should create a new declaration with the same title and bump the version
      parameters:
      - description: signal definiton slug
        example: sample-signal--example-org
        in: path
        name: slug
        required: true
        type: string
      - description: Sem ver
        example: 0.0.1
        in: path
        name: sem_ver
        required: true
        type: string
      - description: signal type details to be updated
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateSignalTypeRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Update signal definition
      tags:
      - Signal definitions
  /api/isn/{slug}:
    get:
      description: Returns details about the ISN
      parameters:
      - description: isn slug
        example: sample-isn--example-org
        in: path
        name: isn_slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.IsnAndLinkedInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get an ISN configurationuration
      tags:
      - ISN view
  /health/live:
    get:
      description: check if the signalsd service is up
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      summary: Liveness check
      tags:
      - Site admin
  /health/ready:
    get:
      description: check if the signalsd service is ready
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      summary: Readiness Check
      tags:
      - Site admin
  /isn/{isn_slug}/accounts/{account_id}:
    delete:
      description: |-
        Revoke an account read or write access to an isn.
        This end point can only be used by the site owner or the isn admin account.
      parameters:
      - description: isn slug
        example: sample-isn--example-org
        in: path
        name: isn_slug
        required: true
        type: string
      - description: account id
        example: a38c99ed-c75c-4a4a-a901-c9485cf93cf3
        in: path
        name: account_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Revoke ISN access permission
      tags:
      - ISN Permissions
    put:
      description: |-
        Grant an account read or write access to an isn.
        This end point can only be used by the site owner or the isn admin account.
      parameters:
      - description: isn slug
        example: sample-isn--example-org
        in: path
        name: isn_slug
        required: true
        type: string
      - description: account id
        example: a38c99ed-c75c-4a4a-a901-c9485cf93cf3
        in: path
        name: account_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Grant ISN access permission
      tags:
      - ISN Permissions
  /isn/{isn_slug}/signal_types/{signal_type_slug}/{signal_id}:
    delete:
      responses:
        "501":
          description: Not implemented
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Withdraw a signal (TODO)
      tags:
      - Signal sharing
  /isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals:
    post:
      description: "- the client can submit an array of signals to this endpoint for
        storage on the ISN\n- payloads must not mix signals of different types and
        the payload is subject to the sizen\tlimits defined on the ISN.\n- The client-supplied
        local_ref must uniquely identify each signal of the specified signal type
        that will be supplied by the account.\n- If a local reference is received
        more than once from an account for a specified signal_type it will be stored
        with a incremented version number.\n- Optionally a correlation_id can be supplied
        - this will link the signal to a previously received signal. The correlated
        signal does not need to be owned by the same account.\n- requests are only
        accepted for the open signal batch for this account/ISN.\n\n**Authentication**\n\nRequires
        a valid access token.\nThe claims in the access token list the ISNs and signal_types
        that the account is permitted to use.\n\n- the RequireIsnPermission middleware
        will consult the claims in the access token to confirm the user is allowed
        to write to the isn in the URL.\n- This handler also checks that the signal_type/sem_ver
        in the url is also listed in the claims (this is to catch mistyped urls)\n\n**Validation**\n\nthe
        content is validated against the json schema asynchronously, however basic
        checks are done on the incoming data.\nThe following issues create a 400 error
        and cause the entire payload to be rejected\n- invalid json format\n- missing
        fields (the array of signals must be in a json object called signals, and
        content and local_ref must be present for each record).\n- incorrect correlation
        ids - where supplied, correlation ids must refer to another signal ID in the
        ISN (error_code is set to \"invalid_correlation_id\" in this is not the case)\n\ninternal
        errors cause the whole payload to be rejected."
      parameters:
      - description: isn slug
        example: sample-isn--example-org
        in: path
        name: isn_slug
        required: true
        type: string
      - description: signal type slug
        example: sample-signal--example-org
        in: path
        name: signal_type_slug
        required: true
        type: string
      - description: signal type sem_ver number
        example: 0.0.1
        in: path
        name: sem_ver
        required: true
        type: string
      - description: create signals
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateSignalsRequestDoc'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateSignalsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Send signals
      tags:
      - Signal sharing
  /isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals/{signal_id}:
    get:
      responses:
        "501":
          description: Not implemented
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: get a signal (TODO)
      tags:
      - Signal sharing
  /isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals/search:
    get:
      description: |-
        Search for signals by date or account

        Accepted timestamps formats (ISO 8601):
        - 2006-01-02T15:04:05Z (UTC)
        - 2006-01-02T15:04:05+07:00 (with offset)
        - 2006-01-02T15:04:05.999999999Z (nano precision)

        Note: If the timestamp contains a timezone offset (as in +07:00), the + must be percent-encoded as %2B in the query strings.

        Dates (YYYY-MM-DD) can also be used.
        These are treated as the start of day UTC (so 2006-01-02 is treated as 2006-01-02T00:00:00Z)

        Note the endpoint returns the latest version of each signal and does not include withdrawn or archived signals
      parameters:
      - description: Start date for filtering
        example: "2006-01-02T15:04:05Z"
        in: query
        name: start_date
        type: string
      - description: End date for filtering
        in: query
        name: end_date
        type: string
      - description: Account ID for filtering
        example: a38c99ed-c75c-4a4a-a901-c9485cf93cf3
        in: query
        name: account_id
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.SignalVersionDoc'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Search for signals
      tags:
      - Signal sharing
  /oauth/revoke:
    post:
      description: |
        Revoke a refresh token or client secret to prevent it being used to create new access tokens.
        **This endpoint serves as the logout function for web users.**

        **Service Accounts:**
        You must supply your `client ID` and `client secret` in the request body.
        This revokes all client secrets for the service account.

        **Web Users (Logout):**
        This endpoint expects a refresh token in an `http-only cookie` and a valid access token in the Authorization header.
        This revokes the user's refresh token, effectively logging them out.

        If the refresh token has expired or been revoked, the user must login again to get a new one.

        You must also provide a previously issued `bearer access token` in the Authorization header - it does not matter if it has expired
        (the token is not used to authenticate the request but is needed to establish the ID of the user making the request).

        **Note:** Any unexpired access tokens issued for this user will continue to work until they expire.
        Users must log in again to obtain a new refresh token after logout/revocation.

        **Client Examples:**
        - **Web User Logout:** `POST /oauth/revoke` with refresh token cookie + Authorization header
        - **Service Account:** `POST /oauth/revoke` with client_id and client_secret in request body
      responses:
        "200":
          description: OK
        "400":
          description: 'Invalid request body '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: 'Authentication failed '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Token not found or already revoked
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Revoke a token (logout for web users)
      tags:
      - auth
  /oauth/token:
    post:
      description: |
        **Client Credentials Grant (Service Accounts):**

        Issues new access token (in response body)

        - Set `grant_type=client_credentials` as URL parameter
        - Provide `client_id` and `client_secret` in request body
        - Access tokens expire after 30 minutes
        (subsequent requests using the token will fail with HTTP status 401 and an error_code of "access_token_expired")

        **Refresh Token Grant (Web Users):**

        Issues new access token (in response body) and rotates refresh token (HTTP-only cookie)

        - Set `grant_type=refresh_token` as URL parameter
        - Must provide current access token in Authorization header (expired tokens accepted)
        - Must have valid refresh token cookie
        - Access tokens expire after 30 minutes
        (subsequent requests using the token will fail with HTTP status 401 and an error_code of "access_token_expired")
        - Refresh tokens expire after 30 days
        - subsequent requests using the refresh token will fail with HTTP status 401 and an error_code of "refresh_token_expired" and users must login again to get a new one.
      parameters:
      - description: grant type
        enum:
        - client_credentials
        - refresh_token
        in: query
        name: grant_type
        required: true
        type: string
      - description: Service account credentials (required for client_credentials
          grant)
        in: body
        name: request
        schema:
          $ref: '#/definitions/auth.ServiceAccountTokenRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AccessTokenResponse'
        "400":
          description: 'Invalid grant_type parameter '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: 'Authentication failed '
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: New Access Token
      tags:
      - auth
  /version:
    get:
      description: Returns the current API version details
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/version.Info'
      summary: Get API version
      tags:
      - Site admin
  /webhooks:
    post:
      description: register a webhook to recieve signals batch status updates
      responses:
        "204":
          description: Not implemented
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register webhook (TODO)
      tags:
      - Service accounts
produces:
- application/json
securityDefinitions:
  BearerAccessToken:
    description: Bearer {JWT access token}
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Authentication and authorization endpoints. Web users get JWT + refresh
    tokens, service accounts use client credentials to get JWT access tokens.
  name: auth
- description: Site adminstration tools
  name: Site admin
- description: Manage the Information Sharing Networks that are used to exchange signals
    between participating users.
  name: ISN configuration
- description: Grant accounts read or write access to an ISN
  name: ISN Permissions
- description: View information about the configured ISNs
  name: ISN view
- description: Define the format of the data being shared in an ISN
  name: Signal definitions
- description: Manage service account end points
  name: Service accounts
