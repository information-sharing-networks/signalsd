{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Signals ISN service API",
        "contact": {}
    },
    "host": "localhost:8080",
    "paths": {
        "/admin/live": {
            "get": {
                "description": "check if the signalsd service is up",
                "tags": [
                    "Site admin"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/admin/reset": {
            "post": {
                "description": "Delete all registered users and associated data.\nThis endpoint only works on environments configured as 'dev'",
                "tags": [
                    "Site admin"
                ],
                "summary": "reset",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "get": {
                "description": "This API is protected (includes email addresses in the response) - currently only available on dev envs, pending implementation of admin roles.",
                "tags": [
                    "auth"
                ],
                "summary": "Get registered user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "68fb5f5b-e3f5-4a96-8d35-cd2203a06f73",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetUserByIDRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn": {
            "get": {
                "description": "get a list of the configured ISNs",
                "tags": [
                    "ISN view"
                ],
                "summary": "Get the ISNs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Isn"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Update the ISN details\nThis endpoint can only be used by the site owner or the ISN admin",
                "tags": [
                    "ISN config"
                ],
                "summary": "Update an ISN",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateIsnRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    },
                    {
                        "RefreshTokenCookieAuth": []
                    }
                ],
                "description": "Create an Information Sharing Network (ISN)\n\nvisibility = \"private\" means that signalsd on the network can only be seen by network participants.\n\nThe only storage_type currently supported is \"admin_db\"\nwhen storage_type = \"admin_db\" the signalsd are stored in the relational database used by the API service to store the admin configuration\nSpecify \"admin_db\" for storage_connection_url in this case (anything else is overriwtten with this value)\n\nThis endpoint can only be used by the site owner or an admin",
                "tags": [
                    "ISN config"
                ],
                "summary": "Create an ISN",
                "parameters": [
                    {
                        "description": "ISN details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signal_types": {
            "get": {
                "tags": [
                    "ISN view"
                ],
                "summary": "Get the signal definitions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.SignalType"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "A signal type describes a data set that is sharable over an ISN.  Setup the ISN before defining any signal defs.\nSignal types specify a record that can be shared over the ISN\n- Each type has a unique title\n- A URL-friendly slug is created based on the title supplied when you load the first version of a definition.\n- The title and slug fields can't be changed and it is not allowed to reuse a slug that was created by another account.\n- The field definition is held as an external json schema file\n\nVersions\n- A signal type can have multiple versions - these share the same title/slug but have different json schemas.\n- use this endpoint to create the first version - the bump_type (major/minor/patch) determines the inital semver(1.0.0, 0.1.0 or 0.0.1)\n- subsequent POSTs to this endpoint that reference a previously sumbitted title/slug but point to a different schema will increment the version\n\nSignal type definitions are referred to with a url like this http://{hostname}/api/isn/{isn_slug}/signal_types/{slug}/v{sem_ver}\n",
                "tags": [
                    "signal config"
                ],
                "summary": "Create signal type definition",
                "parameters": [
                    {
                        "description": "signal definition details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signal_types/{slug}/v{sem_ver}": {
            "get": {
                "tags": [
                    "ISN view"
                ],
                "summary": "Get a signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "version to be recieved",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SignalTypeAndLinkedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "users can mark the signal type as *in use/not in use* and update the description or link to the readme file\n\nIt is not allowed to update the schema url - instead users should create a new declaration with the same title and bump the version",
                "tags": [
                    "signal config"
                ],
                "summary": "Update signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "Sem ver",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "signal type details to be updated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateSignalTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signals/accounts/{account_id}/batches": {
            "get": {
                "description": "TODO - get latest, previous, by data ranage\nTODO",
                "tags": [
                    "Signals Management"
                ],
                "summary": "Get details about a set of signal batches",
                "responses": {}
            }
        },
        "/api/isn/{isn_slug}/signals/accounts/{account_id}/batches/{signals_batch_id}": {
            "get": {
                "description": "TODO - get by id. Include status (errs, received, latest localref in batch)",
                "tags": [
                    "Signals Management"
                ],
                "summary": "Get a signal batch",
                "responses": {}
            }
        },
        "/api/isn/{isn_slug}/signals/batches": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This endpoint is used by service accounts to create a new batch used to track signals sent to the specified isn\n\nFor user accounts, a batch is automatically created when they are granted write permission to an isn and is only closed if their permission to write to the isn is revoked\n\nFor service accounts, the client app can decide how long to keep a batch open\n(a batch status summary is sent to a webhook after the batch closes)\n\nopening a batch closes the previous batch created on the isn for this account.\n\nSignals can only be sent to open batches.\n\nauthentication is based on the supplied access token:\n(the site owner; the isn admin and members with an isn_perm= write can create a batch)\n",
                "tags": [
                    "Signals Management"
                ],
                "summary": "Create a new signal batch",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalsBatchResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signals/receiver": {
            "get": {
                "tags": [
                    "ISN view"
                ],
                "summary": "Get an ISN receiver config",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetIsnReceiverByIsnSlugRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This endpoint can only be used by the site owner or the ISN admin",
                "tags": [
                    "ISN config"
                ],
                "summary": "Update an ISN Receiver",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN receiver details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateIsnReceiverRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "An ISN receiver handles the http requests sent by clients that pass Signals to the ISN\n\nYou can specify how many receivers should be started for the ISN and they will listen on an automatically generted port, starting at 8081\n\nThe public facing url will be hosted on https://{isn_host}/isn/{isn_slug}/signals/receiver\nthe isn_host will typically be a load balancer or API gateway that proxies requests to the internal signald services\n\nnote receivers are always created in 'offline' mode.\n\nThis endpoint can only be used by the site owner or the ISN admin",
                "tags": [
                    "ISN config"
                ],
                "summary": "Create an ISN Receiver definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN receiver details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnReceiverRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnReceiverResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signals/retriever": {
            "get": {
                "tags": [
                    "ISN view"
                ],
                "summary": "Get an ISN retriever config",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetIsnRetrieverByIsnSlugRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This endpoint can only be used by the site owner or the ISN admin",
                "tags": [
                    "ISN config"
                ],
                "summary": "Update an ISN Retriever",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN retriever details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateIsnRetrieverRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "An ISN retriever handles the http requests sent by clients to get Signals from the ISN\n\nYou can specify how many retrievers should be started for the ISN and they will listen on an automatically generted port\n\nThe public facing url will be hosted on https://{isn_host}/isn/{isn_slug}/signals/retriever\nthe isn_host will typically be a load balancer or API gateway that proxies requests to the internal signald services\n\nnote retrievers are created in 'offline' mode.\n\nThis endpoint can only be used by the site owner or the ISN admin",
                "tags": [
                    "ISN config"
                ],
                "summary": "Create an ISN Retriever definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN retriever details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnRetrieverRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnRetrieverResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{slug}": {
            "get": {
                "description": "Returns details about the ISN plus details of any configured receivers/retrievers",
                "tags": [
                    "ISN view"
                ],
                "summary": "Get an ISN configuration",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.IsnAndLinkedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "description": "This api displays email addresses and is currently only available on dev env pending implementation of role based access",
                "tags": [
                    "auth"
                ],
                "summary": "Get the registered users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetUsersRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/admins/account/{account_id}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This endpoint grants the admin role to a site member\n\nAn admin can:\n- Create an ISN\n- Define the signal_types used in the ISN\n- read/write to their own ISNs\n- Grant other accounts read or write access to their ISNs\n- Create service identities ('service accounts')\n\nthis endpoint can only be used by the site owner account",
                "tags": [
                    "auth"
                ],
                "summary": "Grant admin role",
                "parameters": [
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/admins/{account_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "this endpoint can only be used by the site owner account",
                "tags": [
                    "auth"
                ],
                "summary": "Revoke account admin role",
                "parameters": [
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "The response body includes an access token. A refresh token is included in a http-only cookie named refresh_token\nThe access_token is valid for 30 mins.\n\nUse the refresh_token with the /auth/refresh endpoint to renew the access_token.\n\nThe refresh_token lasts 30 days unless it is revoked earlier.\nTo renew the refresh_token, log in again.",
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "email and password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.AccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/password/reset": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Use this api to reset the user's password.  Requires a valid access token and the current password\n\nTODO - forgotten password facility",
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdatePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request with possible error codes: malformed_body, password_too_short",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized with possible error code: authentication_error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error with possible error codes: database_error, internal_error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "The first user to be created for this service will be created with an admin role.\nSubsequent accounts default to standard member roles.\nNew members can't access any information beyond the public data on the site until an admin grants them access to an ISN.",
                "tags": [
                    "auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad request with possible error codes: malformed_body, password_too_short",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict with possible error code:resource_already_exists",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error with possible error codes: database_error, internal_error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/revoke": {
            "post": {
                "security": [
                    {
                        "BearerRefreshToken": []
                    }
                ],
                "description": "Revoke a refresh token to prevent it being used to create new access tokens.\n\nYou need to supply a vaild refresh token to use this API - if the refresh token has expired or been revoked the user must login again to get a new one.\n\nThe refresh token should be supplied in a http-only cookie called refresh_token.\n\nYou must also provide a previously issued bearer access token - it does not matter if it has expired\n(the token is not used to authenticate the request but is needed to establish the ID of the user making the request)\n\nNote that any unexpired access tokens issued for this user will continue to work until they expire.\nUsers must log in again to obtain a new refresh token if the current one has been revoked.\n",
                "tags": [
                    "auth"
                ],
                "summary": "Revoke refresh token",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "security": [
                    {
                        "BearerRefreshToken": []
                    }
                ],
                "description": "Use this endpoint to get a new access token.\n\nYou need to supply a vaild refresh token to use this API - if the refresh token has expired or been revoked the user must login again to get a new one.\n\nThe refresh token should be supplied in a http-only cookie called refresh_token.\n\nYou must also provide a previously issued bearer access token - it does not matter if it has expired\n(the token is not used to authenticate the request but is needed to establish the ID of the user making the request)\n\nNote this action automatically revokes the current refresh_token and issues a new one.\n\nThe new refresh token is sent in an http-only cookie named refresh_token.\nIn production deployments the secure flag (https only) on the cookie will be set to true\n\nAccess tokens expire after 30 mins and subsequent requests using the token will fail with an error_code of \"access_token_expired\"\n",
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.AccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "check if the signalsd service is ready",
                "tags": [
                    "Site admin"
                ],
                "summary": "Readiness",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/isn/{isn_slug}/accounts/{account_id}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Grant an account read or write access to an isn.\nThis end point can only be used by the site owner or the isn admin account.",
                "tags": [
                    "ISN Permissions"
                ],
                "summary": "Grant ISN access permission",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Revoke an account read or write access to an isn.\nThis end point can only be used by the site owner or the isn admin account.",
                "tags": [
                    "ISN Permissions"
                ],
                "summary": "Revoke ISN access permission",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/isn/{isn_slug}/signal_types/{signal_type_slug}/signals": {
            "post": {
                "description": "- the client can submit arrays of signals for a single type in a single req (subject to the size\nlimits defined on the signal type definition)\n- The client-supplied local_ref must uniquely identify each signal of the\nspecified signal type that will be supplied by the account.\n- If a local reference is received more than once from an account for a\nspecified signal_type it will be stored with a incremented version number\nand the previous version will be marked as latest=false (it does not matter\nif the previous signal was received in a different batch, but the signal must\nbe owned by the same account).\n- If a deletion request is received, all version of the signal will be marked\nas 'withdrawn'.\n- Correlation_ids are auto generated on the server unless supplied by the client, in which case they are used to identify another signal that this signal is related to. The correlated signal does not need to be owned by the same account.",
                "tags": [
                    "Signals Management"
                ],
                "summary": "send one or more signals",
                "responses": {}
            }
        },
        "/webhooks": {
            "post": {
                "description": "TODO - register a webhook to recieve signals batch status updates",
                "tags": [
                    "Signals Management"
                ],
                "summary": "Register webhook",
                "responses": {}
            }
        }
    },
    "definitions": {
        "apperrors.ErrorCode": {
            "type": "string",
            "enum": [
                "access_token_expired",
                "authentication_error",
                "authorization_error",
                "database_error",
                "forbidden",
                "internal_error",
                "invalid_request",
                "malformed_body",
                "not_implemented",
                "password_too_short",
                "refresh_token_invalid",
                "resource_already_exists",
                "resource_not_found",
                "token_invalid"
            ],
            "x-enum-varnames": [
                "ErrCodeAccessTokenExpired",
                "ErrCodeAuthenticationFailure",
                "ErrCodeAuthorizationFailure",
                "ErrCodeDatabaseError",
                "ErrCodeForbidden",
                "ErrCodeInternalError",
                "ErrCodeInvalidRequest",
                "ErrCodeMalformedBody",
                "ErrCodeNotImplemented",
                "ErrCodePasswordTooShort",
                "ErrCodeRefreshTokenInvalid",
                "ErrCodeResourceAlreadyExists",
                "ErrCodeResourceNotFound",
                "ErrCodeTokenInvalid"
            ]
        },
        "auth.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTaWduYWxTZXJ2ZXIiLCJzdWIiOiI2OGZiNWY1Yi1lM2Y1LTRhOTYtOGQzNS1jZDIyMDNhMDZmNzMiLCJleHAiOjE3NDY3NzA2MzQsImlhdCI6MTc0Njc2NzAzNH0.3OdnUNgrvt1Zxs9AlLeaC9DVT6Xwc6uGvFQHb6nDfZs"
                },
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "account_type": {
                    "type": "string",
                    "enum": [
                        "user",
                        "service_identity"
                    ]
                },
                "expires_in": {
                    "description": "seconds",
                    "type": "integer",
                    "example": 1800
                },
                "isn_perms": {
                    "description": "todo - perms",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/auth.IsnPerms"
                    }
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "owner",
                        "admin",
                        "member"
                    ],
                    "example": "admin"
                },
                "token_type": {
                    "type": "string",
                    "example": "Bearer"
                }
            }
        },
        "auth.IsnPerms": {
            "type": "object",
            "properties": {
                "permission": {
                    "type": "string",
                    "enum": [
                        "read",
                        "write"
                    ],
                    "example": "read"
                },
                "signal_types": {
                    "description": "list of available signal types for the isn",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "database.GetForDisplayIsnReceiverByIsnIDRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "default_rate_limit": {
                    "type": "integer"
                },
                "listener_count": {
                    "type": "integer"
                },
                "max_daily_validation_failures": {
                    "type": "integer"
                },
                "max_payload_kilobytes": {
                    "type": "integer"
                },
                "payload_validation": {
                    "type": "string"
                },
                "receiver_status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetForDisplayIsnRetrieverByIsnIDRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "default_rate_limit": {
                    "type": "integer"
                },
                "listener_count": {
                    "type": "integer"
                },
                "retriever_status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetForDisplayUserByIsnIDRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetIsnReceiverByIsnSlugRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "default_rate_limit": {
                    "type": "integer"
                },
                "isn_id": {
                    "type": "string"
                },
                "isn_is_in_use": {
                    "type": "boolean"
                },
                "listener_count": {
                    "type": "integer"
                },
                "max_daily_validation_failures": {
                    "type": "integer"
                },
                "max_payload_kilobytes": {
                    "type": "integer"
                },
                "payload_validation": {
                    "type": "string"
                },
                "receiver_status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetIsnRetrieverByIsnSlugRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "default_rate_limit": {
                    "type": "integer"
                },
                "isn_id": {
                    "type": "string"
                },
                "isn_is_in_use": {
                    "type": "boolean"
                },
                "listener_count": {
                    "type": "integer"
                },
                "retriever_status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetUserByIDRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "user_role": {
                    "type": "string"
                }
            }
        },
        "database.GetUsersRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_role": {
                    "type": "string"
                }
            }
        },
        "database.Isn": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "slug": {
                    "type": "string"
                },
                "storage_connection_url": {
                    "type": "string"
                },
                "storage_type": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_account_id": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "database.SignalType": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "isn_id": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateIsnReceiverRequest": {
            "type": "object",
            "properties": {
                "default_rate_limit": {
                    "description": "maximum number of requests per minute per session",
                    "type": "integer",
                    "example": 600
                },
                "isn_slug": {
                    "type": "string",
                    "example": "sample-isn--example-org"
                },
                "listener_count": {
                    "type": "integer",
                    "example": 1
                },
                "max_daily_validation_failures": {
                    "description": "default = 0",
                    "type": "integer",
                    "example": 5
                },
                "max_payload_kilobytes": {
                    "type": "integer",
                    "example": 50
                },
                "payload_validation": {
                    "type": "string",
                    "enum": [
                        "always",
                        "never",
                        "optional"
                    ],
                    "example": "always"
                }
            }
        },
        "handlers.CreateIsnReceiverResponse": {
            "type": "object",
            "properties": {
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org/signals/receiver"
                }
            }
        },
        "handlers.CreateIsnRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Sample ISN description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": true
                },
                "storage_connection_url": {
                    "type": "string",
                    "example": "postgres:/signalsd:@localhost:5432/signals?sslmode=disable"
                },
                "storage_type": {
                    "type": "string",
                    "example": "mq"
                },
                "title": {
                    "type": "string",
                    "example": "Sample ISN @example.org"
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "example": "private"
                }
            }
        },
        "handlers.CreateIsnResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "67890684-3b14-42cf-b785-df28ce570400"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-isn--example-org"
                }
            }
        },
        "handlers.CreateIsnRetrieverRequest": {
            "type": "object",
            "properties": {
                "default_rate_limit": {
                    "description": "maximum number of requests per minute per session",
                    "type": "integer",
                    "example": 600
                },
                "isn_slug": {
                    "type": "string",
                    "example": "sample-isn--example-org"
                },
                "listener_count": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.CreateIsnRetrieverResponse": {
            "type": "object",
            "properties": {
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org/signals/retriever"
                }
            }
        },
        "handlers.CreateSignalTypeRequest": {
            "type": "object",
            "properties": {
                "bump_type": {
                    "description": "this is used to increment semver for the signal definition",
                    "type": "string",
                    "enum": [
                        "major",
                        "minor",
                        "patch"
                    ],
                    "example": "patch"
                },
                "detail": {
                    "description": "updated description",
                    "type": "string",
                    "example": "description"
                },
                "isn_slug": {
                    "type": "string",
                    "example": "sample-isn--example-org"
                },
                "readme_url": {
                    "description": "Updated readme file. Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.md"
                },
                "schema_url": {
                    "description": "Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.json"
                },
                "title": {
                    "description": "unique title",
                    "type": "string",
                    "example": "Sample Signal @example.org"
                }
            }
        },
        "handlers.CreateSignalTypeResponse": {
            "type": "object",
            "properties": {
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org/signals_types/sample-signal--example-org/v0.0.1"
                },
                "sem_ver": {
                    "type": "string",
                    "example": "0.0.1"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-signal--example-org"
                }
            }
        },
        "handlers.CreateSignalsBatchResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org/account/{account_id}/batch/{signals_batch_id}"
                },
                "signals_batch_id": {
                    "type": "string",
                    "example": "b51faf05-aaed-4250-b334-2258ccdf1ff2"
                }
            }
        },
        "handlers.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "description": "passwords must be at least 11 characters long",
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                }
            }
        },
        "handlers.IsnAndLinkedInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "isn_receiver": {
                    "$ref": "#/definitions/database.GetForDisplayIsnReceiverByIsnIDRow"
                },
                "isn_rectriever": {
                    "$ref": "#/definitions/database.GetForDisplayIsnRetrieverByIsnIDRow"
                },
                "slug": {
                    "type": "string"
                },
                "storage_connection_url": {
                    "type": "string"
                },
                "storage_type": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/database.GetForDisplayUserByIsnIDRow"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "description": "passwords must be at least 11 characters long",
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                }
            }
        },
        "handlers.SignalTypeAndLinkedInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "isn": {
                    "$ref": "#/definitions/database.Isn"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateIsnReceiverRequest": {
            "type": "object",
            "properties": {
                "default_rate_limit": {
                    "description": "maximum number of requests per minute per session",
                    "type": "integer",
                    "example": 600
                },
                "listener_count": {
                    "type": "integer",
                    "example": 1
                },
                "max_daily_validation_failures": {
                    "description": "default = 0",
                    "type": "integer",
                    "example": 5
                },
                "max_payload_kilobytes": {
                    "type": "integer",
                    "example": 50
                },
                "payload_validation": {
                    "type": "string",
                    "enum": [
                        "always",
                        "never",
                        "optional"
                    ],
                    "example": "always"
                },
                "receiver_status": {
                    "type": "string",
                    "enum": [
                        "offline",
                        "online",
                        "error",
                        "closed"
                    ],
                    "example": "offline"
                }
            }
        },
        "handlers.UpdateIsnRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Sample ISN description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": true
                },
                "storage_connection_url": {
                    "type": "string",
                    "example": "postgres:/signalsd:@localhost:5432/signals?sslmode=disable"
                },
                "storage_type": {
                    "type": "string",
                    "example": "mq"
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "example": "private"
                }
            }
        },
        "handlers.UpdateIsnRetrieverRequest": {
            "type": "object",
            "properties": {
                "default_rate_limit": {
                    "description": "maximum number of requests per minute per session",
                    "type": "integer",
                    "example": 600
                },
                "listener_count": {
                    "type": "integer",
                    "example": 1
                },
                "retriever_status": {
                    "type": "string",
                    "enum": [
                        "offline",
                        "online",
                        "error",
                        "closed"
                    ],
                    "example": "offline"
                }
            }
        },
        "handlers.UpdatePasswordRequest": {
            "type": "object",
            "properties": {
                "current_password": {
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                },
                "new_password": {
                    "type": "string",
                    "example": "ue6U\u003e\u0026X3j570"
                }
            }
        },
        "handlers.UpdateSignalTypeRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "updated description",
                    "type": "string",
                    "example": "description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": false
                },
                "readme_url": {
                    "description": "Updated readme file. Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.md"
                }
            }
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/apperrors.ErrorCode"
                        }
                    ],
                    "example": "example_error_code"
                },
                "message": {
                    "type": "string",
                    "example": "message describing the error"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAccessToken": {
            "description": "Bearer {JWT access token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "User and token management endpoints",
            "name": "auth"
        },
        {
            "description": "signal definitions describe the format of the data being shared in an ISN",
            "name": "signal config"
        },
        {
            "description": "Information sharing networks are used to exchange signalsd between participating users.",
            "name": "ISN config"
        },
        {
            "description": "View information about the configured ISNs",
            "name": "ISN view"
        },
        {
            "description": "Site adminstration tools",
            "name": "Site admin"
        }
    ]
}