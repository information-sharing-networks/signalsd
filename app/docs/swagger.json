{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Signals ISN service API for managing Information Sharing Networks\n\n## Common Error Responses\nAll endpoints may return:\n- `413` Request body exceeds size limit\n- `429` Rate limit exceeded\n- `500` Internal server error\n\nIndividual endpoints document their specific business logic errors.\n\n## Request Limits\nAll endpoints are protected by:\n- **Rate limiting**: Configurable requests per second (default: 100 RPS, 20 burst)\n- **Request size limits**: 64KB for admin/auth endpoints, 5MB for signal ingestion\n\nCheck the X-Max-Request-Body response header for the configured limit on signals payload.\n\nThe rate limit is set globaly and prevents abuse of the service.\nIn production there will be additional protections in place such as per-IP rate limiting provided by the load balancer/reverse proxy.\n\n## Authentication \u0026 Authorization\n\n### Authentication Flow\n- **Web users**: Login → get JWT + refresh cookie → use JWT for API calls\n- **Service accounts**: Authenticate with Client credentials → get JWT → use JWT for API calls → re-authenticate when expired\n\n### Authorization\nAll protected API endpoints expect valid JWT access tokens containing user identity and permissions.\n\ntokens should be supplied using:\n**Authorization header**: `Bearer \u003ctoken\u003e`\n\n**Token refresh:**\n- **Web users**: Refresh tokens (HTTP-only cookies) automatically renew access tokens\n- **Service accounts**: Must re-authenticate with client credentials when tokens expire\n\nAccess tokens expire in 30 minutes\n\nRefresh tokens expire in 30 days (web users only)\n\n## Date/Time Handling:\n\n**URL Parameters**: The following ISO 8601 formats are accepted in URL query parameters:\n- 2006-01-02T15:04:05Z (UTC)\n- 2006-01-02T15:04:05+07:00 (with offset)\n- 2006-01-02T15:04:05.999999999Z (nano precision)\n- 2006-01-02 (date only, treated as start of day UTC: 2006-01-02T00:00:00Z)\n\nNote: If the timestamp contains a timezone offset (as in +07:00), the + must be percent-encoded as %2B in the query.\n\n**Response Bodies**: All date/time fields in JSON responses use RFC3339 format (ISO 8601):\n- Example: \"2025-06-03T13:47:47.331787+01:00\"",
        "title": "Signals ISN API",
        "contact": {},
        "license": {
            "name": "MIT"
        }
    },
    "paths": {
        "/admin/accounts/{account_id}/admin-role": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This endpoint grants the admin role to a site member\n\nAn admin can:\n- Create an ISN\n- Define the signal_types used in the ISN\n- read/write to their own ISNs\n- Grant other accounts read or write access to their ISNs\n- Create service accounts\n\nthis endpoint can only be used by the site owner account",
                "tags": [
                    "Site admin"
                ],
                "summary": "Grant admin role",
                "parameters": [
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "this endpoint can only be used by the site owner account",
                "tags": [
                    "Site admin"
                ],
                "summary": "Revoke admin role",
                "parameters": [
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/accounts/{account_id}/disable": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "**Use Cases:**\n- **Security Incident**: Compromised account needs immediate lockout\n- **Policy Violation**: Account violated terms and needs suspension\n- **Employee Departure**: Remove access for departed staff\n\n**Actions Performed:**\n- Sets `is_active = false` (account becomes unusable)\n- Revokes all client secrets/one-time secrets (service accounts)\n- Revokes all refresh tokens (web users)\n\n**Recovery:** Account must be re-enabled by admin via `/admin/accounts/{id}/enable`\nService accounts also need re-registration via `/api/auth/register/service-accounts`\n\n**Note:** The site owner account cannot be disabled to prevent system lockout.\nOnly owners and admins can disable accounts.",
                "tags": [
                    "Site admin"
                ],
                "summary": "Disable an account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID to disable",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid account ID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Cannot disable site owner account",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/accounts/{account_id}/enable": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "**Administrative endpoint to re-enable previously disabled accounts.**\nSets account status to `is_active = true` (does not create new tokens).\n\n**Post-Enable Steps Required:**\n- **Service Accounts**: Must re-register via `/api/auth/register/service-accounts` (same client_id, new credentials)\n- **Web Users**: Can immediately log in again via `/auth/login`\n\nOnly owners and admins can enable accounts.",
                "tags": [
                    "Site admin"
                ],
                "summary": "Enable an account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID to enable",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid account ID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/reset": {
            "post": {
                "description": "Delete all registered users and associated data.\nThis endpoint only works on environments configured as 'dev'",
                "tags": [
                    "Site admin"
                ],
                "summary": "reset",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/service-accounts": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Get a list of all service accounts in the system.\nOnly owners and admins can view service account lists.",
                "tags": [
                    "Site admin"
                ],
                "summary": "Get all service accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.ServiceAccount"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/service-accounts/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Get a specific service account by account ID.\nOnly owners and admins can view service account details.",
                "tags": [
                    "Site admin"
                ],
                "summary": "Get service account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.ServiceAccount"
                        }
                    },
                    "400": {
                        "description": "Invalid service account ID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service account not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This api displays all the site users and their email addreses (can only be used by owner account)",
                "tags": [
                    "Site admin"
                ],
                "summary": "Get registered users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetUsersRow"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This api displays a site user and their email addreses (can only be used by owner account)",
                "tags": [
                    "Site admin"
                ],
                "summary": "Get registered user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "68fb5f5b-e3f5-4a96-8d35-cd2203a06f73",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.GetUserByIDRow"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{user_id}/reset-password": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Allows admins to reset a user's password (use this endpoint if the user has forgotten their password)",
                "tags": [
                    "Site admin"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Account ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetUserPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetUserPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin role required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "The response body includes an access token which can be used to access the protected enpoints, assuming the account has the appropriate permissions.\nThe access_token is valid for 30 mins.\n\nAs part of the login response, the server sets a http-only cookie on the client that will allow it to use the /auth/refresh endpoint to renew the access_token\nThe refresh_token lasts 30 days unless it is revoked earlier.\n\nThe account's role and permissions are encoded and encloded as part of the jwt access token and also provided in the response body\nTo renew the refresh_token, log in again.",
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "email and password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.AccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/password/reset": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Use this api when a user wants to reset their password.  Requires a valid access token and the current password\n",
                "tags": [
                    "auth"
                ],
                "summary": "Password reset",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdatePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request with possible error codes: malformed_body, password_too_short",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized with possible error code: authentication_error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "The first user to be created for this service will be created with an admin role.\nSubsequent accounts default to standard member roles.\nNew members can't access any information beyond the public data on the site until an admin grants them access to an ISN.",
                "tags": [
                    "auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad request with possible error codes: malformed_body, password_too_short",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict with possible error code: resource_already_exists",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register/service-accounts": {
            "post": {
                "security": [
                    {
                        "BearerServiceAccount": []
                    }
                ],
                "description": "Registring a new service account creates a one time link with the client credentials in it - this must be used by the client within 48 hrs.\n\nIf you want to reissue a client's credentials call this endpoint again with the same client organization and contact email.\nA new one time setup url will be generated and the old one will be revoked.\nNote the client_id will remain the same and any existing client secrets will be revoked.\n\nYou have to be an admin or the site owner to use this endpoint\n",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Register a new service account",
                "parameters": [
                    {
                        "description": "service account details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateServiceAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateServiceAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/service-accounts/rotate-secret": {
            "post": {
                "description": "Self-service endpoint for service accounts to rotate their client secret.\nRequires current valid client_id and client_secret for authentication.\nThe old secret remains valid for 5 minutes to prevent race conditions when multiple instances are involved and to stop clients being locked out where network issues prevent them from receiving the new secret immediately.\n\n**Use Cases:**\n- Regular credential rotation for security compliance\n- Suspected credential compromise requiring immediate rotation\n",
                "tags": [
                    "auth"
                ],
                "summary": "Rotate service account client secret",
                "parameters": [
                    {
                        "description": "Service account credentials",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ServiceAccountTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ServiceAccountRotateResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/service-accounts/setup/{setup_id}": {
            "get": {
                "description": "Exchange one-time setup token for permanent client credentials (the one-time request url is created when a new service account is registered).\nthe endpoint renders a html page that the user can use to copy their client credentials.\nThe setup url is only valid for 48 hours.\n",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Complete service account setup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "One-time setup ID",
                        "name": "setup_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "410": {
                        "description": "Gone",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn": {
            "get": {
                "description": "get a list of the configured ISNs",
                "tags": [
                    "ISN details"
                ],
                "summary": "Get the ISNs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Isn"
                            }
                        }
                    }
                }
            }
        },
        "/api/isn/": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    },
                    {
                        "RefreshTokenCookieAuth": []
                    }
                ],
                "description": "Create an Information Sharing Network (ISN)\n\nvisibility = \"private\" means that signalsd on the network can only be seen by network participants.\n\nISN admins automatically get write permission for their own ISNs.\nSite owners automatically get write permission on all ISNs.\n\nThis endpoint can only be used by the site owner or an admin",
                "tags": [
                    "ISN configuration"
                ],
                "summary": "Create an ISN",
                "parameters": [
                    {
                        "description": "ISN details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Update the ISN details\nThis endpoint can only be used by the site owner or the ISN admin",
                "tags": [
                    "ISN configuration"
                ],
                "summary": "Update an ISN",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateIsnRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/accounts": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Get a list of all accounts (users and service accounts) that have permissions on the specified ISN.\nOnly ISN owners and site owners can view this information.",
                "tags": [
                    "ISN details"
                ],
                "summary": "Get all accounts with access to an ISN",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ISN slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetAccountsByIsnIDRow"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/accounts/{account_id}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Grant an account read or write access to an isn.\nThis end point can only be used by the site owner or the isn admin account.",
                "tags": [
                    "ISN Permissions"
                ],
                "summary": "Grant ISN access permission",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/batches": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This endpoint is used by service accounts to create a new batch. Batches are used to track signals sent by an account to the specified ISN.\n\nOpening a batch closes the previous batch (the client app can decide how long to keep a batch open)\n\nSignals can only be sent to open batches.\n\nAuthentication is based on the supplied access token:\nthe site owner, the isn admin and members with an isn_perm=write can create a batch for the ISN.\n\nNote this endpoint is not needed for web users (a batch is automatically created when they are granted write permission to an isn and is only closed if their permission to write to the ISN is revoked)\n",
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Create a new signal batch",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalsBatchResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signal_types": {
            "get": {
                "tags": [
                    "ISN details"
                ],
                "summary": "Get the signal definitions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.SignalType"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "A signal type describes a data set that is sharable over an ISN.  Setup the ISN before defining any signal defs.\nSignal types specify a record that can be shared over the ISN\n- Each type has a unique title\n- A URL-friendly slug is created based on the title supplied when you load the first version of a definition.\n- The title and slug fields can't be changed and it is not allowed to reuse a slug that was created by another account.\n- The field definition is held as an external JSON schema file\n\nSchema URL Requirements\n- Must be a valid JSON schema on a public github repo (e.g., https://github.com/org/repo/blob/2025.01.01/schema.json)\n- To disable schema validation, use: https://github.com/skip/validation/main/schema.json\n\nVersions\n- A signal type can have multiple versions - these share the same title/slug but have different JSON schemas\n- Use this endpoint to create the first version - the bump_type (major/minor/patch) determines the initial semver (1.0.0, 0.1.0 or 0.0.1)\n- Subsequent POSTs to this endpoint that reference a previously submitted title/slug but point to a different schema will increment the version\n\nSignal type definitions are referred to with a URL like this: http://{hostname}/api/isn/{isn_slug}/signal_types/{slug}/v{sem_ver}\n",
                "tags": [
                    "Signal definitions"
                ],
                "summary": "Create signal type definition",
                "parameters": [
                    {
                        "description": "signal definition details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals/search": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Search for signals by date or account in private ISNs (authentication required)\n\nNote the endpoint returns the latest version of each signal and does not include withdrawn or archived signals",
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Search for signals in private ISNs",
                "parameters": [
                    {
                        "type": "string",
                        "example": "2006-01-02T15:04:05Z",
                        "description": "Start date for filtering",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for filtering",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "Account ID for filtering",
                        "name": "account_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.SignalVersionDoc"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signal_types/{slug}/v{sem_ver}": {
            "get": {
                "tags": [
                    "ISN details"
                ],
                "summary": "Get a signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "version to be recieved",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SignalTypeAndLinkedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "users can mark the signal type as *in use/not in use* and update the description or link to the readme file\n\nIt is not allowed to update the schema url - instead users should create a new declaration with the same title and bump the version",
                "tags": [
                    "Signal definitions"
                ],
                "summary": "Update signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "Sem ver",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "signal type details to be updated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateSignalTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Only signal types that have never been referenced by signals can be deleted",
                "tags": [
                    "Signal definitions"
                ],
                "summary": "Delete a signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal type slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "version to be deleted",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/transfer-ownership": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    },
                    {
                        "RefreshTokenCookieAuth": []
                    }
                ],
                "description": "Transfer ownership of an ISN to another admin account.\nThis can be used when an admin leaves or when reorganizing responsibilities.\nOnly the site owner can transfer ISN ownership.",
                "tags": [
                    "ISN configuration"
                ],
                "summary": "Transfer ISN ownership",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ISN slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transfer details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TransferIsnOwnershipRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{slug}": {
            "get": {
                "description": "Returns details about the ISN",
                "tags": [
                    "ISN details"
                ],
                "summary": "Get an ISN configurationuration",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.IsnAndLinkedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/public/isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals/search": {
            "get": {
                "description": "Search for signals by date or account in public ISNs (no authentication required)\n\nNote the endpoint returns the latest version of each signal and does not include withdrawn or archived signals",
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Search for signals in public ISNs",
                "parameters": [
                    {
                        "type": "string",
                        "example": "2006-01-02T15:04:05Z",
                        "description": "Start date for filtering",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for filtering",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "Account ID for filtering",
                        "name": "account_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.SignalVersionDoc"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "check if the signalsd service is up",
                "tags": [
                    "Site admin"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "check if the signalsd service is ready",
                "tags": [
                    "Site admin"
                ],
                "summary": "Readiness Check",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/isn/{isn_slug}/accounts/{account_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Revoke an account read or write access to an isn.\nThis end point can only be used by the site owner or the isn admin account.",
                "tags": [
                    "ISN Permissions"
                ],
                "summary": "Revoke ISN access permission",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/isn/{isn_slug}/batches/search": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Search for batches with optional filtering parameters\n\nThe search endpoint returns the full batch status (including per-signal-type breakdown) for each batch.\n\nWhere a signal has failed to load as part of the batch and not subsequently been loaded, the failure is considered unresolved and listed as a failure in the batch status\n\nMember accounts can only see batches they have created. ISN Admins can see batches for ISNs they administer. The site owner can see all batches.\n\nAt least one search criteria must be provided:\n- latest=true (get the latest batch)\n- previous=true (get the previous batch)\n- created date range (both created_after and created_before)\n- closed date range (both closed_after and closed_before)\n\nAccepted timestamp formats (ISO 8601):\n- 2006-01-02T15:04:05Z (UTC)\n- 2006-01-02T15:04:05+07:00 (with offset)\n- 2006-01-02T15:04:05.999999999Z (nano precision)\n\nDates (YYYY-MM-DD) can also be used.\nThese are treated as the start of day UTC (so 2006-01-02 is treated as 2006-01-02T00:00:00Z)",
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Search for batches",
                "parameters": [
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Get the latest batch",
                        "name": "latest",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Get the previous batch",
                        "name": "previous",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2006-01-02T15:04:05Z",
                        "description": "Start date for batch creation filtering",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2006-01-02T16:00:00Z",
                        "description": "End date for batch creation filtering",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2006-01-02T15:04:05Z",
                        "description": "Start date for batch closure filtering",
                        "name": "closed_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2006-01-02T16:00:00Z",
                        "description": "End date for batch closure filtering",
                        "name": "closed_before",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.BatchStatusResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/isn/{isn_slug}/batches/{batch_id}/status": {
            "get": {
                "description": "Returns the status of a batch, including the number of signals loaded and the number of failures for each signal type\n\nThe endpoint returns the full batch status (including per-signal-type breakdown) for the batch\n\nWhere a signal has failed to load as part of the batch and not subsequently been loaded, the failure is considered unresolved and listed as a failure in the batch status\n\nOnly admins/owners can use this endpoint (admins can only see status for batches they created)\n\n",
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Get batch processing status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ISN slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Batch ID",
                        "name": "batch_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.BatchStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Submit an array of signals for storage on the ISN\n- payloads must not mix signals of different types and is subject to the size limits defined on the site.\n- The client-supplied local_ref must uniquely identify each signal of the specified signal type that will be supplied by the account.\n- If a local reference is received more than once from an account for a specified signal_type it will be stored with a incremented version number.\n- Optionally a correlation_id can be supplied - this will link the signal to a previously received signal. The correlated signal does not need to be owned by the same account.\n- requests are only accepted for the open signal batch for this account/ISN.\n\n**Authentication**\n\nRequires a valid access token.\nThe claims in the access token list the ISNs and signal_types that the account is permitted to use.\n\nThis handler also checks that the signal_type/sem_ver in the url is also listed in the claims (this is to catch mistyped urls)\n\n**Validation and Processing**\n\nSignals are validated against the json schema specified for the signal type unless validation is disabled on the type definition.\nIndividual signal processing failures (validation errors, incorrect correlation ids, database errors) are recorded in the response but do not prevent other signals from being processed.\n\nWhen validation is disabled, basic checks are still done on the incoming data and the following issues create a 400 error and cause the entire payload to be rejected:\n- invalid json format\n- missing fields (the array of signals must be in a json object called signals, and content and local_ref must be present for each record).\n\n\n**Response Status Codes**\n- 200: All signals processed successfully\n- 207: Partial success (some signals succeeded, some failed)\n- 400 / error_code = 'all_signals_failed_processing': All signals failed processing but request format was valid\n- 400 / error_code = 'malformed_body': Invalid request format, authentication, or other request-level errors\n- 400: authentication, or other request-level errors\n- 500: Internal server errors\n\nInternal server errors cause the whole payload to be rejected.",
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Send signals",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal type slug",
                        "name": "signal_type_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "signal type sem_ver number",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "create signals",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalsRequestDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All signals processed successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalsResponse"
                        }
                    },
                    "207": {
                        "description": "Partial success - some signals succeeded, some failed",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or authentication failure",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals/{signal_id}": {
            "get": {
                "tags": [
                    "Signal sharing"
                ],
                "summary": "get a signal (TODO)",
                "responses": {
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/isn/{isn_slug}/signal_types/{signal_type_slug}/{signal_id}": {
            "delete": {
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Withdraw a signal (TODO)",
                "responses": {
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/oauth/revoke": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Revoke a refresh token or client secret to prevent it being used to create new access tokens (self-service)\n\n**Use Cases:**\n- **Web User Logout**: User wants to log out of their session\n- **Service Account Security**: Account no longer being used/compromised secret\n\n**Service Accounts:**\nYou must supply your `client ID` and `client secret` in the request body.\nThis revokes **ALL** client secrets for the service account, effectively disabling it.\n\n**IMPORTANT - Service Account Reinstatement:**\n- This endpoint does **NOT** permanently disable the service account itself\n- To restore access, an admin must call `POST /api/auth/register/service-accounts` with the same organization and email\n- This will generate a new setup URL and client secret while preserving the same client_id\n- If the account was disabled by an admin, it must first be re-enabled via `POST /admin/accounts/{account_id}/enable`\n\n**Web Users (Logout):**\nThis endpoint expects a refresh token in an `http-only cookie` and a valid access token in the Authorization header.\nThis revokes the user's refresh token, effectively logging them out.\n\nIf the refresh token has expired or been revoked, the user must login again to get a new one.\n\nYou must also provide a previously issued `bearer access token` in the Authorization header - it does not matter if it has expired\n(the token is not used to authenticate the request but is needed to establish the ID of the user making the request).\n\n**Note:** Any unexpired access tokens issued for this user will continue to work until they expire.\nUsers must log in again to obtain a new refresh token after logout/revocation.\n\n**Client Examples:**\n- **Web User Logout:** `POST /oauth/revoke` with refresh token cookie + Authorization header\n- **Service Account:** `POST /oauth/revoke` with client_id and client_secret in request body\n",
                "tags": [
                    "auth"
                ],
                "summary": "Revoke a token",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid request body ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Token not found or already revoked",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/oauth/token": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "**Client Credentials Grant (Service Accounts):**\n\nIssues new access token (in response body)\n\n- Set `grant_type=client_credentials` as URL parameter\n- Provide `client_id` and `client_secret` in request body\n- Access tokens expire after 30 minutes\n(subsequent requests using the token will fail with HTTP status 401 and an error_code of \"access_token_expired\")\n\n**Refresh Token Grant (Web Users):**\n\nIssues new access token (in response body) and rotates refresh token (HTTP-only cookie)\n\n- Set `grant_type=refresh_token` as URL parameter\n- Must provide current access token in Authorization header (expired tokens accepted)\n- Must have valid refresh token cookie\n- Access tokens expire after 30 minutes\n(subsequent requests using the token will fail with HTTP status 401 and an error_code of \"access_token_expired\")\n- Refresh tokens expire after 30 days\n- subsequent requests using the refresh token will fail with HTTP status 401 and an error_code of \"refresh_token_expired\" and users must login again to get a new one.\n",
                "tags": [
                    "auth"
                ],
                "summary": "New Access Token",
                "parameters": [
                    {
                        "enum": [
                            "client_credentials",
                            "refresh_token"
                        ],
                        "type": "string",
                        "description": "grant type",
                        "name": "grant_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Service account credentials (required for client_credentials grant)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ServiceAccountTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.AccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid grant_type parameter ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed ",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Returns the current API version details",
                "tags": [
                    "Site admin"
                ],
                "summary": "Get API version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/version.Info"
                        }
                    }
                }
            }
        },
        "/webhooks": {
            "post": {
                "description": "register a webhook to recieve signals batch status updates",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Register webhook (TODO)",
                "responses": {
                    "204": {
                        "description": "Not implemented",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apperrors.ErrorCode": {
            "type": "string",
            "enum": [
                "access_token_expired",
                "all_signals_failed_processing",
                "authentication_error",
                "authorization_error",
                "database_error",
                "forbidden",
                "invalid_correlation_id",
                "internal_error",
                "invalid_request",
                "invalid_url_param",
                "malformed_body",
                "not_implemented",
                "password_too_short",
                "refresh_token_invalid",
                "request_too_large",
                "rate_limit_exceeded",
                "resource_already_exists",
                "resource_expired",
                "resource_in_use",
                "resource_not_found",
                "token_invalid"
            ],
            "x-enum-varnames": [
                "ErrCodeAccessTokenExpired",
                "ErrCodeAllSignalsFailedProcessing",
                "ErrCodeAuthenticationFailure",
                "ErrCodeAuthorizationFailure",
                "ErrCodeDatabaseError",
                "ErrCodeForbidden",
                "ErrCodeInvalidCorrelationID",
                "ErrCodeInternalError",
                "ErrCodeInvalidRequest",
                "ErrCodeInvalidURLParam",
                "ErrCodeMalformedBody",
                "ErrCodeNotImplemented",
                "ErrCodePasswordTooShort",
                "ErrCodeRefreshTokenInvalid",
                "ErrCodeRequestTooLarge",
                "ErrCodeRateLimitExceeded",
                "ErrCodeResourceAlreadyExists",
                "ErrCodeResourceExpired",
                "ErrCodeResourceInUse",
                "ErrCodeResourceNotFound",
                "ErrCodeTokenInvalid"
            ]
        },
        "auth.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTaWduYWxzZCIsInN1YiI6ImMxMjQ1Yjc0LTMyMTQtNDUzOS04YTgyLTY2NDNkMzllNjk5YiIsImV4cCI6MTc0ODU4ODE2MiwiaWF0IjoxNzQ4NTg2MzYyLCJhY2NvdW50X2lkIjoiYzEyNDViNzQtMzIxNC00NTM5LThhODItNjY0M2QzOWU2OTliIiwiYWNjb3VudF90eXBlIjoidXNlciIsInJvbGUiOiJvd25lciIsImlzbl9wZXJtcyI6eyJzYW1wbGUtaXNuLS1leGFtcGxlLW9yZyI6eyJwZXJtaXNzaW9uIjoid3JpdGUiLCJzaWduYWxfdHlwZXMiOlsic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC4xIiwic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC4yIiwic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC4zIiwic2FtcGxlLXNpZ25hbG5ldy0tZXhhbXBsZS1vcmcvdjAuMC4xIiwic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC40Il19LCJzYW1wbGUtaXNuLS1zYXVsLW9yZyI6eyJwZXJtaXNzaW9uIjoid3JpdGUiLCJzaWduYWxfdHlwZXMiOlsic2FtcGxlLXNpZ25hbC0tc2F1bC1vcmcvdjAuMC4xIl19fX0.33ANor7XHWkB87npB4RWsJUjBnJHdYZce-lT8w_IN_s"
                },
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "account_type": {
                    "type": "string",
                    "enum": [
                        "user",
                        "service_account"
                    ]
                },
                "expires_in": {
                    "description": "seconds",
                    "type": "integer",
                    "example": 1800
                },
                "isn_perms": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/auth.IsnPerms"
                    }
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "owner",
                        "admin",
                        "member"
                    ],
                    "example": "admin"
                },
                "token_type": {
                    "type": "string",
                    "example": "Bearer"
                }
            }
        },
        "auth.IsnPerms": {
            "type": "object",
            "properties": {
                "permission": {
                    "type": "string",
                    "enum": [
                        "read",
                        "write"
                    ],
                    "example": "read"
                },
                "signal_batch_id": {
                    "type": "string",
                    "example": "967affe9-5628-4fdd-921f-020051344a12"
                },
                "signal_types": {
                    "description": "list of available signal types for the isn",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "signal-type-1/v0.0.1",
                        "signal-type-2/v1.0.0"
                    ]
                }
            }
        },
        "database.GetAccountsByIsnIDRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "account_role": {
                    "type": "string"
                },
                "account_type": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "client_organization": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "isn_id": {
                    "type": "string"
                },
                "permission": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetForDisplaySignalTypeByIsnIDRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetForDisplayUserByIsnIDRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetUserByIDRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "user_role": {
                    "type": "string"
                }
            }
        },
        "database.GetUsersRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_role": {
                    "type": "string"
                }
            }
        },
        "database.Isn": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_account_id": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "database.ServiceAccount": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "client_contact_email": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "client_organization": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.SignalType": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "isn_id": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_content": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.BatchStatus": {
            "type": "object",
            "properties": {
                "failed_count": {
                    "type": "integer"
                },
                "signal_type_slug": {
                    "type": "string"
                },
                "signal_type_version": {
                    "type": "string"
                },
                "stored_count": {
                    "type": "integer"
                },
                "unresolved_failures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.FailureRow"
                    }
                }
            }
        },
        "handlers.BatchStatusResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "batch_id": {
                    "type": "string"
                },
                "batch_status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.BatchStatus"
                    }
                },
                "closed_at": {
                    "type": "string"
                },
                "contains_failures": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "is_latest": {
                    "type": "boolean"
                },
                "isn_slug": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateIsnRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Sample ISN description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": true
                },
                "title": {
                    "type": "string",
                    "example": "Sample ISN @example.org"
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "example": "private"
                }
            }
        },
        "handlers.CreateIsnResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "67890684-3b14-42cf-b785-df28ce570400"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-isn--example-org"
                }
            }
        },
        "handlers.CreateServiceAccountRequest": {
            "type": "object",
            "properties": {
                "client_contact_email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "client_organization": {
                    "type": "string",
                    "example": "example org"
                }
            }
        },
        "handlers.CreateServiceAccountResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "client_id": {
                    "type": "string",
                    "example": "sa_example-org_k7j2m9x1"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2024-12-25T10:30:00Z"
                },
                "expires_in": {
                    "type": "integer",
                    "example": 172800
                },
                "setup_url": {
                    "type": "string",
                    "example": "https://api.example.com/api/auth/service-accounts/setup/550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "handlers.CreateSignalTypeRequest": {
            "type": "object",
            "properties": {
                "bump_type": {
                    "description": "this is used to increment semver for the signal definition",
                    "type": "string",
                    "enum": [
                        "major",
                        "minor",
                        "patch"
                    ],
                    "example": "patch"
                },
                "detail": {
                    "description": "description",
                    "type": "string",
                    "example": "description"
                },
                "readme_url": {
                    "description": "README file URL: must be a GitHub URL ending in .md",
                    "type": "string",
                    "example": "https://github.com/user/project/blob/2025.01.01/readme.md"
                },
                "schema_url": {
                    "description": "JSON schema URL: must be a GitHub URL ending in .json, OR use https://github.com/skip/validation/main/schema.json to disable validation",
                    "type": "string",
                    "example": "https://github.com/user/project/blob/2025.01.01/schema.json"
                },
                "title": {
                    "description": "unique title",
                    "type": "string",
                    "example": "Sample Signal @example.org"
                }
            }
        },
        "handlers.CreateSignalTypeResponse": {
            "type": "object",
            "properties": {
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org/signals_types/sample-signal--example-org/v0.0.1"
                },
                "sem_ver": {
                    "type": "string",
                    "example": "0.0.1"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-signal--example-org"
                }
            }
        },
        "handlers.CreateSignalsBatchResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org/account/{account_id}/batch/{signals_batch_id}"
                },
                "signals_batch_id": {
                    "type": "string",
                    "example": "b51faf05-aaed-4250-b334-2258ccdf1ff2"
                }
            }
        },
        "handlers.CreateSignalsRequestDoc": {
            "type": "object",
            "properties": {
                "signals": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "additionalProperties": {}
                            },
                            "correlation_id": {
                                "type": "string",
                                "example": "75b45fe1-ecc2-4629-946b-fd9058c3b2ca"
                            },
                            "local_ref": {
                                "type": "string",
                                "example": "item_id_#1"
                            }
                        }
                    }
                }
            }
        },
        "handlers.CreateSignalsResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "isn_slug": {
                    "type": "string",
                    "example": "sample-isn--example-org"
                },
                "results": {
                    "$ref": "#/definitions/handlers.CreateSignalsResults"
                },
                "signal_type_path": {
                    "type": "string",
                    "example": "signal-type-1/v0.0.1"
                },
                "signals_batch_id": {
                    "type": "string",
                    "example": "b51faf05-aaed-4250-b334-2258ccdf1ff2"
                },
                "summary": {
                    "$ref": "#/definitions/handlers.CreateSignalsSummary"
                }
            }
        },
        "handlers.CreateSignalsResults": {
            "type": "object",
            "properties": {
                "failed_signals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.FailedSignal"
                    }
                },
                "stored_signals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.StoredSignal"
                    }
                }
            }
        },
        "handlers.CreateSignalsSummary": {
            "type": "object",
            "properties": {
                "failed_count": {
                    "type": "integer",
                    "example": 5
                },
                "stored_count": {
                    "type": "integer",
                    "example": 95
                },
                "total_submitted": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "handlers.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "description": "passwords must be at least 11 characters long",
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                }
            }
        },
        "handlers.FailedSignal": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string",
                    "example": "validation_error"
                },
                "error_message": {
                    "type": "string",
                    "example": "field 'name' is required"
                },
                "local_ref": {
                    "type": "string",
                    "example": "item_id_#2"
                }
            }
        },
        "handlers.FailureRow": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "local_ref": {
                    "type": "string"
                }
            }
        },
        "handlers.IsnAndLinkedInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "signal_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.GetForDisplaySignalTypeByIsnIDRow"
                    }
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/database.GetForDisplayUserByIsnIDRow"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "description": "passwords must be at least 11 characters long",
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                }
            }
        },
        "handlers.ResetUserPasswordRequest": {
            "type": "object",
            "properties": {
                "new_password": {
                    "description": "Admin provides the new password",
                    "type": "string"
                }
            }
        },
        "handlers.ResetUserPasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.ServiceAccountRotateResponse": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "sa_exampleorg_k7j2m9x1"
                },
                "client_secret": {
                    "type": "string",
                    "example": "dGhpcyBpcyBhIHNlY3JldA"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2025-07-05T10:30:00Z"
                },
                "expires_in": {
                    "description": "seconds (1 year)",
                    "type": "integer",
                    "example": 31536000
                }
            }
        },
        "handlers.ServiceAccountTokenRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "sa_exampleorg_k7j2m9x1"
                },
                "client_secret": {
                    "type": "string",
                    "example": "dGhpcyBpcyBhIHNlY3JldA"
                }
            }
        },
        "handlers.SignalTypeAndLinkedInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "isn": {
                    "$ref": "#/definitions/database.Isn"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.SignalVersionDoc": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "account_type": {
                    "type": "string",
                    "example": "user"
                },
                "content": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "correlated_local_ref": {
                    "type": "string",
                    "example": "item_id_#2"
                },
                "correlated_signal_id": {
                    "type": "string",
                    "example": "17c50d26-1da6-4ac0-897f-3a2f85f07cd3"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-06-03T13:47:47.331787+01:00"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "local_ref": {
                    "type": "string",
                    "example": "item_id_#1"
                },
                "signal_id": {
                    "type": "string",
                    "example": "4cedf4fa-2a01-4cbf-8668-6b44f8ac6e19"
                },
                "signal_version_id": {
                    "type": "string",
                    "example": "835788bd-789d-4091-96e3-db0f51ccbabc"
                },
                "version_number": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.StoredSignal": {
            "type": "object",
            "properties": {
                "local_ref": {
                    "type": "string",
                    "example": "item_id_#1"
                },
                "signal_version_id": {
                    "type": "string",
                    "example": "835788bd-789d-4091-96e3-db0f51ccbabc"
                },
                "version_number": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.TransferIsnOwnershipRequest": {
            "type": "object",
            "properties": {
                "new_owner_account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                }
            }
        },
        "handlers.UpdateIsnRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Sample ISN description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": true
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "example": "private"
                }
            }
        },
        "handlers.UpdatePasswordRequest": {
            "type": "object",
            "properties": {
                "current_password": {
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                },
                "new_password": {
                    "type": "string",
                    "example": "ue6U\u003e\u0026X3j570"
                }
            }
        },
        "handlers.UpdateSignalTypeRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "updated description",
                    "type": "string",
                    "example": "description"
                },
                "is_in_use": {
                    "description": "whether this signal type version is actively used",
                    "type": "boolean",
                    "example": false
                },
                "readme_url": {
                    "description": "README file URL: must be a GitHub URL ending in .md",
                    "type": "string",
                    "example": "https://github.com/user/project/blob/2025.01.01/readme.md"
                }
            }
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/apperrors.ErrorCode"
                        }
                    ],
                    "example": "example_error_code"
                },
                "message": {
                    "type": "string",
                    "example": "message describing the error"
                }
            }
        },
        "version.Info": {
            "type": "object",
            "properties": {
                "build_date": {
                    "type": "string",
                    "example": "2025-01-01T12:00:00Z"
                },
                "git_commit": {
                    "type": "string",
                    "example": "abc123"
                },
                "version": {
                    "type": "string",
                    "example": "v1.0.0"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAccessToken": {
            "description": "Bearer {JWT access token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Authentication and authorization endpoints. Web users get JWT + refresh tokens, service accounts use client credentials to get JWT access tokens.",
            "name": "auth"
        },
        {
            "description": "Site adminstration tools",
            "name": "Site admin"
        },
        {
            "description": "Manage the Information Sharing Networks that are used to exchange signals between participating users.",
            "name": "ISN configuration"
        },
        {
            "description": "Grant accounts read or write access to an ISN",
            "name": "ISN Permissions"
        },
        {
            "description": "View information about the configured ISNs",
            "name": "ISN details"
        },
        {
            "description": "Define the format of the data being shared in an ISN",
            "name": "Signal definitions"
        },
        {
            "description": "Manage service account end points",
            "name": "Service accounts"
        }
    ]
}