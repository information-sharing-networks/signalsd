{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Signals ISN service API",
        "contact": {}
    },
    "host": "localhost:8080",
    "paths": {
        "/admin/live": {
            "get": {
                "description": "check if the signalsd service is up",
                "tags": [
                    "Site admin"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/admin/reset": {
            "post": {
                "description": "Delete all registered users and associated data.\nThis endpoint only works on environments configured as 'dev'",
                "tags": [
                    "Site admin"
                ],
                "summary": "reset",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This api displays all the site users and their email addreses (can only be used by owner account)",
                "tags": [
                    "Site admin"
                ],
                "summary": "Get registered users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetUsersRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This api displays a site user and their email addreses (can only be used by owner account)",
                "tags": [
                    "Site admin"
                ],
                "summary": "Get registered user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "68fb5f5b-e3f5-4a96-8d35-cd2203a06f73",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetUserByIDRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn": {
            "get": {
                "description": "get a list of the configured ISNs",
                "tags": [
                    "ISN view"
                ],
                "summary": "Get the ISNs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Isn"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    },
                    {
                        "RefreshTokenCookieAuth": []
                    }
                ],
                "description": "Create an Information Sharing Network (ISN)\n\nvisibility = \"private\" means that signalsd on the network can only be seen by network participants.\n\nISN admins automatically get write permission for their own sites, so this endpoint also starts a signals batch for them.\nOwners automatically get write permission on all isns, so a batch is started for them also.\n\nThis endpoint can only be used by the site owner or an admin",
                "tags": [
                    "ISN configuration"
                ],
                "summary": "Create an ISN",
                "parameters": [
                    {
                        "description": "ISN details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Update the ISN details\nThis endpoint can only be used by the site owner or the ISN admin",
                "tags": [
                    "ISN configuration"
                ],
                "summary": "Update an ISN",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateIsnRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/accounts/{account_id}/batches": {
            "get": {
                "description": "TODO - get latest, previous, by data ranage\nTODO",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Get details about a set of signal batches",
                "responses": {}
            }
        },
        "/api/isn/{isn_slug}/accounts/{account_id}/batches/{signals_batch_id}": {
            "get": {
                "description": "TODO - get by id. Include status (errs, received, latest localref in batch)",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Get a signal batch",
                "responses": {}
            }
        },
        "/api/isn/{isn_slug}/batches": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This endpoint is used by service accounts to create a new batch used to track signals sent to the specified isn\n\nFor user accounts, a batch is automatically created when they are granted write permission to an isn and is only closed if their permission to write to the isn is revoked\n\nFor service accounts, the client app can decide how long to keep a batch open\n(a batch status summary is sent to a webhook after the batch closes)\n\nopening a batch closes the previous batch created on the isn for this account.\n\nSignals can only be sent to open batches.\n\nauthentication is based on the supplied access token:\n(the site owner; the isn admin and members with an isn_perm= write can create a batch)\n",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Create a new signal batch",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalsBatchResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signal_types": {
            "get": {
                "tags": [
                    "ISN view"
                ],
                "summary": "Get the signal definitions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.SignalType"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "A signal type describes a data set that is sharable over an ISN.  Setup the ISN before defining any signal defs.\nSignal types specify a record that can be shared over the ISN\n- Each type has a unique title\n- A URL-friendly slug is created based on the title supplied when you load the first version of a definition.\n- The title and slug fields can't be changed and it is not allowed to reuse a slug that was created by another account.\n- The field definition is held as an external json schema file\n\nVersions\n- A signal type can have multiple versions - these share the same title/slug but have different json schemas.\n- use this endpoint to create the first version - the bump_type (major/minor/patch) determines the inital semver(1.0.0, 0.1.0 or 0.0.1)\n- subsequent POSTs to this endpoint that reference a previously sumbitted title/slug but point to a different schema will increment the version\n\nSignal type definitions are referred to with a url like this http://{hostname}/api/isn/{isn_slug}/signal_types/{slug}/v{sem_ver}\n",
                "tags": [
                    "Signal definitions"
                ],
                "summary": "Create signal type definition",
                "parameters": [
                    {
                        "description": "signal definition details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}/signal_types/{slug}/v{sem_ver}": {
            "get": {
                "tags": [
                    "ISN view"
                ],
                "summary": "Get a signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "version to be recieved",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SignalTypeAndLinkedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "users can mark the signal type as *in use/not in use* and update the description or link to the readme file\n\nIt is not allowed to update the schema url - instead users should create a new declaration with the same title and bump the version",
                "tags": [
                    "Signal definitions"
                ],
                "summary": "Update signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "Sem ver",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "signal type details to be updated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateSignalTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{slug}": {
            "get": {
                "description": "Returns details about the ISN",
                "tags": [
                    "ISN view"
                ],
                "summary": "Get an ISN configurationuration",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.IsnAndLinkedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/admins/account/{account_id}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "This endpoint grants the admin role to a site member\n\nAn admin can:\n- Create an ISN\n- Define the signal_types used in the ISN\n- read/write to their own ISNs\n- Grant other accounts read or write access to their ISNs\n- Create service accounts\n\nthis endpoint can only be used by the site owner account",
                "tags": [
                    "auth"
                ],
                "summary": "Grant admin role",
                "parameters": [
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/admins/{account_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "this endpoint can only be used by the site owner account",
                "tags": [
                    "auth"
                ],
                "summary": "Revoke account admin role",
                "parameters": [
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "The response body includes an access token which can be used to access the protected enpoints, assuming the account has the appropriate permissions.\nThe access_token is valid for 30 mins.\n\nAs part of the login response, the server sets a http-only cookie on the client that will allow it to use the /auth/refresh endpoint to renew the access_token\nThe refresh_token lasts 30 days unless it is revoked earlier.\n\nThe account's role and permissions are encoded and encloded as part of the jwt access token and also provided in the response body\nTo renew the refresh_token, log in again.",
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "email and password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.AccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/password/reset": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Use this api to reset the user's password.  Requires a valid access token and the current password\n\nTODO - forgotten password facility",
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdatePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request with possible error codes: malformed_body, password_too_short",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized with possible error code: authentication_error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error with possible error codes: database_error, internal_error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "The first user to be created for this service will be created with an admin role.\nSubsequent accounts default to standard member roles.\nNew members can't access any information beyond the public data on the site until an admin grants them access to an ISN.",
                "tags": [
                    "auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad request with possible error codes: malformed_body, password_too_short",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict with possible error code:resource_already_exists",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error with possible error codes: database_error, internal_error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register/service-accounts": {
            "post": {
                "security": [
                    {
                        "BearerServiceAccount": []
                    }
                ],
                "description": "Registring a new service account creates a one time link with the client credentials in it - this must be used by the client within 48 hrs.\n\nYou have to be an admin or the site owner to use this endpoint",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Register a new service account",
                "parameters": [
                    {
                        "description": "service account details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateServiceAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateServiceAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/service-accounts/revoke": {
            "post": {
                "security": [
                    {
                        "BearerServiceAccount": []
                    }
                ],
                "description": "TODO Revoke a client secret to prevent it being used to create new access ServiceAccounts.\n",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Revoke client secret",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/service-accounts/setup/{setup_id}": {
            "get": {
                "description": "Exchange one-time setup token for permanent client credentials (the one-time request is when a new service account is registered).\nthe endpoint renders a html page that the user can use to copy their client credentials\n\nThis endpoint can only be used once and must be called within 48 hours.\n",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Complete service account setup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "One-time setup ID",
                        "name": "setoup_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "410": {
                        "description": "Gone",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "check if the signalsd service is ready",
                "tags": [
                    "Site admin"
                ],
                "summary": "Readiness",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/isn/{isn_slug}/accounts/{account_id}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Grant an account read or write access to an isn.\nThis end point can only be used by the site owner or the isn admin account.",
                "tags": [
                    "ISN Permissions"
                ],
                "summary": "Grant ISN access permission",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Revoke an account read or write access to an isn.\nThis end point can only be used by the site owner or the isn admin account.",
                "tags": [
                    "ISN Permissions"
                ],
                "summary": "Revoke ISN access permission",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "account id",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "- the client can submit an array of signals to this endpoint for storage on the ISN\n- payloads must not mix signals of different types and the payload is subject to the sizen\tlimits defined on the ISN.\n- The client-supplied local_ref must uniquely identify each signal of the specified signal type that will be supplied by the account.\n- If a local reference is received more than once from an account for a specified signal_type it will be stored with a incremented version number.\n- Optionally a correlation_id can be supplied - this will link the signal to a previously received signal. The correlated signal does not need to be owned by the same account.\n- requests are only accepted for the open signal batch for this account/ISN.\n\n**Authentication**\n\nRequires a valid access token.\nThe claims in the access token list the ISNs and signal_types that the account is permitted to use.\n\n- the RequireIsnPermission middleware will consult the claims in the access token to confirm the user is allowed to write to the isn in the URL.\n- This handler also checks that the signal_type/sem_ver in the url is also listed in the claims (this is to catch mistyped urls)\n\n**Validation**\n\nthe content is validated against the json schema asynchronously, however basic checks are done on the incoming data.\nThe following issues create a 400 error and cause the entire payload to be rejected\n- invalid json format\n- missing fields (the array of signals must be in a json object called signals, and content and local_ref must be present for each record).\n- incorrect correlation ids - where supplied, correlation ids must refer to another signal ID in the ISN (error_code is set to \"invalid_correlation_id\" in this is not the case)\n\ninternal errors cause the whole payload to be rejected.",
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Send signals",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-isn--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal type slug",
                        "name": "signal_type_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "signal type sem_ver number",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "create signals",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalsRequestDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals/search": {
            "get": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Search for signals by date or account\n\nAccepted timestamps formats (ISO 8601):\n- 2006-01-02T15:04:05Z (UTC)\n- 2006-01-02T15:04:05+07:00 (with offset)\n- 2006-01-02T15:04:05.999999999Z (nano precision)\n\nNote: If the timestamp contains a timezone offset (as in +07:00), the + must be percent-encoded as %2B in the query strings.\n\nDates (YYYY-MM-DD) can also be used.\nThese are treated as the start of day UTC (so 2006-01-02 is treated as 2006-01-02T00:00:00Z)\n\nNote the endpoint returns the latest version of each signal and does not include withdrawn or archived signals",
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Search for signals",
                "parameters": [
                    {
                        "type": "string",
                        "example": "2006-01-02T15:04:05Z",
                        "description": "Start date for filtering",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for filtering",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3",
                        "description": "Account ID for filtering",
                        "name": "account_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.SignalVersionDoc"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/isn/{isn_slug}/signal_types/{signal_type_slug}/v{sem_ver}/signals/{signal_id}": {
            "get": {
                "tags": [
                    "Signal sharing"
                ],
                "summary": "get a signal (TODO)",
                "responses": {}
            }
        },
        "/isn/{isn_slug}/signal_types/{signal_type_slug}/{signal_id}": {
            "delete": {
                "tags": [
                    "Signal sharing"
                ],
                "summary": "Withdraw a signal (TODO)",
                "responses": {}
            }
        },
        "/oauth/revoke": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Revoke a refersh token or client secret to prevent it being used to create new access tokens.\n\n**Service Accounts:**\nYou must supply your `client ID` and `client secret` in the request body.\n\n**Web Users:**\nThis end point expects a refresh token in a `http-only cookie` and a valid access token in the Authorization header.\n\nif the refresh token has expired or been revoked the user must login again to get a new one.\n\nYou must also provide a previously issued `bearer access token` in the Authorization header - it does not matter if it has expired\n(the token is not used to authenticate the request but is needed to establish the ID of the user making the request)\n\nNote that any unexpired access tokens issued for this user will continue to work until they expire.\nUsers must log in again to obtain a new refresh token if the current one has been revoked.\n",
                "tags": [
                    "auth"
                ],
                "summary": "Revoke a token",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/oauth/token": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "**Client Credentials Grant (Service Accounts):**\n\nIssues new access token (in response body)\n\n- Set `grant_type=client_credentials` as URL parameter\n- Provide `client_id` and `client_secret` in request body\n- Must provide current access token in Authorization header (expired tokens accepted)\n- Access tokens expire after 30 minutes\n(subsequent requests using the token will fail with HTTP status 401 and an error_code of \"access_token_expired\")\n\n**Refresh Token Grant (Web Users):**\n\nIssues new access token (in response body) and rotates refresh token (HTTP-only cookie)\n\n- Set `grant_type=refresh_token` as URL parameter\n- Must provide current access token in Authorization header (expired tokens accepted)\n- Must have valid refresh token cookie\n- Access tokens expire after 30 minutes\n(subsequent requests using the token will fail with HTTP status 401 and an error_code of \"access_token_expired\")\n- Refresh tokens expire after 30 days\n- subsequent requests using the refresh token will fail with HTTP status 401 and an error_code of \"refresh_token_expired\" and users must login again to get a new one.\n",
                "tags": [
                    "auth"
                ],
                "summary": "New Access Token",
                "parameters": [
                    {
                        "enum": [
                            "client_credentials",
                            "refresh_token"
                        ],
                        "type": "string",
                        "description": "grant type",
                        "name": "grant_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Service account credentials (required for client_credentials grant)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/auth.ServiceAccountTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.AccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/webhooks": {
            "post": {
                "description": "register a webhook to recieve signals batch status updates",
                "tags": [
                    "Service accounts"
                ],
                "summary": "Register webhook (TODO)",
                "responses": {}
            }
        }
    },
    "definitions": {
        "apperrors.ErrorCode": {
            "type": "string",
            "enum": [
                "access_token_expired",
                "authentication_error",
                "authorization_error",
                "database_error",
                "forbidden",
                "invalid_correlation_id",
                "internal_error",
                "invalid_request",
                "invalid_url_param",
                "malformed_body",
                "not_implemented",
                "password_too_short",
                "refresh_token_invalid",
                "resource_already_exists",
                "resource_expired",
                "resource_not_found",
                "token_invalid"
            ],
            "x-enum-varnames": [
                "ErrCodeAccessTokenExpired",
                "ErrCodeAuthenticationFailure",
                "ErrCodeAuthorizationFailure",
                "ErrCodeDatabaseError",
                "ErrCodeForbidden",
                "ErrCodeInvalidCorrelationID",
                "ErrCodeInternalError",
                "ErrCodeInvalidRequest",
                "ErrCodeInvalidURLParam",
                "ErrCodeMalformedBody",
                "ErrCodeNotImplemented",
                "ErrCodePasswordTooShort",
                "ErrCodeRefreshTokenInvalid",
                "ErrCodeResourceAlreadyExists",
                "ErrCodeResourceExpired",
                "ErrCodeResourceNotFound",
                "ErrCodeTokenInvalid"
            ]
        },
        "auth.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTaWduYWxzZCIsInN1YiI6ImMxMjQ1Yjc0LTMyMTQtNDUzOS04YTgyLTY2NDNkMzllNjk5YiIsImV4cCI6MTc0ODU4ODE2MiwiaWF0IjoxNzQ4NTg2MzYyLCJhY2NvdW50X2lkIjoiYzEyNDViNzQtMzIxNC00NTM5LThhODItNjY0M2QzOWU2OTliIiwiYWNjb3VudF90eXBlIjoidXNlciIsInJvbGUiOiJvd25lciIsImlzbl9wZXJtcyI6eyJzYW1wbGUtaXNuLS1leGFtcGxlLW9yZyI6eyJwZXJtaXNzaW9uIjoid3JpdGUiLCJzaWduYWxfdHlwZXMiOlsic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC4xIiwic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC4yIiwic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC4zIiwic2FtcGxlLXNpZ25hbG5ldy0tZXhhbXBsZS1vcmcvdjAuMC4xIiwic2FtcGxlLXNpZ25hbC0tZXhhbXBsZS1vcmcvdjAuMC40Il19LCJzYW1wbGUtaXNuLS1zYXVsLW9yZyI6eyJwZXJtaXNzaW9uIjoid3JpdGUiLCJzaWduYWxfdHlwZXMiOlsic2FtcGxlLXNpZ25hbC0tc2F1bC1vcmcvdjAuMC4xIl19fX0.33ANor7XHWkB87npB4RWsJUjBnJHdYZce-lT8w_IN_s"
                },
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "account_type": {
                    "type": "string",
                    "enum": [
                        "user",
                        "service_account"
                    ]
                },
                "expires_in": {
                    "description": "seconds",
                    "type": "integer",
                    "example": 1800
                },
                "isn_perms": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/auth.IsnPerms"
                    }
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "owner",
                        "admin",
                        "member"
                    ],
                    "example": "admin"
                },
                "token_type": {
                    "type": "string",
                    "example": "Bearer"
                }
            }
        },
        "auth.IsnPerms": {
            "type": "object",
            "properties": {
                "permission": {
                    "type": "string",
                    "enum": [
                        "read",
                        "write"
                    ],
                    "example": "read"
                },
                "signal_batch_id": {
                    "type": "string",
                    "example": "967affe9-5628-4fdd-921f-020051344a12"
                },
                "signal_types": {
                    "description": "list of available signal types for the isn",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "signal-type-1/v0.0.1",
                        "signal-type-2/v1.0.0"
                    ]
                }
            }
        },
        "auth.ServiceAccountTokenRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "sa_example-org_k7j2m9x1"
                },
                "client_secret": {
                    "type": "string",
                    "example": "dGhpcyBpcyBhIHNlY3JldA"
                }
            }
        },
        "database.GetForDisplaySignalTypeByIsnIDRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetForDisplayUserByIsnIDRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetUserByIDRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "user_role": {
                    "type": "string"
                }
            }
        },
        "database.GetUsersRow": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_role": {
                    "type": "string"
                }
            }
        },
        "database.Isn": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_account_id": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "database.SignalType": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "isn_id": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateIsnRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Sample ISN description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": true
                },
                "title": {
                    "type": "string",
                    "example": "Sample ISN @example.org"
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "example": "private"
                }
            }
        },
        "handlers.CreateIsnResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "67890684-3b14-42cf-b785-df28ce570400"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-isn--example-org"
                }
            }
        },
        "handlers.CreateServiceAccountRequest": {
            "type": "object",
            "properties": {
                "client_contact_email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "client_organization": {
                    "type": "string",
                    "example": "example org"
                },
                "rate_limit_per_minute": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "handlers.CreateServiceAccountResponse": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "sa_example-org_k7j2m9x1"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2024-12-25T10:30:00Z"
                },
                "expires_in": {
                    "type": "integer",
                    "example": 172800
                },
                "setup_url": {
                    "type": "string",
                    "example": "https://api.example.com/auth/service-accounts/setup/550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "handlers.CreateSignalTypeRequest": {
            "type": "object",
            "properties": {
                "bump_type": {
                    "description": "this is used to increment semver for the signal definition",
                    "type": "string",
                    "enum": [
                        "major",
                        "minor",
                        "patch"
                    ],
                    "example": "patch"
                },
                "detail": {
                    "description": "updated description",
                    "type": "string",
                    "example": "description"
                },
                "readme_url": {
                    "description": "Updated readme file. Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.md"
                },
                "schema_url": {
                    "description": "Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.json"
                },
                "title": {
                    "description": "unique title",
                    "type": "string",
                    "example": "Sample Signal @example.org"
                }
            }
        },
        "handlers.CreateSignalTypeResponse": {
            "type": "object",
            "properties": {
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org/signals_types/sample-signal--example-org/v0.0.1"
                },
                "sem_ver": {
                    "type": "string",
                    "example": "0.0.1"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-signal--example-org"
                }
            }
        },
        "handlers.CreateSignalsBatchResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-isn--example-org/account/{account_id}/batch/{signals_batch_id}"
                },
                "signals_batch_id": {
                    "type": "string",
                    "example": "b51faf05-aaed-4250-b334-2258ccdf1ff2"
                }
            }
        },
        "handlers.CreateSignalsRequestDoc": {
            "type": "object",
            "properties": {
                "signals": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "additionalProperties": {}
                            },
                            "correlation_id": {
                                "type": "string",
                                "example": "75b45fe1-ecc2-4629-946b-fd9058c3b2ca"
                            },
                            "local_ref": {
                                "type": "string",
                                "example": "item_id_#1"
                            }
                        }
                    }
                }
            }
        },
        "handlers.CreateSignalsResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "isn_slug": {
                    "type": "string",
                    "example": "sample-isn--example-org"
                },
                "signal_type_path": {
                    "type": "string",
                    "example": "signal-type-1/v0.0.1"
                },
                "stored_signals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.StoredSignal"
                    }
                }
            }
        },
        "handlers.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "description": "passwords must be at least 11 characters long",
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                }
            }
        },
        "handlers.IsnAndLinkedInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "signal_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.GetForDisplaySignalTypeByIsnIDRow"
                    }
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/database.GetForDisplayUserByIsnIDRow"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "description": "passwords must be at least 11 characters long",
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                }
            }
        },
        "handlers.SignalTypeAndLinkedInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "isn": {
                    "$ref": "#/definitions/database.Isn"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.SignalVersionDoc": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "a38c99ed-c75c-4a4a-a901-c9485cf93cf3"
                },
                "account_type": {
                    "type": "string",
                    "example": "user"
                },
                "content": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "correlated_local_ref": {
                    "type": "string",
                    "example": "item_id_#2"
                },
                "correlated_signal_id": {
                    "type": "string",
                    "example": "17c50d26-1da6-4ac0-897f-3a2f85f07cd3"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-06-03T13:47:47.331787+01:00"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "local_ref": {
                    "type": "string",
                    "example": "item_id_#1"
                },
                "signal_id": {
                    "type": "string",
                    "example": "4cedf4fa-2a01-4cbf-8668-6b44f8ac6e19"
                },
                "signal_version_id": {
                    "type": "string",
                    "example": "835788bd-789d-4091-96e3-db0f51ccbabc"
                },
                "version_number": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.StoredSignal": {
            "type": "object",
            "properties": {
                "local_ref": {
                    "type": "string",
                    "example": "item_id_#1"
                },
                "signal_version_id": {
                    "type": "string",
                    "example": "835788bd-789d-4091-96e3-db0f51ccbabc"
                },
                "version_number": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.UpdateIsnRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Sample ISN description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": true
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "example": "private"
                }
            }
        },
        "handlers.UpdatePasswordRequest": {
            "type": "object",
            "properties": {
                "current_password": {
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                },
                "new_password": {
                    "type": "string",
                    "example": "ue6U\u003e\u0026X3j570"
                }
            }
        },
        "handlers.UpdateSignalTypeRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "updated description",
                    "type": "string",
                    "example": "description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": false
                },
                "readme_url": {
                    "description": "Updated readme file. Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.md"
                }
            }
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/apperrors.ErrorCode"
                        }
                    ],
                    "example": "example_error_code"
                },
                "message": {
                    "type": "string",
                    "example": "message describing the error"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAccessToken": {
            "description": "Bearer {JWT access token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "User and token management endpoints",
            "name": "auth"
        },
        {
            "description": "Site adminstration tools",
            "name": "Site admin"
        },
        {
            "description": "Manage the Information Sharing Networks that are used to exchange signals between participating users.",
            "name": "ISN configuration"
        },
        {
            "description": "Grant accounts read or write access to an ISN",
            "name": "ISN Permissions"
        },
        {
            "description": "View information about the configured ISNs",
            "name": "ISN view"
        },
        {
            "description": "Define the format of the data being shared in an ISN",
            "name": "Signal definitions"
        },
        {
            "description": "Manage service account end points",
            "name": "Service accounts"
        }
    ]
}