// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: isn_accounts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getIsnAccountsByAccountID = `-- name: GetIsnAccountsByAccountID :many
SELECT ia.isn_id, ia.account_id, ia.permission, i.slug as isn_slug FROM isn_accounts ia
JOIN isn i 
ON i.id = ia.isn_id
WHERE account_id = $1
`

type GetIsnAccountsByAccountIDRow struct {
	IsnID      uuid.UUID `json:"isn_id"`
	AccountID  uuid.UUID `json:"account_id"`
	Permission string    `json:"permission"`
	IsnSlug    string    `json:"isn_slug"`
}

func (q *Queries) GetIsnAccountsByAccountID(ctx context.Context, accountID uuid.UUID) ([]GetIsnAccountsByAccountIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getIsnAccountsByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIsnAccountsByAccountIDRow
	for rows.Next() {
		var i GetIsnAccountsByAccountIDRow
		if err := rows.Scan(
			&i.IsnID,
			&i.AccountID,
			&i.Permission,
			&i.IsnSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
