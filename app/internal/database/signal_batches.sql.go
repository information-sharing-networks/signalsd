// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: signal_batches.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const closeISNSignalBatchByAccountID = `-- name: CloseISNSignalBatchByAccountID :execrows
UPDATE signal_batches 
SET is_latest = FALSE
WHERE isn_id = $1 and account_id = $2
`

type CloseISNSignalBatchByAccountIDParams struct {
	IsnID     uuid.UUID `json:"isn_id"`
	AccountID uuid.UUID `json:"account_id"`
}

func (q *Queries) CloseISNSignalBatchByAccountID(ctx context.Context, arg CloseISNSignalBatchByAccountIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, closeISNSignalBatchByAccountID, arg.IsnID, arg.AccountID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createSignalBatch = `-- name: CreateSignalBatch :one
INSERT INTO signal_batches (
    id,
    created_at,
    updated_at,
    isn_id,
    account_id,
    is_latest,
    account_type
) VALUES (
    gen_random_uuid(), 
    now(), 
    now(), 
    $1, 
    $2, 
    TRUE,
    $3
)
RETURNING id, created_at, updated_at, isn_id, account_id, is_latest, account_type
`

type CreateSignalBatchParams struct {
	IsnID       uuid.UUID `json:"isn_id"`
	AccountID   uuid.UUID `json:"account_id"`
	AccountType string    `json:"account_type"`
}

func (q *Queries) CreateSignalBatch(ctx context.Context, arg CreateSignalBatchParams) (SignalBatch, error) {
	row := q.db.QueryRowContext(ctx, createSignalBatch, arg.IsnID, arg.AccountID, arg.AccountType)
	var i SignalBatch
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsnID,
		&i.AccountID,
		&i.IsLatest,
		&i.AccountType,
	)
	return i, err
}

const getLatestISNSignalBatchByAccountID = `-- name: GetLatestISNSignalBatchByAccountID :one
SELECT id, created_at, updated_at, isn_id, account_id, is_latest, account_type FROM signal_batches 
WHERE isn_id = $1 
AND account_id = $2
AND is_latest = TRUE
`

type GetLatestISNSignalBatchByAccountIDParams struct {
	IsnID     uuid.UUID `json:"isn_id"`
	AccountID uuid.UUID `json:"account_id"`
}

func (q *Queries) GetLatestISNSignalBatchByAccountID(ctx context.Context, arg GetLatestISNSignalBatchByAccountIDParams) (SignalBatch, error) {
	row := q.db.QueryRowContext(ctx, getLatestISNSignalBatchByAccountID, arg.IsnID, arg.AccountID)
	var i SignalBatch
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsnID,
		&i.AccountID,
		&i.IsLatest,
		&i.AccountType,
	)
	return i, err
}
