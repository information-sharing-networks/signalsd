// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: signal_batches.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const CloseISNSignalBatchByAccountID = `-- name: CloseISNSignalBatchByAccountID :execrows
UPDATE signal_batches 
SET is_latest = FALSE
WHERE isn_id = $1 and account_id = $2
`

type CloseISNSignalBatchByAccountIDParams struct {
	IsnID     uuid.UUID `json:"isn_id"`
	AccountID uuid.UUID `json:"account_id"`
}

func (q *Queries) CloseISNSignalBatchByAccountID(ctx context.Context, arg CloseISNSignalBatchByAccountIDParams) (int64, error) {
	result, err := q.db.Exec(ctx, CloseISNSignalBatchByAccountID, arg.IsnID, arg.AccountID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const CreateOwnerSignalBatch = `-- name: CreateOwnerSignalBatch :one
INSERT INTO signal_batches (
    id,
    created_at,
    updated_at,
    isn_id,
    account_id,
    is_latest,
    account_type
) VALUES (
    gen_random_uuid(), 
    now(), 
    now(), 
    $1, 
    (select account_id from users where user_role = 'owner'),
    TRUE,
    $2
)
RETURNING id, created_at, updated_at, isn_id, account_id, is_latest, account_type
`

type CreateOwnerSignalBatchParams struct {
	IsnID       uuid.UUID `json:"isn_id"`
	AccountType string    `json:"account_type"`
}

// create a batch for the owner on a new ISN created by an admin
func (q *Queries) CreateOwnerSignalBatch(ctx context.Context, arg CreateOwnerSignalBatchParams) (SignalBatch, error) {
	row := q.db.QueryRow(ctx, CreateOwnerSignalBatch, arg.IsnID, arg.AccountType)
	var i SignalBatch
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsnID,
		&i.AccountID,
		&i.IsLatest,
		&i.AccountType,
	)
	return i, err
}

const CreateSignalBatch = `-- name: CreateSignalBatch :one
INSERT INTO signal_batches (
    id,
    created_at,
    updated_at,
    isn_id,
    account_id,
    is_latest,
    account_type
) VALUES (
    gen_random_uuid(), 
    now(), 
    now(), 
    $1, 
    $2, 
    TRUE,
    $3
)
RETURNING id, created_at, updated_at, isn_id, account_id, is_latest, account_type
`

type CreateSignalBatchParams struct {
	IsnID       uuid.UUID `json:"isn_id"`
	AccountID   uuid.UUID `json:"account_id"`
	AccountType string    `json:"account_type"`
}

func (q *Queries) CreateSignalBatch(ctx context.Context, arg CreateSignalBatchParams) (SignalBatch, error) {
	row := q.db.QueryRow(ctx, CreateSignalBatch, arg.IsnID, arg.AccountID, arg.AccountType)
	var i SignalBatch
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsnID,
		&i.AccountID,
		&i.IsLatest,
		&i.AccountType,
	)
	return i, err
}

const GetLatestIsnSignalBatchesByAccountID = `-- name: GetLatestIsnSignalBatchesByAccountID :many
SELECT sb.id, sb.created_at, sb.updated_at, sb.isn_id, sb.account_id, sb.is_latest, sb.account_type, i.slug as isn_slug FROM signal_batches sb 
JOIN isn i
    ON sb.isn_id = i.id
WHERE account_id = $1
AND is_latest = TRUE
`

type GetLatestIsnSignalBatchesByAccountIDRow struct {
	ID          uuid.UUID `json:"id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	IsnID       uuid.UUID `json:"isn_id"`
	AccountID   uuid.UUID `json:"account_id"`
	IsLatest    bool      `json:"is_latest"`
	AccountType string    `json:"account_type"`
	IsnSlug     string    `json:"isn_slug"`
}

func (q *Queries) GetLatestIsnSignalBatchesByAccountID(ctx context.Context, accountID uuid.UUID) ([]GetLatestIsnSignalBatchesByAccountIDRow, error) {
	rows, err := q.db.Query(ctx, GetLatestIsnSignalBatchesByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLatestIsnSignalBatchesByAccountIDRow
	for rows.Next() {
		var i GetLatestIsnSignalBatchesByAccountIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsnID,
			&i.AccountID,
			&i.IsLatest,
			&i.AccountType,
			&i.IsnSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetLatestSignalBatchByIsnSlugAndBatchID = `-- name: GetLatestSignalBatchByIsnSlugAndBatchID :one
SELECT sb.id, sb.created_at, sb.updated_at, sb.isn_id, sb.account_id, sb.is_latest, sb.account_type, i.slug as isn_slug FROM signal_batches sb
JOIN isn i 
ON i.id = sb.isn_id
WHERE i.slug = $1 
AND sb.id = $2
AND sb.is_latest = TRUE
`

type GetLatestSignalBatchByIsnSlugAndBatchIDParams struct {
	Slug string    `json:"slug"`
	ID   uuid.UUID `json:"id"`
}

type GetLatestSignalBatchByIsnSlugAndBatchIDRow struct {
	ID          uuid.UUID `json:"id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	IsnID       uuid.UUID `json:"isn_id"`
	AccountID   uuid.UUID `json:"account_id"`
	IsLatest    bool      `json:"is_latest"`
	AccountType string    `json:"account_type"`
	IsnSlug     string    `json:"isn_slug"`
}

func (q *Queries) GetLatestSignalBatchByIsnSlugAndBatchID(ctx context.Context, arg GetLatestSignalBatchByIsnSlugAndBatchIDParams) (GetLatestSignalBatchByIsnSlugAndBatchIDRow, error) {
	row := q.db.QueryRow(ctx, GetLatestSignalBatchByIsnSlugAndBatchID, arg.Slug, arg.ID)
	var i GetLatestSignalBatchByIsnSlugAndBatchIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsnID,
		&i.AccountID,
		&i.IsLatest,
		&i.AccountType,
		&i.IsnSlug,
	)
	return i, err
}
