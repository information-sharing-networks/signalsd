// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: signals.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createOrUpdateSignalWithCorrelationID = `-- name: CreateOrUpdateSignalWithCorrelationID :one
WITH ids AS (
    SELECT st.id AS signal_type_id
    FROM signal_types st 
    WHERE st.slug = $4
    and st.sem_ver = $5
)
INSERT INTO signals (
    id,
    created_at,
    updated_at,
    account_id,
    signal_type_id,
    local_ref,
    correlation_id,
    is_withdrawn,
    is_archived)
SELECT
    gen_random_uuid(),
    now(),
    now(),
    $1,
    ids.signal_type_id,
    $2,
    $3,
    false,
    false
FROM ids 
ON CONFLICT (account_id, signal_type_id, local_ref) 
DO UPDATE SET 
    correlation_id = EXCLUDED.correlation_id,
    updated_at = now()
RETURNING id
`

type CreateOrUpdateSignalWithCorrelationIDParams struct {
	AccountID      uuid.UUID `json:"account_id"`
	LocalRef       string    `json:"local_ref"`
	CorrelationID  uuid.UUID `json:"correlation_id"`
	SignalTypeSlug string    `json:"signal_type_slug"`
	SemVer         string    `json:"sem_ver"`
}

// note if there is already a master record, then correlation_id is updated with the supplied value
func (q *Queries) CreateOrUpdateSignalWithCorrelationID(ctx context.Context, arg CreateOrUpdateSignalWithCorrelationIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createOrUpdateSignalWithCorrelationID,
		arg.AccountID,
		arg.LocalRef,
		arg.CorrelationID,
		arg.SignalTypeSlug,
		arg.SemVer,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createSignal = `-- name: CreateSignal :one
WITH ids AS (
    SELECT st.id AS signal_type_id, gen_random_uuid() AS signal_id
    FROM signal_types st 
    WHERE st.slug = $3
    and st.sem_ver = $4
)
INSERT INTO signals (
    id,
    created_at,
    updated_at,
    account_id,
    signal_type_id,
    local_ref,
    correlation_id,
    is_withdrawn,
    is_archived)
SELECT
    ids.signal_id,
    now(),
    now(),
    $1,
    ids.signal_type_id,
    $2,
    ids.signal_id,
    false,
    false
FROM ids
ON CONFLICT (account_id, signal_type_id, local_ref) DO NOTHING
RETURNING id
`

type CreateSignalParams struct {
	AccountID      uuid.UUID `json:"account_id"`
	LocalRef       string    `json:"local_ref"`
	SignalTypeSlug string    `json:"signal_type_slug"`
	SemVer         string    `json:"sem_ver"`
}

// this query creates one row in signals for every new combination of account_id, signal_type_id, local_ref
func (q *Queries) CreateSignal(ctx context.Context, arg CreateSignalParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSignal,
		arg.AccountID,
		arg.LocalRef,
		arg.SignalTypeSlug,
		arg.SemVer,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createSignalVersion = `-- name: CreateSignalVersion :one
WITH ver AS (
    SELECT 
        st.id AS signal_type_id,
        COALESCE(
            (SELECT MAX(sv.version_number) 
             FROM signal_versions sv 
             JOIN signals s
                ON s.id = sv.signal_id
             WHERE s.local_ref = $4)
            , 0) + 1 as version_number
    FROM signal_types st
    WHERE st.slug = $5
        AND st.sem_ver = $6
)
INSERT INTO signal_versions (
    id,
    created_at,
    account_id,
    signal_batch_id,
    signal_id,
    version_number,
    validation_status,
    content
)
SELECT
    gen_random_uuid(),
    now(), 
    $1,
    $2,
    s.id,
    ver.version_number,
    'pending',
    $3
FROM ver 
JOIN signals s 
    ON s.signal_type_id = ver.signal_type_id
    AND s.account_id = $1
    AND s.local_ref = $4
RETURNING id, version_number
`

type CreateSignalVersionParams struct {
	AccountID      uuid.UUID `json:"account_id"`
	SignalBatchID  uuid.UUID `json:"signal_batch_id"`
	Content        []byte    `json:"content"`
	LocalRef       string    `json:"local_ref"`
	SignalTypeSlug string    `json:"signal_type_slug"`
	SemVer         string    `json:"sem_ver"`
}

type CreateSignalVersionRow struct {
	ID            uuid.UUID `json:"id"`
	VersionNumber int32     `json:"version_number"`
}

// if there is already a version of this signal, create a new one with an incremented version_number
func (q *Queries) CreateSignalVersion(ctx context.Context, arg CreateSignalVersionParams) (CreateSignalVersionRow, error) {
	row := q.db.QueryRow(ctx, createSignalVersion,
		arg.AccountID,
		arg.SignalBatchID,
		arg.Content,
		arg.LocalRef,
		arg.SignalTypeSlug,
		arg.SemVer,
	)
	var i CreateSignalVersionRow
	err := row.Scan(&i.ID, &i.VersionNumber)
	return i, err
}
