// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: isn_retrievers.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createIsnRetriever = `-- name: CreateIsnRetriever :one
INSERT INTO isn_retrievers (
    isn_id,
    created_at,
    updated_at,
    default_rate_limit,
    listener_count
) VALUES ($1, now(), now(), $2, $3)
RETURNING isn_id, created_at, updated_at, default_rate_limit, retriever_status, listener_count
`

type CreateIsnRetrieverParams struct {
	IsnID            uuid.UUID `json:"isn_id"`
	DefaultRateLimit int32     `json:"default_rate_limit"`
	ListenerCount    int32     `json:"listener_count"`
}

func (q *Queries) CreateIsnRetriever(ctx context.Context, arg CreateIsnRetrieverParams) (IsnRetriever, error) {
	row := q.db.QueryRow(ctx, createIsnRetriever, arg.IsnID, arg.DefaultRateLimit, arg.ListenerCount)
	var i IsnRetriever
	err := row.Scan(
		&i.IsnID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DefaultRateLimit,
		&i.RetrieverStatus,
		&i.ListenerCount,
	)
	return i, err
}

const existsIsnRetriever = `-- name: ExistsIsnRetriever :one

SELECT EXISTS
  (SELECT 1
   FROM isn_retrievers ir
   WHERE ir.isn_id = $1) AS EXISTS
`

func (q *Queries) ExistsIsnRetriever(ctx context.Context, isnID uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, existsIsnRetriever, isnID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getForDisplayIsnRetrieverByIsnID = `-- name: GetForDisplayIsnRetrieverByIsnID :one
SELECT
    ir.created_at,
    ir.updated_at,
    ir.retriever_status,
    ir.default_rate_limit,
    ir.listener_count
FROM isn_retrievers ir
WHERE ir.isn_id = $1
`

type GetForDisplayIsnRetrieverByIsnIDRow struct {
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
	RetrieverStatus  string    `json:"retriever_status"`
	DefaultRateLimit int32     `json:"default_rate_limit"`
	ListenerCount    int32     `json:"listener_count"`
}

func (q *Queries) GetForDisplayIsnRetrieverByIsnID(ctx context.Context, isnID uuid.UUID) (GetForDisplayIsnRetrieverByIsnIDRow, error) {
	row := q.db.QueryRow(ctx, getForDisplayIsnRetrieverByIsnID, isnID)
	var i GetForDisplayIsnRetrieverByIsnIDRow
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RetrieverStatus,
		&i.DefaultRateLimit,
		&i.ListenerCount,
	)
	return i, err
}

const getIsnRetrieverByIsnSlug = `-- name: GetIsnRetrieverByIsnSlug :one
SELECT
    ir.isn_id, ir.created_at, ir.updated_at, ir.default_rate_limit, ir.retriever_status, ir.listener_count,
    i.is_in_use AS isn_is_in_use
FROM isn_retrievers ir
JOIN isn i 
ON i.id = ir.isn_id
WHERE i.slug = $1
`

type GetIsnRetrieverByIsnSlugRow struct {
	IsnID            uuid.UUID `json:"isn_id"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
	DefaultRateLimit int32     `json:"default_rate_limit"`
	RetrieverStatus  string    `json:"retriever_status"`
	ListenerCount    int32     `json:"listener_count"`
	IsnIsInUse       bool      `json:"isn_is_in_use"`
}

func (q *Queries) GetIsnRetrieverByIsnSlug(ctx context.Context, slug string) (GetIsnRetrieverByIsnSlugRow, error) {
	row := q.db.QueryRow(ctx, getIsnRetrieverByIsnSlug, slug)
	var i GetIsnRetrieverByIsnSlugRow
	err := row.Scan(
		&i.IsnID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DefaultRateLimit,
		&i.RetrieverStatus,
		&i.ListenerCount,
		&i.IsnIsInUse,
	)
	return i, err
}

const updateIsnRetriever = `-- name: UpdateIsnRetriever :execrows
UPDATE isn_retrievers SET (
  updated_at, 
  default_rate_limit,
  retriever_status,
  listener_count
) = (Now(), $2, $3, $4)
WHERE isn_id = $1
`

type UpdateIsnRetrieverParams struct {
	IsnID            uuid.UUID `json:"isn_id"`
	DefaultRateLimit int32     `json:"default_rate_limit"`
	RetrieverStatus  string    `json:"retriever_status"`
	ListenerCount    int32     `json:"listener_count"`
}

func (q *Queries) UpdateIsnRetriever(ctx context.Context, arg UpdateIsnRetrieverParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateIsnRetriever,
		arg.IsnID,
		arg.DefaultRateLimit,
		arg.RetrieverStatus,
		arg.ListenerCount,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
