// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT user_id, expires_at, revoked_at FROM refresh_tokens where token = $1
`

type GetRefreshTokenRow struct {
	UserID    uuid.UUID    `json:"user_id"`
	ExpiresAt time.Time    `json:"expires_at"`
	RevokedAt sql.NullTime `json:"revoked_at"`
}

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i GetRefreshTokenRow
	err := row.Scan(&i.UserID, &i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :one
INSERT INTO refresh_tokens (token, user_id, created_at, updated_at, expires_at)
VALUES ( $1,$2, NOW(), NOW(), $3)
RETURNING token, user_id
`

type InsertRefreshTokenParams struct {
	Token     string    `json:"token"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

type InsertRefreshTokenRow struct {
	Token  string    `json:"token"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) (InsertRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, insertRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i InsertRefreshTokenRow
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}

const revokeAllRefreshTokensForUser = `-- name: RevokeAllRefreshTokensForUser :execrows
UPDATE refresh_tokens SET (updated_at, revoked_at) = (NOW(), NOW()) 
WHERE user_id = $1
AND revoked_at IS NULL
`

func (q *Queries) RevokeAllRefreshTokensForUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, revokeAllRefreshTokensForUser, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :execrows
UPDATE refresh_tokens SET (updated_at, revoked_at) = (NOW(), NOW()) 
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) (int64, error) {
	result, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
