// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: isn.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createIsn = `-- name: CreateIsn :one

INSERT INTO isn (
    id,
    created_at,
    updated_at,
    user_id,
    title,
    slug,
    detail,
    is_in_use,
    visibility,
    storage_type,
    storage_connection_url 
) VALUES (gen_random_uuid(), now(), now(), $1, $2, $3, $4, $5, $6 ,$7, $8) 
RETURNING id, slug
`

type CreateIsnParams struct {
	UserID               uuid.UUID `json:"user_id"`
	Title                string    `json:"title"`
	Slug                 string    `json:"slug"`
	Detail               string    `json:"detail"`
	IsInUse              bool      `json:"is_in_use"`
	Visibility           string    `json:"visibility"`
	StorageType          string    `json:"storage_type"`
	StorageConnectionURL string    `json:"storage_connection_url"`
}

type CreateIsnRow struct {
	ID   uuid.UUID `json:"id"`
	Slug string    `json:"slug"`
}

func (q *Queries) CreateIsn(ctx context.Context, arg CreateIsnParams) (CreateIsnRow, error) {
	row := q.db.QueryRowContext(ctx, createIsn,
		arg.UserID,
		arg.Title,
		arg.Slug,
		arg.Detail,
		arg.IsInUse,
		arg.Visibility,
		arg.StorageType,
		arg.StorageConnectionURL,
	)
	var i CreateIsnRow
	err := row.Scan(&i.ID, &i.Slug)
	return i, err
}

const existsIsnWithSlug = `-- name: ExistsIsnWithSlug :one

SELECT EXISTS
  (SELECT 1
   FROM isn
   WHERE slug = $1) AS EXISTS
`

func (q *Queries) ExistsIsnWithSlug(ctx context.Context, slug string) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsIsnWithSlug, slug)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getForDisplayIsnBySlug = `-- name: GetForDisplayIsnBySlug :one
SELECT 
    id,
    created_at,
    updated_at,
    title,
    slug,
    detail,
    is_in_use,
    visibility,
    storage_type,
    storage_connection_url
FROM isn 
WHERE slug = $1
`

type GetForDisplayIsnBySlugRow struct {
	ID                   uuid.UUID `json:"id"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
	Title                string    `json:"title"`
	Slug                 string    `json:"slug"`
	Detail               string    `json:"detail"`
	IsInUse              bool      `json:"is_in_use"`
	Visibility           string    `json:"visibility"`
	StorageType          string    `json:"storage_type"`
	StorageConnectionURL string    `json:"storage_connection_url"`
}

func (q *Queries) GetForDisplayIsnBySlug(ctx context.Context, slug string) (GetForDisplayIsnBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getForDisplayIsnBySlug, slug)
	var i GetForDisplayIsnBySlugRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Slug,
		&i.Detail,
		&i.IsInUse,
		&i.Visibility,
		&i.StorageType,
		&i.StorageConnectionURL,
	)
	return i, err
}

const getIsnByID = `-- name: GetIsnByID :one
SELECT i.id, i.created_at, i.updated_at, i.user_id, i.title, i.slug, i.detail, i.is_in_use, i.visibility, i.storage_type, i.storage_connection_url 
FROM isn i
WHERE i.id = $1
`

func (q *Queries) GetIsnByID(ctx context.Context, id uuid.UUID) (Isn, error) {
	row := q.db.QueryRowContext(ctx, getIsnByID, id)
	var i Isn
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Title,
		&i.Slug,
		&i.Detail,
		&i.IsInUse,
		&i.Visibility,
		&i.StorageType,
		&i.StorageConnectionURL,
	)
	return i, err
}

const getIsnBySignalDefID = `-- name: GetIsnBySignalDefID :one
SELECT i.id, i.created_at, i.updated_at, i.user_id, i.title, i.slug, i.detail, i.is_in_use, i.visibility, i.storage_type, i.storage_connection_url 
FROM isn i
JOIN signal_defs sd on sd.isn_id = i.id
WHERE sd.id = $1
`

func (q *Queries) GetIsnBySignalDefID(ctx context.Context, id uuid.UUID) (Isn, error) {
	row := q.db.QueryRowContext(ctx, getIsnBySignalDefID, id)
	var i Isn
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Title,
		&i.Slug,
		&i.Detail,
		&i.IsInUse,
		&i.Visibility,
		&i.StorageType,
		&i.StorageConnectionURL,
	)
	return i, err
}

const getIsnBySlug = `-- name: GetIsnBySlug :one
SELECT i.id, i.created_at, i.updated_at, i.user_id, i.title, i.slug, i.detail, i.is_in_use, i.visibility, i.storage_type, i.storage_connection_url 
FROM isn i
WHERE i.slug = $1
`

func (q *Queries) GetIsnBySlug(ctx context.Context, slug string) (Isn, error) {
	row := q.db.QueryRowContext(ctx, getIsnBySlug, slug)
	var i Isn
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Title,
		&i.Slug,
		&i.Detail,
		&i.IsInUse,
		&i.Visibility,
		&i.StorageType,
		&i.StorageConnectionURL,
	)
	return i, err
}

const getIsns = `-- name: GetIsns :many
SELECT i.id, i.created_at, i.updated_at, i.user_id, i.title, i.slug, i.detail, i.is_in_use, i.visibility, i.storage_type, i.storage_connection_url 
FROM isn i
`

func (q *Queries) GetIsns(ctx context.Context) ([]Isn, error) {
	rows, err := q.db.QueryContext(ctx, getIsns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Isn
	for rows.Next() {
		var i Isn
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.Detail,
			&i.IsInUse,
			&i.Visibility,
			&i.StorageType,
			&i.StorageConnectionURL,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIsn = `-- name: UpdateIsn :execrows
UPDATE isn SET (
    updated_at, 
    detail,
    is_in_use,
    visibility,
    storage_type,
    storage_connection_url
) = (Now(), $2, $3, $4, $5, $6)
WHERE id = $1
`

type UpdateIsnParams struct {
	ID                   uuid.UUID `json:"id"`
	Detail               string    `json:"detail"`
	IsInUse              bool      `json:"is_in_use"`
	Visibility           string    `json:"visibility"`
	StorageType          string    `json:"storage_type"`
	StorageConnectionURL string    `json:"storage_connection_url"`
}

func (q *Queries) UpdateIsn(ctx context.Context, arg UpdateIsnParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateIsn,
		arg.ID,
		arg.Detail,
		arg.IsInUse,
		arg.Visibility,
		arg.StorageType,
		arg.StorageConnectionURL,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
