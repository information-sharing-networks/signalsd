// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts.sql

package database

import (
	"context"
)

const createServiceIdentityAccount = `-- name: CreateServiceIdentityAccount :one
INSERT INTO accounts (id, created_at, updated_at, account_type)
VALUES ( gen_random_uuid(), NOW(), NOW(), 'service_identity')
RETURNING id, created_at, updated_at, account_type
`

func (q *Queries) CreateServiceIdentityAccount(ctx context.Context) (Account, error) {
	row := q.db.QueryRowContext(ctx, createServiceIdentityAccount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountType,
	)
	return i, err
}

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO accounts (id, created_at, updated_at, account_type)
VALUES ( gen_random_uuid(), NOW(), NOW(), 'user')
RETURNING id, created_at, updated_at, account_type
`

func (q *Queries) CreateUserAccount(ctx context.Context) (Account, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountType,
	)
	return i, err
}
