// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: service_accounts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteOneTimeClientSecret = `-- name: DeleteOneTimeClientSecret :execrows
DELETE from one_time_client_secrets 
WHERE id = $1
`

func (q *Queries) DeleteOneTimeClientSecret(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteOneTimeClientSecret, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const extendClientSecret = `-- name: ExtendClientSecret :execrows
UPDATE client_secrets SET (updated_at, expires_at) = (NOW(), NOW()) 
WHERE hashed_secret = $1
`

func (q *Queries) ExtendClientSecret(ctx context.Context, hashedSecret string) (int64, error) {
	result, err := q.db.Exec(ctx, extendClientSecret, hashedSecret)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getClientSecret = `-- name: GetClientSecret :one
SELECT service_account_account_id, expires_at, revoked_at FROM client_secrets where hashed_secret = $1
`

type GetClientSecretRow struct {
	ServiceAccountAccountID uuid.UUID  `json:"service_account_account_id"`
	ExpiresAt               time.Time  `json:"expires_at"`
	RevokedAt               *time.Time `json:"revoked_at"`
}

func (q *Queries) GetClientSecret(ctx context.Context, hashedSecret string) (GetClientSecretRow, error) {
	row := q.db.QueryRow(ctx, getClientSecret, hashedSecret)
	var i GetClientSecretRow
	err := row.Scan(&i.ServiceAccountAccountID, &i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const getValidClientSecretByServiceAccountAccountId = `-- name: GetValidClientSecretByServiceAccountAccountId :one
SELECT hashed_secret, expires_at
FROM client_secrets
WHERE service_account_account_id = $1
  AND revoked_at IS NULL
  AND expires_at > NOW()
`

type GetValidClientSecretByServiceAccountAccountIdRow struct {
	HashedSecret string    `json:"hashed_secret"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) GetValidClientSecretByServiceAccountAccountId(ctx context.Context, serviceAccountAccountID uuid.UUID) (GetValidClientSecretByServiceAccountAccountIdRow, error) {
	row := q.db.QueryRow(ctx, getValidClientSecretByServiceAccountAccountId, serviceAccountAccountID)
	var i GetValidClientSecretByServiceAccountAccountIdRow
	err := row.Scan(&i.HashedSecret, &i.ExpiresAt)
	return i, err
}

const insertClientSecrets = `-- name: InsertClientSecrets :one
INSERT INTO client_secrets (hashed_secret, service_account_account_id, created_at, updated_at, expires_at)
VALUES ( $1,$2, NOW(), NOW(), $3)
RETURNING hashed_secret, service_account_account_id
`

type InsertClientSecretsParams struct {
	HashedSecret            string    `json:"hashed_secret"`
	ServiceAccountAccountID uuid.UUID `json:"service_account_account_id"`
	ExpiresAt               time.Time `json:"expires_at"`
}

type InsertClientSecretsRow struct {
	HashedSecret            string    `json:"hashed_secret"`
	ServiceAccountAccountID uuid.UUID `json:"service_account_account_id"`
}

func (q *Queries) InsertClientSecrets(ctx context.Context, arg InsertClientSecretsParams) (InsertClientSecretsRow, error) {
	row := q.db.QueryRow(ctx, insertClientSecrets, arg.HashedSecret, arg.ServiceAccountAccountID, arg.ExpiresAt)
	var i InsertClientSecretsRow
	err := row.Scan(&i.HashedSecret, &i.ServiceAccountAccountID)
	return i, err
}

const insertOneTimeClientSecret = `-- name: InsertOneTimeClientSecret :one
INSERT INTO one_time_client_secrets (id, service_account_account_id, plaintext_secret, created_at, expires_at)
VALUES ( $1, $2, $3, NOW(), $4)
RETURNING id
`

type InsertOneTimeClientSecretParams struct {
	ID                      uuid.UUID        `json:"id"`
	ServiceAccountAccountID uuid.UUID        `json:"service_account_account_id"`
	PlaintextSecret         string           `json:"plaintext_secret"`
	ExpiresAt               pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) InsertOneTimeClientSecret(ctx context.Context, arg InsertOneTimeClientSecretParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertOneTimeClientSecret,
		arg.ID,
		arg.ServiceAccountAccountID,
		arg.PlaintextSecret,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const revokeAllClientSecretsForUser = `-- name: RevokeAllClientSecretsForUser :execrows
UPDATE client_secrets SET (updated_at, revoked_at) = (NOW(), NOW()) 
WHERE service_account_account_id = $1
AND revoked_at IS NULL
`

func (q *Queries) RevokeAllClientSecretsForUser(ctx context.Context, serviceAccountAccountID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, revokeAllClientSecretsForUser, serviceAccountAccountID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const revokeClientSecret = `-- name: RevokeClientSecret :execrows
UPDATE client_secrets SET (updated_at, revoked_at) = (NOW(), NOW()) 
WHERE hashed_secret = $1
`

func (q *Queries) RevokeClientSecret(ctx context.Context, hashedSecret string) (int64, error) {
	result, err := q.db.Exec(ctx, revokeClientSecret, hashedSecret)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
