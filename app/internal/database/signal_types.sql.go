// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: signal_types.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSignalType = `-- name: CreateSignalType :one

INSERT INTO signal_types (
    id,
    created_at,
    updated_at,
    isn_id,
    slug,
    schema_url,
    readme_url,
    title,
    detail,
    sem_ver,
    is_in_use
    ) VALUES (gen_random_uuid(), now(), now(), $1, $2, $3, $4, $5, $6, $7, true)
RETURNING id, created_at, updated_at, isn_id, slug, schema_url, readme_url, title, detail, sem_ver, is_in_use
`

type CreateSignalTypeParams struct {
	IsnID     uuid.UUID `json:"isn_id"`
	Slug      string    `json:"slug"`
	SchemaURL string    `json:"schema_url"`
	ReadmeURL string    `json:"readme_url"`
	Title     string    `json:"title"`
	Detail    string    `json:"detail"`
	SemVer    string    `json:"sem_ver"`
}

func (q *Queries) CreateSignalType(ctx context.Context, arg CreateSignalTypeParams) (SignalType, error) {
	row := q.db.QueryRowContext(ctx, createSignalType,
		arg.IsnID,
		arg.Slug,
		arg.SchemaURL,
		arg.ReadmeURL,
		arg.Title,
		arg.Detail,
		arg.SemVer,
	)
	var i SignalType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsnID,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.IsInUse,
	)
	return i, err
}

const existsSignalTypeWithSlugAndSchema = `-- name: ExistsSignalTypeWithSlugAndSchema :one
SELECT EXISTS
  (SELECT 1
   FROM signal_types
   WHERE slug = $1
   AND schema_url = $2) AS EXISTS
`

type ExistsSignalTypeWithSlugAndSchemaParams struct {
	Slug      string `json:"slug"`
	SchemaURL string `json:"schema_url"`
}

func (q *Queries) ExistsSignalTypeWithSlugAndSchema(ctx context.Context, arg ExistsSignalTypeWithSlugAndSchemaParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsSignalTypeWithSlugAndSchema, arg.Slug, arg.SchemaURL)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getForDisplaySignalTypeByID = `-- name: GetForDisplaySignalTypeByID :one
SELECT 
    sd.id,
    sd.created_at,
    sd.updated_at,
    sd.slug,
    sd.schema_url,
    sd.readme_url,
    sd.title,
    sd.detail,
    sd.sem_ver,
    sd.is_in_use
FROM signal_types sd
WHERE sd.id = $1
`

type GetForDisplaySignalTypeByIDRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Slug      string    `json:"slug"`
	SchemaURL string    `json:"schema_url"`
	ReadmeURL string    `json:"readme_url"`
	Title     string    `json:"title"`
	Detail    string    `json:"detail"`
	SemVer    string    `json:"sem_ver"`
	IsInUse   bool      `json:"is_in_use"`
}

func (q *Queries) GetForDisplaySignalTypeByID(ctx context.Context, id uuid.UUID) (GetForDisplaySignalTypeByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getForDisplaySignalTypeByID, id)
	var i GetForDisplaySignalTypeByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.IsInUse,
	)
	return i, err
}

const getForDisplaySignalTypeBySlug = `-- name: GetForDisplaySignalTypeBySlug :one
SELECT 
    sd.id,
    sd.created_at,
    sd.updated_at,
    sd.slug,
    sd.schema_url,
    sd.readme_url,
    sd.title,
    sd.detail,
    sd.sem_ver,
    sd.is_in_use
FROM signal_types sd
WHERE sd.slug = $1
  AND sd.sem_ver = $2
`

type GetForDisplaySignalTypeBySlugParams struct {
	Slug   string `json:"slug"`
	SemVer string `json:"sem_ver"`
}

type GetForDisplaySignalTypeBySlugRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Slug      string    `json:"slug"`
	SchemaURL string    `json:"schema_url"`
	ReadmeURL string    `json:"readme_url"`
	Title     string    `json:"title"`
	Detail    string    `json:"detail"`
	SemVer    string    `json:"sem_ver"`
	IsInUse   bool      `json:"is_in_use"`
}

func (q *Queries) GetForDisplaySignalTypeBySlug(ctx context.Context, arg GetForDisplaySignalTypeBySlugParams) (GetForDisplaySignalTypeBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getForDisplaySignalTypeBySlug, arg.Slug, arg.SemVer)
	var i GetForDisplaySignalTypeBySlugRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.IsInUse,
	)
	return i, err
}

const getInUseSignalTypesByIsnID = `-- name: GetInUseSignalTypesByIsnID :many
SELECT sd.id, sd.created_at, sd.updated_at, sd.isn_id, sd.slug, sd.schema_url, sd.readme_url, sd.title, sd.detail, sd.sem_ver, sd.is_in_use
FROM signal_types sd
WHERE sd.isn_id = $1
AND is_in_use = true
`

// only return signal_types for the ISN that are flagged "in use"
func (q *Queries) GetInUseSignalTypesByIsnID(ctx context.Context, isnID uuid.UUID) ([]SignalType, error) {
	rows, err := q.db.QueryContext(ctx, getInUseSignalTypesByIsnID, isnID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignalType
	for rows.Next() {
		var i SignalType
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsnID,
			&i.Slug,
			&i.SchemaURL,
			&i.ReadmeURL,
			&i.Title,
			&i.Detail,
			&i.SemVer,
			&i.IsInUse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSemVerAndSchemaForLatestSlugVersion = `-- name: GetSemVerAndSchemaForLatestSlugVersion :one
SELECT '0.0.0' AS sem_ver,
       '' AS schema_url
WHERE NOT EXISTS
    (SELECT 1
     FROM signal_types sd1
     WHERE sd1.slug = $1)
UNION ALL
SELECT sd2.sem_ver,
       sd2.schema_url
FROM signal_types sd2
WHERE sd2.slug = $1
  AND sd2.sem_ver =
    (SELECT max(sd3.sem_ver)
     FROM signal_types sd3
     WHERE sd3.slug = $1)
`

type GetSemVerAndSchemaForLatestSlugVersionRow struct {
	SemVer    string `json:"sem_ver"`
	SchemaURL string `json:"schema_url"`
}

// if there are no signals defs for the supplied slug, this query returns an empty string for schema_url and a sem_ver of '0.0.0'
func (q *Queries) GetSemVerAndSchemaForLatestSlugVersion(ctx context.Context, slug string) (GetSemVerAndSchemaForLatestSlugVersionRow, error) {
	row := q.db.QueryRowContext(ctx, getSemVerAndSchemaForLatestSlugVersion, slug)
	var i GetSemVerAndSchemaForLatestSlugVersionRow
	err := row.Scan(&i.SemVer, &i.SchemaURL)
	return i, err
}

const getSignalTypeByID = `-- name: GetSignalTypeByID :one

SELECT sd.id, sd.created_at, sd.updated_at, sd.isn_id, sd.slug, sd.schema_url, sd.readme_url, sd.title, sd.detail, sd.sem_ver, sd.is_in_use
FROM signal_types sd
WHERE sd.id = $1
`

func (q *Queries) GetSignalTypeByID(ctx context.Context, id uuid.UUID) (SignalType, error) {
	row := q.db.QueryRowContext(ctx, getSignalTypeByID, id)
	var i SignalType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsnID,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.IsInUse,
	)
	return i, err
}

const getSignalTypeBySlug = `-- name: GetSignalTypeBySlug :one

SELECT sd.id, sd.created_at, sd.updated_at, sd.isn_id, sd.slug, sd.schema_url, sd.readme_url, sd.title, sd.detail, sd.sem_ver, sd.is_in_use
FROM signal_types sd
WHERE sd.slug = $1
AND sd.sem_ver = $2
`

type GetSignalTypeBySlugParams struct {
	Slug   string `json:"slug"`
	SemVer string `json:"sem_ver"`
}

func (q *Queries) GetSignalTypeBySlug(ctx context.Context, arg GetSignalTypeBySlugParams) (SignalType, error) {
	row := q.db.QueryRowContext(ctx, getSignalTypeBySlug, arg.Slug, arg.SemVer)
	var i SignalType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsnID,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.IsInUse,
	)
	return i, err
}

const getSignalTypes = `-- name: GetSignalTypes :many

SELECT sd.id, sd.created_at, sd.updated_at, sd.isn_id, sd.slug, sd.schema_url, sd.readme_url, sd.title, sd.detail, sd.sem_ver, sd.is_in_use
FROM signal_types sd
`

func (q *Queries) GetSignalTypes(ctx context.Context) ([]SignalType, error) {
	rows, err := q.db.QueryContext(ctx, getSignalTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignalType
	for rows.Next() {
		var i SignalType
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsnID,
			&i.Slug,
			&i.SchemaURL,
			&i.ReadmeURL,
			&i.Title,
			&i.Detail,
			&i.SemVer,
			&i.IsInUse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSignalTypeDetails = `-- name: UpdateSignalTypeDetails :execrows
UPDATE signal_types SET (updated_at, readme_url, detail, is_in_use) = (NOW(), $2, $3, $4)
WHERE id = $1
`

type UpdateSignalTypeDetailsParams struct {
	ID        uuid.UUID `json:"id"`
	ReadmeURL string    `json:"readme_url"`
	Detail    string    `json:"detail"`
	IsInUse   bool      `json:"is_in_use"`
}

func (q *Queries) UpdateSignalTypeDetails(ctx context.Context, arg UpdateSignalTypeDetailsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateSignalTypeDetails,
		arg.ID,
		arg.ReadmeURL,
		arg.Detail,
		arg.IsInUse,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
