// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: isn_receivers.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createIsnReceiver = `-- name: CreateIsnReceiver :one
INSERT INTO isn_receivers (
    isn_id,
    created_at,
    updated_at,
    max_daily_validation_failures,
    max_payload_kilobytes,
    payload_validation,
    default_rate_limit,
    listener_count
) VALUES ($1, now(), now(), $2, $3, $4, $5, $6)
RETURNING isn_id, created_at, updated_at, max_daily_validation_failures, max_payload_kilobytes, payload_validation, default_rate_limit, receiver_status, listener_count
`

type CreateIsnReceiverParams struct {
	IsnID                      uuid.UUID `json:"isn_id"`
	MaxDailyValidationFailures int32     `json:"max_daily_validation_failures"`
	MaxPayloadKilobytes        int32     `json:"max_payload_kilobytes"`
	PayloadValidation          string    `json:"payload_validation"`
	DefaultRateLimit           int32     `json:"default_rate_limit"`
	ListenerCount              int32     `json:"listener_count"`
}

func (q *Queries) CreateIsnReceiver(ctx context.Context, arg CreateIsnReceiverParams) (IsnReceiver, error) {
	row := q.db.QueryRowContext(ctx, createIsnReceiver,
		arg.IsnID,
		arg.MaxDailyValidationFailures,
		arg.MaxPayloadKilobytes,
		arg.PayloadValidation,
		arg.DefaultRateLimit,
		arg.ListenerCount,
	)
	var i IsnReceiver
	err := row.Scan(
		&i.IsnID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaxDailyValidationFailures,
		&i.MaxPayloadKilobytes,
		&i.PayloadValidation,
		&i.DefaultRateLimit,
		&i.ReceiverStatus,
		&i.ListenerCount,
	)
	return i, err
}

const existsIsnReceiver = `-- name: ExistsIsnReceiver :one

SELECT EXISTS
  (SELECT 1
   FROM isn_receivers ir
   WHERE ir.isn_id = $1) AS EXISTS
`

func (q *Queries) ExistsIsnReceiver(ctx context.Context, isnID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsIsnReceiver, isnID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getForDisplayIsnReceiverByIsnID = `-- name: GetForDisplayIsnReceiverByIsnID :one
SELECT
    ir.created_at,
    ir.updated_at,
    ir.max_daily_validation_failures,
    ir.max_payload_kilobytes,
    ir.payload_validation,
    ir.default_rate_limit,
    ir.receiver_status,
    ir.listener_count
FROM isn_receivers ir
WHERE ir.isn_id = $1
`

type GetForDisplayIsnReceiverByIsnIDRow struct {
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	MaxDailyValidationFailures int32     `json:"max_daily_validation_failures"`
	MaxPayloadKilobytes        int32     `json:"max_payload_kilobytes"`
	PayloadValidation          string    `json:"payload_validation"`
	DefaultRateLimit           int32     `json:"default_rate_limit"`
	ReceiverStatus             string    `json:"receiver_status"`
	ListenerCount              int32     `json:"listener_count"`
}

func (q *Queries) GetForDisplayIsnReceiverByIsnID(ctx context.Context, isnID uuid.UUID) (GetForDisplayIsnReceiverByIsnIDRow, error) {
	row := q.db.QueryRowContext(ctx, getForDisplayIsnReceiverByIsnID, isnID)
	var i GetForDisplayIsnReceiverByIsnIDRow
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaxDailyValidationFailures,
		&i.MaxPayloadKilobytes,
		&i.PayloadValidation,
		&i.DefaultRateLimit,
		&i.ReceiverStatus,
		&i.ListenerCount,
	)
	return i, err
}

const getIsnReceiverByIsnSlug = `-- name: GetIsnReceiverByIsnSlug :one

SELECT ir.isn_id, ir.created_at, ir.updated_at, ir.max_daily_validation_failures, ir.max_payload_kilobytes, ir.payload_validation, ir.default_rate_limit, ir.receiver_status, ir.listener_count , i.is_in_use as isn_is_in_use
FROM isn_receivers ir
JOIN isn i
ON i.id = ir.isn_id
WHERE i.slug = $1
`

type GetIsnReceiverByIsnSlugRow struct {
	IsnID                      uuid.UUID `json:"isn_id"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	MaxDailyValidationFailures int32     `json:"max_daily_validation_failures"`
	MaxPayloadKilobytes        int32     `json:"max_payload_kilobytes"`
	PayloadValidation          string    `json:"payload_validation"`
	DefaultRateLimit           int32     `json:"default_rate_limit"`
	ReceiverStatus             string    `json:"receiver_status"`
	ListenerCount              int32     `json:"listener_count"`
	IsnIsInUse                 bool      `json:"isn_is_in_use"`
}

func (q *Queries) GetIsnReceiverByIsnSlug(ctx context.Context, slug string) (GetIsnReceiverByIsnSlugRow, error) {
	row := q.db.QueryRowContext(ctx, getIsnReceiverByIsnSlug, slug)
	var i GetIsnReceiverByIsnSlugRow
	err := row.Scan(
		&i.IsnID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaxDailyValidationFailures,
		&i.MaxPayloadKilobytes,
		&i.PayloadValidation,
		&i.DefaultRateLimit,
		&i.ReceiverStatus,
		&i.ListenerCount,
		&i.IsnIsInUse,
	)
	return i, err
}

const updateIsnReceiver = `-- name: UpdateIsnReceiver :execrows
UPDATE isn_receivers SET (
  updated_at, 
  max_daily_validation_failures,
  max_payload_kilobytes,
  payload_validation,
  default_rate_limit,
  receiver_status,
  listener_count
) = (Now(), $2, $3, $4, $5, $6, $7)
WHERE isn_id = $1
`

type UpdateIsnReceiverParams struct {
	IsnID                      uuid.UUID `json:"isn_id"`
	MaxDailyValidationFailures int32     `json:"max_daily_validation_failures"`
	MaxPayloadKilobytes        int32     `json:"max_payload_kilobytes"`
	PayloadValidation          string    `json:"payload_validation"`
	DefaultRateLimit           int32     `json:"default_rate_limit"`
	ReceiverStatus             string    `json:"receiver_status"`
	ListenerCount              int32     `json:"listener_count"`
}

func (q *Queries) UpdateIsnReceiver(ctx context.Context, arg UpdateIsnReceiverParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateIsnReceiver,
		arg.IsnID,
		arg.MaxDailyValidationFailures,
		arg.MaxPayloadKilobytes,
		arg.PayloadValidation,
		arg.DefaultRateLimit,
		arg.ReceiverStatus,
		arg.ListenerCount,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
