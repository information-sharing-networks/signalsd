package templates

import (
	"fmt"
	"encoding/json"
	"github.com/information-sharing-networks/signalsd/app/internal/ui/client"
	"github.com/information-sharing-networks/signalsd/app/internal/ui/types"
	"github.com/alecthomas/chroma/v2/quick"
	"bytes"
)

templ SignalSearchPage(isns []types.IsnOption, perms map[string]types.IsnPerm, results []client.SearchSignalWithCorrelationsAndVersions) {
	@BaseLayout("Signal Search") {
		@Navigation()
		<div class="page-container">
			<h1 class="page-title">Search Signals</h1>
			<div class="card mb-6">
				<div class="card-body">
					<form hx-get="/ui-api/search-signals" hx-target="#search-results" class="space-y-4">
						@SignalTypeSelectorFields(isns)
						<div class="grid grid-cols-1 md:grid-cols-2">
							@StartDateField()
							@EndDateField()
						</div>
						<div class="grid grid-cols-1 md:grid-cols-3">
							@LocalRefField()
							@SignalIDField()
							@AccountIDField()
						</div>
						<div class="checkbox-group">
							@CheckboxField("include-withdrawn", "true", "Include withdrawn signals")
							@CheckboxField("include-correlated", "true", "Include correlated signals")
						</div>
						<div class="form-group">
							<button type="submit" class="btn btn-primary">
								Search Signals
							</button>
						</div>
					</form>
				</div>
			</div>
			<div id="search-results"></div>
			@SearchSignalScripts()
		</div>
	}
}

// render search results from the SearchSignals handler
templ SearchResults(signals []client.SearchSignalWithCorrelationsAndVersions,  params client.SignalSearchParams) {
	<div class="card">
		<div class="card-header">
			<h3 class="card-title">Search Results ({ types.FormatRecordsReturned(len(signals)) })</h3>
		</div>
		if len(signals) == 0 {
			<div class="card-body text-center text-muted">
				No signals found matching your search criteria.
			</div>
		} else {
			<div class="card-body space-y-6">
				for _, signal := range signals {
					<div class="signal-card">
						<!-- Signal Header -->
						<div class="signal-header">
							<h4 class="signal-local-ref">{ "local ref: " + signal.LocalRef }</h4>
							if signal.IsWithdrawn {
								<span class="signal-badge signal-badge-withdrawn">
									Withdrawn
								</span>
							}
							if signal.VersionNumber > 1 {
								<span class="signal-badge signal-badge-version">
									{ fmt.Sprintf("(version %d)", signal.VersionNumber) }
								</span>
							}
						</div>
						<div class="signal-metadata">
							@SignalMetadataItem("Created", types.FormatDateTime(signal.SignalCreatedAt))
							@SignalMetadataItem("Created by", signal.Email)
						</div>
						<!-- Signal Content -->
						<div style="margin-top: 1rem;">
							{{ id := fmt.Sprintf("json-%s", signal.SignalID) }}
							<div class="json-container compact" id={ id }>
								<pre class="json-content compact language-json">
									<code class="language-json">
										{ string(signal.Content) }
									</code>
								</pre>
								<div style="display: none;" class="json-content pretty-printed">
									@templ.Raw(HighlightJSON(signal.Content)) 
								</div>
								<button
									type="button"
									data-signal-id={ signal.SignalID }
									class="pretty-print-btn btn text-xs "
								>
									<image src="/static/images/prettyprint.svg" alt="pretty print" style="width: 20px; height: 20px;"></image>
								</button>
							</div>
						</div>
						if params.IncludeCorrelated {
							{{ endpoint := fmt.Sprintf("/ui-api/isn/%s/signal_types/%s/v%s/signals/%s/correlated-count/%d", params.IsnSlug, params.SignalTypeSlug, params.SemVer, signal.SignalID, len(signal.CorrelatedSignals)) }}
							{{ tableTarget := fmt.Sprintf("#correlated-signals-table-%s",signal.SignalID) }}
							<div 
								hx-get={ endpoint } 
								hx-target={ tableTarget }
								hx-trigger="every 8s">
							</div>
							<h4>Related Signals</h4>
							@CorrelatedSignalsTable(signal, len(signal.CorrelatedSignals))
						}

						<!-- todo previous versions -->
						<!-- Additional Info -->
						<div class="additional-details">
							<div class="text-xs" style="font-weight: bold; color: #6b7280; margin-top: 0.5rem; margin-bottom: 0.5rem;">Additional Information</div>
							<div class="additional-detail-items text-xs" style="color: #6b7280;">
								if signal.SignalCreatedAt != signal.VersionCreatedAt {
									@SignalMetadataSimple("Updated", types.FormatDateTime(signal.VersionCreatedAt))
								}
								@SignalMetadataSimple("Account ID", signal.AccountID)
								@SignalMetadataSimple("Signal Id", signal.SignalID)
								if signal.CorrelatedToSignalID != "" && signal.CorrelatedToSignalID != signal.SignalID {
									@SignalMetadataSimple("Correlated To", signal.CorrelatedToSignalID)
								}
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
	
}


// render the correlated signals table - where the count of correlated signals has changed, highlight the new rows
templ CorrelatedSignalsTable(signal client.SearchSignalWithCorrelationsAndVersions, originalCount int) {
	{{ id := fmt.Sprintf("correlated-signals-table-%s",signal.SignalID) }}

	if len(signal.CorrelatedSignals) == 0 {
		<span id={ id } class="text-sm">
			<img src="/static/images/bars.svg" alt="Loading..." style="width: 20px; height: 20px;">
			Monitoring ...
		</span>
	} else { 
		<table id={ id }>
			<thead>
				<tr>
					<th>local_ref</th>
					<th>created at</th>
					<th>email</th>
					<th>details</th>
				</tr>
			</thead>
			<tbody>
				for i, correlated := range signal.CorrelatedSignals {
					<tr
						if i >= originalCount {
							style="outline: 0.5px solid limegreen;"
						}
					>
						<td>{ correlated.LocalRef } </td>
						<td>{ types.FormatDateTime(correlated.SignalCreatedAt) }</td>
						<td>{ correlated.Email }</td>
						<td>
							<button class="open-modal-btn btn btn-primary" data-correlated-signal-id={ correlated.SignalID }>View</button>
							<dialog class="modal" id="modal" data-correlated-signal-id={ correlated.SignalID }>
								<h3> { correlated.LocalRef }</h3>
								<pre>{ prettyPrintJSON(correlated.Content) }</pre>
								<button class="close-modal-btn btn btn-primary" data-correlated-signal-id={ correlated.SignalID }>Close</button>
							</dialog>
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
	
}

templ SearchSignalScripts() {
	<script>
		/* button click handler */
		document.addEventListener('click', function(e) {
			/* pretty print json */
			if (e.target.classList.contains('pretty-print-btn')) {
				const signalId = e.target.getAttribute('data-signal-id');
				if (!signalId) {
					return;
				}
				togglePrettyPrint(signalId);
			}

			/* open and close modals that show the correlated id content */
			if (e.target.classList.contains('open-modal-btn')) {
				const signalId = e.target.getAttribute('data-correlated-signal-id');
				if (!signalId) {
					return;
				}
				toggleCorrelatedSignalModal(signalId,'open');
			}
			if (e.target.classList.contains('close-modal-btn')) {
				const signalId = e.target.getAttribute('data-correlated-signal-id');
				if (!signalId) {
					return;
				}
				toggleCorrelatedSignalModal(signalId,'close');
			}
		});

		function togglePrettyPrint(signalId) {
			const jsonContainer = document.getElementById('json-' + signalId);
			if (!jsonContainer) {
				return;
			}	

			compactJsonElement = jsonContainer.querySelector('.json-content.compact');
			ppJsonElement = jsonContainer.querySelector('.json-content.pretty-printed');

			if (!compactJsonElement || !ppJsonElement) {
				return;
			}

			if (jsonContainer.classList.contains('compact')) {	
				jsonContainer.classList.remove('compact');	
				jsonContainer.classList.add('pretty-printed');
				compactJsonElement.style.display = 'none';
				ppJsonElement.style.display = 'block';
			} else {		
				jsonContainer.classList.remove('pretty-printed');	
				jsonContainer.classList.add('compact');
				compactJsonElement.style.display = 'block';
				ppJsonElement.style.display = 'none';
			}
		}

		function toggleCorrelatedSignalModal(signalId, action) {
			if (!signalId || !action) {
				return;
			}

			const modal = document.querySelector(`[data-correlated-signal-id="${signalId}"].modal`);	
			if (!modal) {
				return;
			}

			if (action == 'close') {
				modal.close();
			}
			if (action == 'open') {
				modal.showModal();
			}
		}

	 </script>
}


templ StartDateField() {
	<div class="form-group">
		<label for="start-date" class="form-label">Start Date</label>
		<input
			type="date"
			id="start-date"
			name="start-date"
			class="form-input"
		/>
	</div>
}

templ EndDateField() {
	<div class="form-group">
		<label for="end-date" class="form-label">End Date</label>
		<input
			type="date"
			id="end-date"
			name="end-date"
			class="form-input"
		/>
	</div>
}

templ LocalRefField() {
	<div class="form-group">
		<label for="local-ref" class="form-label">Local Reference</label>
		<input
			type="text"
			id="local-ref"
			name="local-ref"
			placeholder="e.g., item_id_#1"
			class="form-input"
		/>
	</div>
}

templ SignalIDField() {
	<div class="form-group">
		<label for="signal-id" class="form-label">Signal ID</label>
		<input
			type="text"
			id="signal-id"
			name="signal-id"
			placeholder="UUID"
			class="form-input"
		/>
	</div>
}

templ AccountIDField() {
	<div class="form-group">
		<label for="account-id" class="form-label">Account ID</label>
		<input
			type="text"
			id="account-id"
			name="account-id"
			placeholder="UUID"
			class="form-input"
		/>
	</div>
}

/* code highlgiht json  - todo - test escaping of html characters */
func HighlightJSON(jsonElement json.RawMessage) string {
	prettyPrintJSON := prettyPrintJSON(jsonElement)
	var buf bytes.Buffer

	err := quick.Highlight(&buf, string(prettyPrintJSON), "json", "html", "trac")
	if err != nil {
		return ""
	}

	return buf.String()
}


/* pretty print json */
func prettyPrintJSON(jsonElement []byte) string {
	var obj any
	if err:= json.Unmarshal([]byte(jsonElement), &obj); err != nil {
		return string(jsonElement)
	}
	pretty, err := json.MarshalIndent(obj, "", "  ");
	if err != nil {
		return string(jsonElement)
	}	
	return string(pretty)
}