package templates

import (
	"fmt"
	"encoding/json"
	"github.com/information-sharing-networks/signalsd/app/internal/ui/client"
	"github.com/information-sharing-networks/signalsd/app/internal/ui/types"
)

templ SignalSearchPage(isns []types.IsnOption, perms map[string]types.IsnPerm, results []client.SearchSignalWithCorrelationsAndVersions) {
	@BaseLayout("Signal Search") {
		@Navigation()
		<div class="page-container">
			<h1 class="page-title">Search Signals</h1>
			<div class="card mb-6">
				<div class="card-body">
					<form hx-get="/ui-api/search-signals" hx-target="#search-results" class="space-y-4">
						@SignalTypeSelectorFields(isns)
						<div class="grid grid-cols-1 md:grid-cols-2">
							@StartDateField()
							@EndDateField()
						</div>
						<div class="grid grid-cols-1 md:grid-cols-3">
							@LocalRefField()
							@SignalIDField()
							@AccountIDField()
						</div>
						<div class="checkbox-group">
							@CheckboxField("include-withdrawn", "true", "Include withdrawn signals")
							@CheckboxField("include-correlated", "true", "Include correlated signals")
							@CheckboxField("include-previous-versions", "true", "Include previous versions")
						</div>
						<div class="form-group">
							<button type="submit" class="btn btn-primary">
								Search Signals
							</button>
						</div>
					</form>
				</div>
			</div>
			<div id="search-results"></div>
		</div>
	}
}

// render search results from the SearchSignals handler
templ SearchResults(signals []client.SearchSignalWithCorrelationsAndVersions,  isnSlug , SignalTypeSlug, SemVer string) {
	<div class="card">
		<div class="card-header">
			<h3 class="card-title">Search Results ({ types.FormatRecordsReturned(len(signals)) })</h3>
		</div>
		if len(signals) == 0 {
			<div class="card-body text-center text-muted">
				No signals found matching your search criteria.
			</div>
		} else {
			<div class="card-body space-y-6">
				for _, signal := range signals {
					<div class="signal-card">
						<!-- Signal Header -->
						<div class="signal-header">
							<div style="flex: 1;">
								<div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 0.5rem;">
									<h4 class="signal-local-ref">{ "local ref: " + signal.LocalRef }</h4>
									if signal.IsWithdrawn {
										<span class="signal-badge signal-badge-withdrawn">
											Withdrawn
										</span>
									}
									if signal.VersionNumber > 1 {
										<span class="signal-badge signal-badge-version">
											{ fmt.Sprintf("(version %d)", signal.VersionNumber) }
										</span>
									}
								</div>
								<div class="signal-metadata">
									@SignalMetadataItem("Created", types.FormatDateTime(signal.SignalCreatedAt))
									@SignalMetadataItem("Created by", signal.Email)
								</div>
								if signal.CorrelatedToSignalID != "" && signal.CorrelatedToSignalID != signal.SignalID {
									<div class="correlation-info">
										<span class="text-sm" style="color: #1e40af;">
											<span style="font-weight: 500;">Correlated to:</span> { signal.CorrelatedToSignalID }
										</span>
									</div>
								}
							</div>
						</div>
						<!-- Signal Content -->
						<div style="margin-top: 1rem;">
							<button
								type="button"
								data-signal-id={ signal.SignalID }
								class="pretty-print-btn btn btn-secondary text-xs"
							>
								Pretty Print
							</button>
							<div class="json-container">
								<pre id={ fmt.Sprintf("json-%s", signal.SignalID) } class="json-content">{ string(signal.Content) }</pre>
							</div>
						</div>
						if len(signal.CorrelatedSignals) > 0 {
							{{ endpoint := fmt.Sprintf("/ui-api/isn/%s/signal_types/%s/v%s/signals/%s/correlated-count/%d", isnSlug, SignalTypeSlug, SemVer, signal.SignalID, len(signal.CorrelatedSignals)) }}
							<div 
								hx-get={ endpoint } 
								hx-target="#correlated-signals-table" 
								hx-trigger="every 5s"></div>
							<h4>related documents</h4>
							@CorrelatedSignalsTable(signal, len(signal.CorrelatedSignals))
						}
						<!-- todo previous versions -->
						<!-- Additional Info -->
						<div class="additional-details">
							<div class="text-xs" style="font-weight: bold; color: #6b7280; margin-top: 0.5rem; margin-bottom: 0.5rem;">Additional Information</div>
							<div class="additional-detail-items text-xs" style="color: #6b7280;">
								if signal.SignalCreatedAt != signal.VersionCreatedAt {
									@SignalMetadataSimple("Updated", types.FormatDateTime(signal.VersionCreatedAt))
								}
								@SignalMetadataSimple("Account ID", signal.AccountID)
								@SignalMetadataSimple("Signal Id", signal.SignalID)
								@SignalMetadataSimple("Signal Version ID", signal.SignalVersionID)
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
	<script>

		// Store original JSON content for each signal
		const originalJsonContent = new Map();

		document.addEventListener('click', function(e) {
		if (!e.target.classList.contains('pretty-print-btn')) {
			return
		}

		const signalId = e.target.getAttribute('data-signal-id');
		const jsonElement = document.getElementById('json-' + signalId);

		if (!jsonElement) {
			return;
		}

		try {
			const currentButtonText = e.target.textContent.trim();

			if (currentButtonText === 'Pretty Print') {
				let originalContent = originalJsonContent.get(signalId);
				if (!originalContent) {
					originalContent = jsonElement.textContent.trim();
					originalJsonContent.set(signalId, originalContent);
				}
				// Parse and pretty print JSON
				const parsed = JSON.parse(originalContent);
				jsonElement.textContent = JSON.stringify(parsed, null, 2);
				e.target.textContent = 'Compact';
				jsonElement.classList.add('pretty-printed');
			} else {
				let originalContent = originalJsonContent.get(signalId);
				jsonElement.textContent = originalContent;
				e.target.textContent = 'Pretty Print';
				jsonElement.classList.remove('pretty-printed');
			}
		} catch (error) {
			// Show error message briefly
			const originalText = e.target.textContent;
			e.target.textContent = 'Invalid JSON';
			e.target.classList.add('text-red-600');
			setTimeout(function() {
				e.target.textContent = originalText;
				e.target.classList.remove('text-red-600');
			}, 2000);
			}
		});
	</script>
}

templ CorrelatedSignalsTable(signal client.SearchSignalWithCorrelationsAndVersions, originalCount int) {
	<table id="correlated-signals-table" 
	>
		<thead>
			<tr>
				<th>local_ref</th>
				<th>created at</th>
				<th>email</th>
				<th>details</th>
			</tr>
		</thead>
		<tbody>
			for i, correlated := range signal.CorrelatedSignals {
				<tr
				if i >= originalCount {
					style="outline: 2px solid red; outline-offset: 2px;"
				}
				
				>
					<td>{ correlated.LocalRef } </td>
					<td>{ types.FormatDateTime(correlated.SignalCreatedAt) }</td>
					<td>{ correlated.Email }</td>
					<td>
						<button class="open-modal-btn btn btn-primary" data-correlated-signal-id={ correlated.SignalID }>View</button>
						<dialog class="modal" id="modal" data-correlated-signal-id={ correlated.SignalID }>
							<h3> { correlated.LocalRef }</h3>
							<pre>{ prettyPrintJSON(correlated.Content) }</pre>
							<button class="close-modal-btn btn btn-primary" data-correlated-signal-id={ correlated.SignalID }>Close</button>
						</dialog>
					</td>
				</tr>
			}
		</tbody>
	</table>

	<script>

	/* open and close modals that show the correlated id content */
	 document.addEventListener('click', function(e) {
		if (e.target.classList.contains('open-modal-btn') ||
		 e.target.classList.contains('close-modal-btn')) {
			const signalId = e.target.getAttribute('data-correlated-signal-id');
			const modal = document.querySelector(`[data-correlated-signal-id="${signalId}"].modal`);	

			if (e.target.classList.contains('open-modal-btn')) {
				modal.showModal();
			}
			if (e.target.classList.contains('close-modal-btn')) {
				modal.close();	
			}
		}
	 })

	 </script>
}

func prettyPrintJSON(jsonElement []byte) string {
	var obj any
	if err:= json.Unmarshal([]byte(jsonElement), &obj); err != nil {
		return string(jsonElement)
	}
	pretty, err := json.MarshalIndent(obj, "", "  ");
	if err != nil {
		return string(jsonElement)
	}	
	return string(pretty)
}
templ StartDateField() {
	<div class="form-group">
		<label for="start-date" class="form-label">Start Date</label>
		<input
			type="date"
			id="start-date"
			name="start-date"
			class="form-input"
		/>
	</div>
}

templ EndDateField() {
	<div class="form-group">
		<label for="end-date" class="form-label">End Date</label>
		<input
			type="date"
			id="end-date"
			name="end-date"
			class="form-input"
		/>
	</div>
}

templ LocalRefField() {
	<div class="form-group">
		<label for="local-ref" class="form-label">Local Reference</label>
		<input
			type="text"
			id="local-ref"
			name="local-ref"
			placeholder="e.g., item_id_#1"
			class="form-input"
		/>
	</div>
}

templ SignalIDField() {
	<div class="form-group">
		<label for="signal-id" class="form-label">Signal ID</label>
		<input
			type="text"
			id="signal-id"
			name="signal-id"
			placeholder="UUID"
			class="form-input"
		/>
	</div>
}

templ AccountIDField() {
	<div class="form-group">
		<label for="account-id" class="form-label">Account ID</label>
		<input
			type="text"
			id="account-id"
			name="account-id"
			placeholder="UUID"
			class="form-input"
		/>
	</div>
}
