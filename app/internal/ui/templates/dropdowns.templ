package templates

import (
    "strings"
    "github.com/information-sharing-networks/signalsd/app/internal/ui/types"
)


templ AccountTypeSelector() {
	<label for="account-type" class="form-label">Account Type</label>
    <select
        id="account-type"
        name="account-type"
        required
        class="form-select"
    >
        <option value="">Select Account Type...</option>
        <option value="user">User</option>
        <option value="service-account">Service Account</option>
    </select>
}


// AccountSelector displays both user and service account dropdowns with JavaScript to toggle visibility
templ AccountSelector(users []types.UserOption, serviceAccounts []types.ServiceAccountOption) {
    <div id="account-identifier-container">
        <div id="user-selector" style="display: none;">
			<label for="user-identifier" class="form-label">Account</label>
            <select
                id="user-identifier"
                name="user-identifier"
                class="form-select"
            >
                <option value="">Select User...</option>
                for _, user := range users {
                    <option value={ user.Email }>{ user.Email } ({ user.UserRole })</option>
                }
            </select>
        </div>
        <div id="service-account-selector" style="display: none;">
			<label for="service-account-identifier" class="form-label">Account</label>
            <select
                id="service-account-identifier"
                name="service-account-identifier"
                class="form-select"
            >
                <option value="">Select Service Account...</option>
                for _, account := range serviceAccounts {
                    <option value={ account.ClientID }>{ account.ClientOrganization } / { account.ClientContactEmail } ({ account.ClientID })</option>
                }
            </select>
        </div>
        <div id="account-placeholder" class="account-selector-default">
            <lable for="account-identifier-placeholder" class="form-label">Account</lable>
            <input
                id="account-identifier-placeholder"
                type="text"
                placeholder="Select account type first..."
                disabled
                class="form-input"
            />
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const accountTypeSelect = document.getElementById('account-type');
            const userSelector = document.getElementById('user-selector');
            const serviceAccountSelector = document.getElementById('service-account-selector');
            const placeholder = document.getElementById('account-placeholder');

            function toggleAccountSelector() {
                // Hide all selectors
                userSelector.style.display = 'none';
                serviceAccountSelector.style.display = 'none';
                placeholder.style.display = 'none';

                // Show appropriate selector based on account type
                const accountType = accountTypeSelect.value;
                if (accountType === 'user') {
                    userSelector.style.display = 'block';
                } else if (accountType === 'service-account') {
                    serviceAccountSelector.style.display = 'block';
                } else {
                    placeholder.style.display = 'block';
                }
            }

            // Set initial state
            toggleAccountSelector();

            // Listen for changes
            accountTypeSelect.addEventListener('change', toggleAccountSelector);
        });
    </script>
}

// =============================================================================
// USER SELECTORS
// =============================================================================

// Base user selector component
templ UserSelector(users []types.UserOption, id, name string) {
    <select
        id={ id }
        name={ name }
        required
        class="form-select"
    >
        <option value="">Select User...</option>
        for _, user := range users {
            <option value={ user.Email }>{ user.Email } ({ user.UserRole })</option>
        }
    </select>
}



// =============================================================================
// SERVICE ACCOUNT SELECTORS
// =============================================================================



// service account selector component.
// supply the id for the select element.
templ ServiceAccountSelector(serviceAccounts []types.ServiceAccountOption) {
	<label for="service-account-dropdown" class="form-label">Service Account</label>
	<select
		id="service-account-dropdown"
		name="service-account-dropdown"
		required
		class="form-select"
	>
		<option value="">Select Service Account...</option>
		for _, account := range serviceAccounts {
			<option value={ account.ClientID }>{ account.ClientOrganization } / { account.ClientContactEmail } ({ account.ClientID })</option>
		}
	</select>
}





templ UserOptionsSelector(users []types.UserOption) {
	<label for="user-dropdown" class="form-label">User</label>
	<select
		id="user-dropdown"
		name="user-dropdown"
		required
		class="form-select"
	>
		<option value="">Select User...</option>
		for _, user := range users {
			<option value={ user.Email + "|" + user.UserRole }>{ user.Email } ({ user.UserRole })</option>
		}
	</select>
}

templ IsnAccountPermissionSelector() {
	<label for="permission" class="form-label">Permission Level</label>
    <select
        id="permission"
        name="permission"
        required
        class="form-select"
    >
        <option value="">Select Permission...</option>
        <option value="none">None - Revoke access to the ISN</option>
        <option value="read">Read - Can view signals</option>
        <option value="write">Write - Can create and view signals</option>
    </select>
}

// ISN selector dropdown 
templ IsnSelector(isns []types.IsnOption) {
	<lable for="isn-slug" class="form-label">ISN</lable>
    <select
        id="isn-slug"
        name="isn-slug"
        required
        class="form-select"
    >
        <option value="">Select ISN...</option>
        for _, isn := range isns {
            <option value={ isn.Slug }>{ strings.ReplaceAll(isn.Slug, "-", " ") }</option>
        }
    </select>
}




// ************************************************************************ //
// SIGNAL TYPE SELECTOR
// ************************************************************************ //

// SignalTypeSelectorFields creates cascading dropdowns: ISN → Signal Type → Version
// Uses HTMX to dynamically load options based on selections
templ SignalTypeSelectorFields(isns []types.IsnOption) {
	<div class="grid grid-cols-1 md:grid-cols-3">
		<div class="form-group">
			<label for="isn-slug" class="form-label">ISN</label>
			<select
				id="isn-slug"
				name="isn-slug"
				required
				hx-get="/ui-api/options/signal-type-slugs"
				hx-target="#signal-type-slug"
				hx-swap="outerHTML"
				hx-trigger="change"
				hx-include="#isn-slug, this"
				hx-indicator="#signal-type-loading"
				class="form-select"
			>
				<option value="">Select ISN...</option>
				if isns != nil {
					for _, isn := range isns {
						if isn.IsInUse {
							<option value={ isn.Slug }>{ strings.ReplaceAll(isn.Slug, "-", " ") }</option>
						}
					}
				}
			</select>
		</div>
		<div class="form-group">
			<label for="signal-type-slug" class="form-label">Signal Type</label>
			<div class="relative">
				<select
					id="signal-type-slug"
					name="signal-type-slug"
					required
					disabled
					class="form-select"
				>
					<option value="">Select Signal Type...</option>
				</select>
				<div id="signal-type-loading" class="htmx-indicator loading-spinner">Loading...</div>
			</div>
		</div>
		<div id="version-select" class="form-group">
			<label for="sem-ver" class="form-label">Version</label>
			<select
				id="sem-ver"
				name="sem-ver"
				required
				disabled
				class="form-select"
			>
				<option value="">Select Version...</option>
			</select>
		</div>
	</div>
}


// SignalTypeSlugOptions renders signal type dropdown options via HTMX
// Called when ISN selection changes in SignalTypeSelectorFields
templ SignalTypeSlugOptions(signalTypes []types.SignalTypeSlugOption) {
	<select
		id="signal-type-slug"
		name="signal-type-slug"
		required
		hx-get="/ui-api/options/signal-type-versions"
		hx-target="#sem-ver"
		hx-swap="outerHTML"
		hx-trigger="change"
		hx-include="#isn-slug, this"
		class="form-select"
	>
		<option value="">Select Signal Type...</option>
		for _, signalType := range signalTypes {
			<option value={ signalType.Slug }>{ strings.ReplaceAll(signalType.Slug, "-", " ") }</option>
		}
	</select>
}


//the list of available versions for the selected signal type use with SignalTypeSelectorFields)
templ SignalTypeVersionOptions(versions []types.VersionOption) {
	<select
		id="sem-ver"
		name="sem-ver"
		required
		class="form-select"
	>
		<option value="">Select Version...</option>
		for _, version := range versions {
			<option value={ version.Version }>{ version.Version }</option>
		}
	</select>
}