package templates

import (
	"github.com/information-sharing-networks/signalsd/app/internal/ui/client"
	"github.com/information-sharing-networks/signalsd/app/internal/ui/types"
)

templ CreateSignalTypePage(isns []types.IsnOption) {
	@BaseLayout("Create New Signal Type") {
		@Navigation()
		<div class="page-container">
			<h1 class="page-title">Create a New Signal Type</h1>
			<div class="card">
				<div class="card-body">
					<form
						hx-post="/ui-api/signal-types/create"
						hx-target="#create-signal-type-result"
						hx-swap="innerHTML"
						class="margin-top-4"
					>
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
							<div class="form-group">
								@IsnSelector(isns)
							</div>
							<div class="form-group">
								@TitleInput()
							</div>
							<div class="form-group">
								@VersionNumberSelector()
							</div>
						</div>
						<div class="form-group">
							@SkipValidationCheckbox()
						</div>
						<div class="form-group">
							@SchemaURLInput(false)
						</div>
						<div class="form-group">
							@SkipReadmeCheckbox()
						</div>
						<div class="form-group">
							@ReadmeURLInput(false)
						</div>
						<div class="form-group">
							@DescriptionInput()
						</div>
						<div class="form-group" id="create-signal-type-result"></div>
						<div class="form-group">
							<button type="submit" class="btn btn-primary">Create Signal Type </button>
						</div>
					</form>
				</div>
			</div>
		</div>
	}
}

templ RegisterNewSignalTypeSchemaPage(isns []types.IsnOption) {
	@BaseLayout("Register a New Signal schema") {
		@Navigation()
		<div class="page-container">
			<h1 class="page-title">Register a New Schema</h1>
			<div class="card">
				<div class="card-body">
					<p class="card-description text-muted">Register a new schema for an existing signal type.</p>
					<form hx-put="/ui-api/signal-types/register-new-schema" hx-target="#register-new-schema-result" hx-swap="innerHTML" class="margin-top-4">
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
							<div class="form-group">
								<label for="isn-slug" class="form-label">ISN</label>
								<select
									id="isn-slug"
									name="isn-slug"
									class="form-select"
									hx-get="/ui-api/options/signal-type-slugs"
									hx-target="#signal-type-slug"
									hx-swap="outerHTML"
									hx-trigger="change"
									hx-include="#isn-slug"
								>
									<option value="">Select ISN...</option>
									for _, isn := range isns {
										<option value={ isn.Slug }>{ isn.Slug }</option>
									}
								</select>
							</div>
							<div class="form-group">
								<label for="signal-type-slug" class="form-label">Signal Type</label>
								<input
									id="signal-type-slug"
									name="signal-type-slug"
									type="text"
									class="form-input"
									disabled
									placeholder="select an ISN first..."
								/>
							</div>
							<div class="form-group">
								@VersionNumberSelector()
								<p class="text-muted text-sm mt-1">Specify how to increment the version</p>
							</div>
						</div>
						<div class="form-group">
							@SchemaURLInput(false)
						</div>
						<div class="form-group">
							@ReadmeURLInput(false)
						</div>
						<div class="form-group">
							@DescriptionInput()
						</div>
						<div class="form-group" id="register-new-schema-result"></div>
						<div class="form-group">
							<button type="submit" id="register-new-schema-btn" class="btn btn-primary">
								Register new schema
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	}
}

// SignalTypeCreationSuccess renders a success message after signal type creation
templ SignalTypeCreationSuccess(response client.NewSignalTypeResponse) {
	@SuccessAlert("Signal type created successfully!")
	<div class="margin-top-4">
		<p><strong>Slug:</strong> <code class="text-sm">{ response.Slug }</code></p>
		<p><strong>Version:</strong> <code class="text-sm">{ response.SemVer }</code></p>
	</div>
}

templ TitleInput() {
	<label for="title" class="form-label">Title</label>
	<input
		id="title"
		name="title"
		type="text"
		required
		class="form-input"
		placeholder="unique title for the signal type"
	/>
}

templ VersionNumberSelector() {
	<label for="bump-type" class="form-label">Version No.</label>
	<select
		id="bump-type"
		name="bump-type"
		required
		class="form-select"
	>
		<option value="">Select version</option>
		<option value="patch">Patch (0.0.1)</option>
		<option value="minor">Minor (0.1.0)</option>
		<option value="major">Major (1.0.0)</option>
	</select>
}

templ SchemaURLInput(skipValidation bool) {
	if skipValidation {
		<div id="schema-url-container"></div>
	} else {
		<div id="schema-url-container" class="form-group">
			<label for="schema-url" class="form-label">Schema Validation URL</label>
			<input
				id="schema-url"
				name="schema-url"
				type="url"
				required
				class="form-input"
				placeholder="enter a GitHub URL for the JSON schema"
			/>
		</div>
	}
}

templ ReadmeURLInput(skipReadme bool) {
	if skipReadme {
		<div id="readme-url-container"></div>
	} else {
		<div id="readme-url-container" class="form-group">
			<label for="readme-url" class="form-label">README URL</label>
			<input
				id="readme-url"
				name="readme-url"
				type="url"
				required
				class="form-input"
				placeholder="enter a GitHub URL for the README file"
			/>
		</div>
	}
}

templ DescriptionInput() {
	<label for="detail" class="form-label">Description</label>
	<textarea
		id="detail"
		name="detail"
		rows="3"
		required
		class="form-input"
		placeholder="Description of the signal type"
	></textarea>
}

templ SkipReadmeCheckbox() {
	<input
		type="checkbox"
		name="skip-readme"
		id="skip-readme"
		value="true"
		class="checkbox-input"
		hx-get="/ui-api/toggles/skip-readme"
		hx-target="#readme-url-container"
		hx-swap="outerHTML"
	/>
	<label for="skip-readme">Skip Readme</label>
}

templ SkipValidationCheckbox() {
	<input
		type="checkbox"
		name="skip-validation"
		id="skip-validation"
		value="true"
		class="checkbox-input"
		hx-get="/ui-api/toggles/skip-validation"
		hx-target="#schema-url-container"
		hx-swap="outerHTML"
	/>
	<label for="skip-validation">Skip JSON Schema Validation</label>
}
