package templates
import (
    "github.com/information-sharing-networks/signalsd/app/internal/ui/client"
	"github.com/information-sharing-networks/signalsd/app/internal/ui/types"
)

// CreateSignalTypePage renders the signal type management page
templ CreateSignalTypePage(isns []types.IsnOption) {
	@BaseLayout("Create New Signal Type") {
		@Navigation()
		<div class="page-container">
			<h1 class="page-title">Signal Type Management</h1>
			<div class="card mb-6">
				<div class="card-body">
					<h3 class="card-title">Create New Signal Type</h3>
					<form hx-post="/ui-api/create-signal-type" 
						hx-target="#create-signal-type-btn-container" 
						hx-swap="innerHTML"
						class="space-y-4">
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
							<div class="form-group">
								@IsnSelector(isns)
							</div>
							<div class="form-group">
								@TitleInput()
							</div>	
							<div class="form-group">
								@VersionNumberSelector()
							</div>
						</div>
						<div class="form-group">
							@SchemaURLInput()	
						</div>
						<div class="form-group">
							@ReadmeURLInput()
						</div>
						<div class="form-group">
							@DescriptionInput()							
						</div>
						<div class="form-group" id="create-signal-type-btn-container">
							<button type="submit" class="btn btn-primary">
								Create Signal Type
							</button>
						</div>
					</form>
				</div>
			</div>
			<div id="signal-type-result"></div>

			<div class="card mb-6">
				<div class="card-body">	
					<h3 class="card-title">Register a new schema for an existing Signal Type</h3>	
					<p class="text-muted mb-4">Search and manage existing signal types.</p>	
					<form hx-post="/ui-api/new-signal-type-schema" hx-target="#register-new-schema-btn-container" hx-swap="innerHTML" class="space-y-4">
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4">		
							<div class="form-group">	
								<label for="isn-slug" class="form-label">ISN</label>
								<select id="isn-slug" name="isn-slug" class="form-select"
									hx-get="/ui-api/signal-type-slug-options"
									hx-target="#signal-type-slug"
									hx-swap="outerHTML"
									hx-trigger="change"
									hx-include="#isn-slug"
								>		
									<option value="">Select ISN...</option>			
									for _, isn := range isns {					
										<option value={ isn.Slug }>{ isn.Slug }</option>			
									}
								</select>	
							</div>
							<div class="form-group">
								<label for="signal-type-slug" class="form-label">Signal Type</label>
								<input
									id="signal-type-slug"
									name="signal-type-slug"
									type="text"
									class="form-input"
									disabled
									placeholder="select an ISN first..."
								/>
							</div>
							<div class="form-group">
								@VersionNumberSelector()
								<p class="text-muted text-sm mt-1">Specify how to increment the version</p>
							</div>
						</div>
						<div class="form-group">
							@SchemaURLInput()	
						</div>
						<div class="form-group">
							@ReadmeURLInput()
						</div>
						<div class="form-group">
							@DescriptionInput()							
						</div>
						<div class="form-group" id="register-new-schema-btn-container">
							<button type="submit" id="register-new-schema-btn" class="btn btn-primary">
								Register new schema
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	}
}


// SignalTypeCreationSuccess renders a success message after signal type creation
templ SignalTypeCreationSuccess(response client.NewSignalTypeResponse) {
			@SuccessAlert("Signal type created successfully!")
			<div class="mt-4 space-y-2">
				<p><strong>Slug:</strong> <code class="text-sm bg-gray-100 px-2 py-1 rounded">{ response.Slug }</code></p>
				<p><strong>Version:</strong> <code class="text-sm bg-gray-100 px-2 py-1 rounded">{ response.SemVer }</code></p>
			</div>
			<div class="mt-4">
				<button
					disabled
					class="btn btn-primary "
				>
					Added!
				</button>
			</div>
}

templ TitleInput() {
	<label for="title" class="form-label">Title</label>
	<input
		id="title"
		name="title"
		type="text"
		required
		class="form-input"
		placeholder="unique title for the signal type"
	/>
}

templ VersionNumberSelector() {
	<label for="bump-type" class="form-label">Version No.</label>
	<select
		id="bump-type"
		name="bump-type"
		required
		class="form-select"
	>
		<option value="">Select version</option>
		<option value="patch">Patch (0.0.1)</option>
		<option value="minor">Minor (0.1.0)</option>
		<option value="major">Major (1.0.0)</option>
	</select>
}
templ SchemaURLInput() {
		<label for="schema-url" class="form-label">Schema URL</label>
		<input
			id="schema-url"
			name="schema-url"
			type="url"
			required
			class="form-input"
			placeholder="enter a GitHub URL for the JSON schema"
		/>
		<p class="text-muted text-sm mt-1">
			Use <code class="text-xs bg-gray-100 px-1 py-0.5 rounded">https://github.com/skip/validation/main/schema.json</code>
			to disable validation.
		</p>
}
templ ReadmeURLInput() {
	<label for="readme-url" class="form-label">README URL</label>
	<input
		id="readme-url"
		name="readme-url"
		type="url"
		class="form-input"
		placeholder="enter a GitHub URL for the README file"
	/>
	<p class="text-muted text-sm mt-1">
		Use <code class="text-xs bg-gray-100 px-1 py-0.5 rounded">https://github.com/skip/readme/main/readme.md</code>
		to indicate there is no readme
	</p>
}

templ DescriptionInput() {
	<label for="detail" class="form-label">Description</label>
	<textarea
		id="detail"
		name="detail"
		rows="3"
		class="form-input"
		placeholder="Description of the signal type"
	></textarea>
}