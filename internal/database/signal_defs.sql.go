// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: signal_defs.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSignalDef = `-- name: CreateSignalDef :one

INSERT INTO signal_defs (id, created_at, updated_at, slug, schema_url, readme_url, title, detail, sem_ver, stage, user_id)
VALUES (gen_random_uuid(), now(), now(), $1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, created_at, updated_at, slug, schema_url, readme_url, title, detail, sem_ver, stage, user_id
`

type CreateSignalDefParams struct {
	Slug      string    `json:"slug"`
	SchemaURL string    `json:"schema_url"`
	ReadmeURL string    `json:"readme_url"`
	Title     string    `json:"title"`
	Detail    string    `json:"detail"`
	SemVer    string    `json:"sem_ver"`
	Stage     string    `json:"stage"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateSignalDef(ctx context.Context, arg CreateSignalDefParams) (SignalDef, error) {
	row := q.db.QueryRowContext(ctx, createSignalDef,
		arg.Slug,
		arg.SchemaURL,
		arg.ReadmeURL,
		arg.Title,
		arg.Detail,
		arg.SemVer,
		arg.Stage,
		arg.UserID,
	)
	var i SignalDef
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.Stage,
		&i.UserID,
	)
	return i, err
}

const deleteSignalDef = `-- name: DeleteSignalDef :execrows

DELETE
FROM signal_defs
WHERE id = $1
`

func (q *Queries) DeleteSignalDef(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSignalDef, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const existsSignalDefWithSlugAndDifferentUser = `-- name: ExistsSignalDefWithSlugAndDifferentUser :one

SELECT EXISTS
  (SELECT 1
   FROM signal_defs
   WHERE slug = $1
     AND user_id != $2) AS EXISTS
`

type ExistsSignalDefWithSlugAndDifferentUserParams struct {
	Slug   string    `json:"slug"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) ExistsSignalDefWithSlugAndDifferentUser(ctx context.Context, arg ExistsSignalDefWithSlugAndDifferentUserParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsSignalDefWithSlugAndDifferentUser, arg.Slug, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getSemVerAndSchemaForLatestSlugVersion = `-- name: GetSemVerAndSchemaForLatestSlugVersion :one
SELECT '0.0.0' AS sem_ver,
       '' AS schema_url
WHERE NOT EXISTS
    (SELECT 1
     FROM signal_defs sd1
     WHERE sd1.slug = $1)
UNION ALL
SELECT sd2.sem_ver,
       sd2.schema_url
FROM signal_defs sd2
WHERE sd2.slug = $1
  AND sd2.sem_ver =
    (SELECT max(sd3.sem_ver)
     FROM signal_defs sd3
     WHERE sd3.slug = $1)
`

type GetSemVerAndSchemaForLatestSlugVersionRow struct {
	SemVer    string `json:"sem_ver"`
	SchemaURL string `json:"schema_url"`
}

// this query will return an empty string for schema_url and a sem_ver of '0.0.0'if there are no signals defs for the supplied slug
func (q *Queries) GetSemVerAndSchemaForLatestSlugVersion(ctx context.Context, slug string) (GetSemVerAndSchemaForLatestSlugVersionRow, error) {
	row := q.db.QueryRowContext(ctx, getSemVerAndSchemaForLatestSlugVersion, slug)
	var i GetSemVerAndSchemaForLatestSlugVersionRow
	err := row.Scan(&i.SemVer, &i.SchemaURL)
	return i, err
}

const getSignalDefByID = `-- name: GetSignalDefByID :one

SELECT u.email user_email,
       sd.id, sd.created_at, sd.updated_at, sd.slug, sd.schema_url, sd.readme_url, sd.title, sd.detail, sd.sem_ver, sd.stage, sd.user_id
FROM signal_defs sd
JOIN users u ON sd.user_id = u.id
WHERE sd.id = $1
`

type GetSignalDefByIDRow struct {
	UserEmail string    `json:"user_email"`
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Slug      string    `json:"slug"`
	SchemaURL string    `json:"schema_url"`
	ReadmeURL string    `json:"readme_url"`
	Title     string    `json:"title"`
	Detail    string    `json:"detail"`
	SemVer    string    `json:"sem_ver"`
	Stage     string    `json:"stage"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) GetSignalDefByID(ctx context.Context, id uuid.UUID) (GetSignalDefByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSignalDefByID, id)
	var i GetSignalDefByIDRow
	err := row.Scan(
		&i.UserEmail,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.Stage,
		&i.UserID,
	)
	return i, err
}

const getSignalDefBySlug = `-- name: GetSignalDefBySlug :one

SELECT u.email user_email,
       sd.id, sd.created_at, sd.updated_at, sd.slug, sd.schema_url, sd.readme_url, sd.title, sd.detail, sd.sem_ver, sd.stage, sd.user_id
FROM signal_defs sd
JOIN users u ON sd.user_id = u.id
WHERE sd.slug = $1
AND sd.sem_ver = $2
`

type GetSignalDefBySlugParams struct {
	Slug   string `json:"slug"`
	SemVer string `json:"sem_ver"`
}

type GetSignalDefBySlugRow struct {
	UserEmail string    `json:"user_email"`
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Slug      string    `json:"slug"`
	SchemaURL string    `json:"schema_url"`
	ReadmeURL string    `json:"readme_url"`
	Title     string    `json:"title"`
	Detail    string    `json:"detail"`
	SemVer    string    `json:"sem_ver"`
	Stage     string    `json:"stage"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) GetSignalDefBySlug(ctx context.Context, arg GetSignalDefBySlugParams) (GetSignalDefBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getSignalDefBySlug, arg.Slug, arg.SemVer)
	var i GetSignalDefBySlugRow
	err := row.Scan(
		&i.UserEmail,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.Stage,
		&i.UserID,
	)
	return i, err
}

const getSignalDefs = `-- name: GetSignalDefs :many

SELECT u.email,
       sd.id, sd.created_at, sd.updated_at, sd.slug, sd.schema_url, sd.readme_url, sd.title, sd.detail, sd.sem_ver, sd.stage, sd.user_id
FROM signal_defs sd
JOIN users u ON sd.user_id = u.id
ORDER BY u.email, 
         sd.slug,
         sd.sem_ver DESC
`

type GetSignalDefsRow struct {
	Email     string    `json:"email"`
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Slug      string    `json:"slug"`
	SchemaURL string    `json:"schema_url"`
	ReadmeURL string    `json:"readme_url"`
	Title     string    `json:"title"`
	Detail    string    `json:"detail"`
	SemVer    string    `json:"sem_ver"`
	Stage     string    `json:"stage"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) GetSignalDefs(ctx context.Context) ([]GetSignalDefsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSignalDefs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSignalDefsRow
	for rows.Next() {
		var i GetSignalDefsRow
		if err := rows.Scan(
			&i.Email,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Slug,
			&i.SchemaURL,
			&i.ReadmeURL,
			&i.Title,
			&i.Detail,
			&i.SemVer,
			&i.Stage,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSignalDefDetails = `-- name: UpdateSignalDefDetails :execrows
UPDATE signal_defs SET (updated_at, readme_url, detail, stage) = (NOW(), $2, $3, $4)
WHERE id = $1
`

type UpdateSignalDefDetailsParams struct {
	ID        uuid.UUID `json:"id"`
	ReadmeURL string    `json:"readme_url"`
	Detail    string    `json:"detail"`
	Stage     string    `json:"stage"`
}

func (q *Queries) UpdateSignalDefDetails(ctx context.Context, arg UpdateSignalDefDetailsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateSignalDefDetails,
		arg.ID,
		arg.ReadmeURL,
		arg.Detail,
		arg.Stage,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
