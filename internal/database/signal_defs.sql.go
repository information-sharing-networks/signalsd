// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: signal_defs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createSignalDef = `-- name: CreateSignalDef :one
INSERT INTO signal_defs (id, created_at, updated_at, slug, schema_url, readme_url, title, detail, sem_ver, stage, user_id)
VALUES ( gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4, $5, $6, $7, $8 )
RETURNING id, created_at, updated_at, slug, schema_url, readme_url, title, detail, sem_ver, stage, user_id
`

type CreateSignalDefParams struct {
	Slug      string    `json:"slug"`
	SchemaURL string    `json:"schema_url"`
	ReadmeURL string    `json:"readme_url"`
	Title     string    `json:"title"`
	Detail    string    `json:"detail"`
	SemVer    string    `json:"sem_ver"`
	Stage     string    `json:"stage"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateSignalDef(ctx context.Context, arg CreateSignalDefParams) (SignalDef, error) {
	row := q.db.QueryRowContext(ctx, createSignalDef,
		arg.Slug,
		arg.SchemaURL,
		arg.ReadmeURL,
		arg.Title,
		arg.Detail,
		arg.SemVer,
		arg.Stage,
		arg.UserID,
	)
	var i SignalDef
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.Stage,
		&i.UserID,
	)
	return i, err
}

const deleteSignalDef = `-- name: DeleteSignalDef :execrows
DELETE FROM signal_defs 
WHERE id = $1
`

func (q *Queries) DeleteSignalDef(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSignalDef, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getSignalDef = `-- name: GetSignalDef :one
SELECT id, created_at, updated_at, slug, schema_url, readme_url, title, detail, sem_ver, stage, user_id FROM signal_defs WHERE id = $1
`

func (q *Queries) GetSignalDef(ctx context.Context, id uuid.UUID) (SignalDef, error) {
	row := q.db.QueryRowContext(ctx, getSignalDef, id)
	var i SignalDef
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.SchemaURL,
		&i.ReadmeURL,
		&i.Title,
		&i.Detail,
		&i.SemVer,
		&i.Stage,
		&i.UserID,
	)
	return i, err
}

const getSignalDefs = `-- name: GetSignalDefs :many
SELECT id, created_at, updated_at, slug, schema_url, readme_url, title, detail, sem_ver, stage, user_id FROM signal_defs ORDER BY created_at ASC
`

func (q *Queries) GetSignalDefs(ctx context.Context) ([]SignalDef, error) {
	rows, err := q.db.QueryContext(ctx, getSignalDefs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignalDef
	for rows.Next() {
		var i SignalDef
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Slug,
			&i.SchemaURL,
			&i.ReadmeURL,
			&i.Title,
			&i.Detail,
			&i.SemVer,
			&i.Stage,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
