// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: isn_receivers.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createIsnReceiver = `-- name: CreateIsnReceiver :one
INSERT INTO isn_receivers (
    id,
    created_at,
    updated_at,
    user_id,
    isn_id,
    title,
    detail,
    slug,
    receiver_origin,
    min_batch_records,
    max_batch_records,
    max_daily_validation_failures,
    max_payload_kilobytes,
    payload_validation,
    default_rate_limit,
    receiver_status
) VALUES (gen_random_uuid(), now(), now(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) 
RETURNING id, slug
`

type CreateIsnReceiverParams struct {
	UserID                     uuid.UUID `json:"user_id"`
	IsnID                      uuid.UUID `json:"isn_id"`
	Title                      string    `json:"title"`
	Detail                     string    `json:"detail"`
	Slug                       string    `json:"slug"`
	ReceiverOrigin             string    `json:"receiver_origin"`
	MinBatchRecords            int32     `json:"min_batch_records"`
	MaxBatchRecords            int32     `json:"max_batch_records"`
	MaxDailyValidationFailures int32     `json:"max_daily_validation_failures"`
	MaxPayloadKilobytes        int32     `json:"max_payload_kilobytes"`
	PayloadValidation          string    `json:"payload_validation"`
	DefaultRateLimit           int32     `json:"default_rate_limit"`
	ReceiverStatus             string    `json:"receiver_status"`
}

type CreateIsnReceiverRow struct {
	ID   uuid.UUID `json:"id"`
	Slug string    `json:"slug"`
}

func (q *Queries) CreateIsnReceiver(ctx context.Context, arg CreateIsnReceiverParams) (CreateIsnReceiverRow, error) {
	row := q.db.QueryRowContext(ctx, createIsnReceiver,
		arg.UserID,
		arg.IsnID,
		arg.Title,
		arg.Detail,
		arg.Slug,
		arg.ReceiverOrigin,
		arg.MinBatchRecords,
		arg.MaxBatchRecords,
		arg.MaxDailyValidationFailures,
		arg.MaxPayloadKilobytes,
		arg.PayloadValidation,
		arg.DefaultRateLimit,
		arg.ReceiverStatus,
	)
	var i CreateIsnReceiverRow
	err := row.Scan(&i.ID, &i.Slug)
	return i, err
}

const existsIsnReceiverWithSlug = `-- name: ExistsIsnReceiverWithSlug :one

SELECT EXISTS
  (SELECT 1
   FROM isn_receivers
   WHERE slug = $1) AS EXISTS
`

func (q *Queries) ExistsIsnReceiverWithSlug(ctx context.Context, slug string) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsIsnReceiverWithSlug, slug)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getIsnReceiverBySlug = `-- name: GetIsnReceiverBySlug :one
SELECT
    i.slug AS isn_slug,
    i.is_in_use AS isn_is_in_use,
    i.storage_type AS isn_storage_type,
    ir.id, ir.created_at, ir.updated_at, ir.user_id, ir.isn_id, ir.title, ir.detail, ir.slug, ir.receiver_origin, ir.min_batch_records, ir.max_batch_records, ir.max_daily_validation_failures, ir.max_payload_kilobytes, ir.payload_validation, ir.default_rate_limit, ir.receiver_status
FROM isn_receivers ir
JOIN isn i ON i.id = ir.isn_id
WHERE ir.slug = $1
`

type GetIsnReceiverBySlugRow struct {
	IsnSlug                    string    `json:"isn_slug"`
	IsnIsInUse                 bool      `json:"isn_is_in_use"`
	IsnStorageType             string    `json:"isn_storage_type"`
	ID                         uuid.UUID `json:"id"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	UserID                     uuid.UUID `json:"user_id"`
	IsnID                      uuid.UUID `json:"isn_id"`
	Title                      string    `json:"title"`
	Detail                     string    `json:"detail"`
	Slug                       string    `json:"slug"`
	ReceiverOrigin             string    `json:"receiver_origin"`
	MinBatchRecords            int32     `json:"min_batch_records"`
	MaxBatchRecords            int32     `json:"max_batch_records"`
	MaxDailyValidationFailures int32     `json:"max_daily_validation_failures"`
	MaxPayloadKilobytes        int32     `json:"max_payload_kilobytes"`
	PayloadValidation          string    `json:"payload_validation"`
	DefaultRateLimit           int32     `json:"default_rate_limit"`
	ReceiverStatus             string    `json:"receiver_status"`
}

func (q *Queries) GetIsnReceiverBySlug(ctx context.Context, slug string) (GetIsnReceiverBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getIsnReceiverBySlug, slug)
	var i GetIsnReceiverBySlugRow
	err := row.Scan(
		&i.IsnSlug,
		&i.IsnIsInUse,
		&i.IsnStorageType,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.IsnID,
		&i.Title,
		&i.Detail,
		&i.Slug,
		&i.ReceiverOrigin,
		&i.MinBatchRecords,
		&i.MaxBatchRecords,
		&i.MaxDailyValidationFailures,
		&i.MaxPayloadKilobytes,
		&i.PayloadValidation,
		&i.DefaultRateLimit,
		&i.ReceiverStatus,
	)
	return i, err
}

const getIsnReceivers = `-- name: GetIsnReceivers :many
SELECT ir.id, ir.created_at, ir.updated_at, ir.user_id, ir.isn_id, ir.title, ir.detail, ir.slug, ir.receiver_origin, ir.min_batch_records, ir.max_batch_records, ir.max_daily_validation_failures, ir.max_payload_kilobytes, ir.payload_validation, ir.default_rate_limit, ir.receiver_status 
FROM isn_receivers ir
`

func (q *Queries) GetIsnReceivers(ctx context.Context) ([]IsnReceiver, error) {
	rows, err := q.db.QueryContext(ctx, getIsnReceivers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IsnReceiver
	for rows.Next() {
		var i IsnReceiver
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.IsnID,
			&i.Title,
			&i.Detail,
			&i.Slug,
			&i.ReceiverOrigin,
			&i.MinBatchRecords,
			&i.MaxBatchRecords,
			&i.MaxDailyValidationFailures,
			&i.MaxPayloadKilobytes,
			&i.PayloadValidation,
			&i.DefaultRateLimit,
			&i.ReceiverStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIsnReceiver = `-- name: UpdateIsnReceiver :execrows
UPDATE isn_receivers SET (
  updated_at, 
  detail,
  receiver_origin,
  min_batch_records,
  max_batch_records,
  max_daily_validation_failures,
  max_payload_kilobytes,
  payload_validation,
  default_rate_limit,
  receiver_status
) = (Now(), $2, $3, $4, $5, $6, $7, $8, $9, $10)
WHERE id = $1
`

type UpdateIsnReceiverParams struct {
	ID                         uuid.UUID `json:"id"`
	Detail                     string    `json:"detail"`
	ReceiverOrigin             string    `json:"receiver_origin"`
	MinBatchRecords            int32     `json:"min_batch_records"`
	MaxBatchRecords            int32     `json:"max_batch_records"`
	MaxDailyValidationFailures int32     `json:"max_daily_validation_failures"`
	MaxPayloadKilobytes        int32     `json:"max_payload_kilobytes"`
	PayloadValidation          string    `json:"payload_validation"`
	DefaultRateLimit           int32     `json:"default_rate_limit"`
	ReceiverStatus             string    `json:"receiver_status"`
}

func (q *Queries) UpdateIsnReceiver(ctx context.Context, arg UpdateIsnReceiverParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateIsnReceiver,
		arg.ID,
		arg.Detail,
		arg.ReceiverOrigin,
		arg.MinBatchRecords,
		arg.MaxBatchRecords,
		arg.MaxDailyValidationFailures,
		arg.MaxPayloadKilobytes,
		arg.PayloadValidation,
		arg.DefaultRateLimit,
		arg.ReceiverStatus,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
