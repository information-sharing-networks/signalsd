consumes:
- application/json
definitions:
  handlers.CreateSignalDefHandler.createSignalDefRequest:
    properties:
      bump_type:
        description: this is used to increment semver for the signal definition
        enum:
        - major
        - minor
        - patch
        type: string
      detail:
        description: description
        example: Sample Signal description
        type: string
      readme_url:
        description: Note file must be on a public github repo
        example: https://github.com/user/project/v0.0.1/locales/filename.md
        type: string
      schema_url:
        description: Note file must be on a public github repo
        example: https://github.com/user/project/v0.0.1/locales/filename.json
        type: string
      stage:
        enum:
        - dev
        - test
        - live
        - deprecated
        - closed
        - shuttered
        type: string
      title:
        description: unique title
        example: Sample Signal
        type: string
    type: object
  handlers.CreateSignalDefHandler.createSignalDefResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      sem_ver:
        type: string
      slug:
        type: string
    type: object
  handlers.CreateUserHandler.createUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handlers.CreateUserHandler.createUserResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  handlers.LoginHandler.loginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handlers.LoginHandler.loginResponse:
    properties:
      access_token:
        type: string
      created_at:
        type: string
      id:
        type: string
      refresh_token:
        type: string
      updated_at:
        type: string
    type: object
  handlers.RefreshAccessTokenHandler.refreshResponse:
    properties:
      access_token:
        type: string
    type: object
  handlers.UpdateSignalDefHandler.updateSignalDefRequest:
    properties:
      detail:
        description: updated description
        example: updated description
        type: string
      readme_url:
        description: Updated readem file. Note file must be on a public github repo
        example: https://github.com/user/project/v0.0.1/locales/new_t pfilename.md
        type: string
      stage:
        description: updated stage
        enum:
        - dev
        - test
        - live
        - deprecated
        - closed
        - shuttered
        type: string
    type: object
  handlers.UpdateUserHandler.updateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handlers.UpdateUserHandler.updateUserResponse:
    properties:
      email:
        type: string
    type: object
  signals.ErrorCode:
    enum:
    - access_token_expired
    - authentication_error
    - authorization_error
    - database_error
    - forbidden
    - internal_error
    - invalid_request
    - malformed_body
    - not_implemented
    - refresh_token_expired
    - refresh_token_revoked
    - resource_already_exists
    - resource_not_found
    - token_error
    - user_alread_exists
    - user_not_found
    type: string
    x-enum-varnames:
    - ErrCodeAccessTokenExpired
    - ErrCodeAuthenticationFailure
    - ErrCodeAuthorizationFailure
    - ErrCodeDatabaseError
    - ErrCodeForbidden
    - ErrCodeInternalError
    - ErrCodeInvalidRequest
    - ErrCodeMalformedBody
    - ErrCodeNotImplemented
    - ErrCodeRefreshTokenExpired
    - ErrCodeRefreshTokenRevoked
    - ErrCodeResourceAlreadyExists
    - ErrCodeResourceNotFound
    - ErrCodeTokenError
    - ErrCodeUserAlreadyExists
    - ErrCodeUserNotFound
  signals.ErrorResponse:
    properties:
      error_code:
        allOf:
        - $ref: '#/definitions/signals.ErrorCode'
        example: example_error_code
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Signals service API
  title: Signals
  version: v0.0.1
paths:
  /admin/health:
    get:
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      summary: Health
      tags:
      - admin
  /admin/reset:
    post:
      description: |-
        Delete all registered users and associated data.
        This endpoint only works on environments configured as 'dev'
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
      summary: reset
      tags:
      - admin
  /api/login:
    post:
      parameters:
      - description: user details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginHandler.loginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginHandler.loginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
      summary: Login
      tags:
      - auth
  /api/refresh:
    post:
      description: |-
        Returns a new JWT access token.
        Access tokens are not issued if the refresh token has expired or been revoked.
        Users must log in again to obtain a new refresh token if the current one has expired or been revoked.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RefreshAccessTokenHandler.refreshResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
      security:
      - BearerRefreshToken: []
      summary: Refresh access token
      tags:
      - auth
  /api/revoke:
    post:
      description: |-
        Revoke a refresh token to prevent it being used to create new access tokens.
        Note that any unexpired access tokens issued for this user will continue to work until they expire.
        Users must log in again to obtain a new refresh token if the current one has been revoked.
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
      security:
      - BearerRefreshToken: []
      summary: Revoke refresh token
      tags:
      - auth
  /api/signal_defs:
    post:
      description: |
        The supplied title is converted into a url-friendly slug.

        Slugs represent a group of versioned signal definitions.

        Slugs are owned by the originating user and can't be reused by other users.

        Slugs are vesioned automatically with semvers: when there is a change to the schema describing the data, the user should create a new def and specify the bump type (major/minor/patch) to increment the semver

        Slugs are vesioned automatically with semvers: when there is a change to the schema describing the data, the user should create a new def and specify the bump type (major/minor/patch) to increment the semver
      parameters:
      - description: signal definition etails
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateSignalDefHandler.createSignalDefRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateSignalDefHandler.createSignalDefResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
      summary: Create signal definition
      tags:
      - signal definitions
    put:
      description: |-
        users can update the detailed description, the stage or the link to the readme md

        Note that it is not allowed to update the schema url - instead users should create a new declaration with the same title and bump the version
      parameters:
      - description: signal definition etails
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateSignalDefHandler.updateSignalDefRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
      summary: Update signal definition
      tags:
      - signal definitions
  /api/users:
    post:
      description: |-
        The response body includes an access token and a refresh_token.
        The access_token is valid for 1 hour.
        Use the refresh_token with the /api/refresh endpoint to renew the access_token.
        The refresh_token lasts 60 days unless it is revoked earlier.
        To renew the refresh_token, log in again.
      parameters:
      - description: user details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserHandler.createUserRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateUserHandler.createUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
      summary: Create user
      tags:
      - auth
    put:
      description: update email and/or password
      parameters:
      - description: user details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserHandler.updateUserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UpdateUserHandler.updateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/signals.ErrorResponse'
      security:
      - BearerAccessToken: []
      summary: Update user
      tags:
      - auth
produces:
- application/json
securityDefinitions:
  BearerAccessToken:
    description: Bearer {JWT access token}
    in: header
    name: Authorization
    type: apiKey
  BearerRefreshToken:
    description: Bearer { refresh token }
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: User and token management endpoints
  name: auth
- description: Signal defintion management endpoints
  name: signal definitions
