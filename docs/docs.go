// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/users": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "update user email and/or password",
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserHandler.updateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorCode"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorCode"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorCode"
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "parameters": [
                    {
                        "description": "req bd",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginHandler.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginHandler.loginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/users": {
            "post": {
                "description": "the access_token is needed to use protected end points and is valid for 1 hour\nUse the refresh_token with the /refresh endpoint to renew the access_token\nrefresh_tokens last 60 days unless they are revoked earlier.  To refresh the refresh_token, log in again.",
                "parameters": [
                    {
                        "description": "req bd",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserHandler.createUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserHandler.createUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CreateUserHandler.createUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateUserHandler.createUserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginHandler.loginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginHandler.loginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserHandler.updateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserHandler.updateUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "signals.ErrorCode": {
            "type": "string",
            "enum": [
                "access_token_expired",
                "authentication_error",
                "authorization_error",
                "database_error",
                "forbidden",
                "internal_error",
                "invalid_request",
                "malformed_body",
                "not_implemented",
                "refresh_token_expired",
                "refresh_token_revoked",
                "resource_already_exists",
                "resource_not_found",
                "token_error",
                "user_alread_exists",
                "user_not_found"
            ],
            "x-enum-varnames": [
                "ErrCodeAccessTokenExpired",
                "ErrCodeAuthenticationFailure",
                "ErrCodeAuthorizationFailure",
                "ErrCodeDatabaseError",
                "ErrCodeForbidden",
                "ErrCodeInternalError",
                "ErrCodeInvalidRequest",
                "ErrCodeMalformedBody",
                "ErrCodeNotImplemented",
                "ErrCodeRefreshTokenExpired",
                "ErrCodeRefreshTokenRevoked",
                "ErrCodeResourceAlreadyExists",
                "ErrCodeResourceNotFound",
                "ErrCodeTokenError",
                "ErrCodeUserAlreadyExists",
                "ErrCodeUserNotFound"
            ]
        },
        "signals.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/signals.ErrorCode"
                        }
                    ],
                    "example": "example_error_code"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Bearer {JWT access token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v0.0.1",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Signals",
	Description:      "Signals service API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
