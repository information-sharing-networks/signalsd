{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Signals service API",
        "title": "Signals",
        "contact": {},
        "version": "v0.0.1"
    },
    "host": "localhost:8080",
    "paths": {
        "/admin/health": {
            "get": {
                "description": "check if the signals service is running",
                "tags": [
                    "admin"
                ],
                "summary": "Health",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/admin/reset": {
            "post": {
                "description": "Delete all registered users and associated data.\nThis endpoint only works on environments configured as 'dev'",
                "tags": [
                    "admin"
                ],
                "summary": "reset",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "description": "The response body includes an access token and a refresh_token.\nThe access_token is valid for 1 hour.\n\nUse the refresh_token with the /api/refresh endpoint to renew the access_token.\nThe refresh_token lasts 60 days unless it is revoked earlier.\nTo renew the refresh_token, log in again.",
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginHandler.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginHandler.loginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/refresh": {
            "post": {
                "security": [
                    {
                        "BearerRefreshToken": []
                    }
                ],
                "description": "Returns a new JWT access token.\nAccess tokens are not issued if the refresh token has expired or been revoked.\nUsers must log in again to obtain a new refresh token if the current one has expired or been revoked.",
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshAccessTokenHandler.refreshResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/revoke": {
            "post": {
                "security": [
                    {
                        "BearerRefreshToken": []
                    }
                ],
                "description": "Revoke a refresh token to prevent it being used to create new access tokens.\nNote that any unexpired access tokens issued for this user will continue to work until they expire.\nUsers must log in again to obtain a new refresh token if the current one has been revoked.",
                "tags": [
                    "auth"
                ],
                "summary": "Revoke refresh token",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/signal_defs": {
            "get": {
                "tags": [
                    "signal definitions"
                ],
                "summary": "Get all of the signal definitions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetSignalDefsRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "tags": [
                    "signal definitions"
                ],
                "summary": "Delete signal definition",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "A signal definition describes a data set that is sharable over the signals ISN\n\nA URL-friendly slug is created based on the title supplied when you load the first version of a definition.\nThe title and slug fields can't be changed and it is not allowed to reuse a slug that was created by another account.\n\nSlugs are vesioned automatically with semvers: when there is a change to the schema describing the data, the user should create a new definition and specify the bump type (major/minor/patch) to increment the semver\n\nThe standard way to refer to a signal definition is using a url like this http://{hostname}/signal_defs/{slug}/v{sem_ver}\n\nThe definitions are also available at http://{hostname}/{signal_id}",
                "tags": [
                    "signal definitions"
                ],
                "summary": "Create signal definition",
                "parameters": [
                    {
                        "description": "signal definition etails",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalDefHandler.createSignalDefRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalDefHandler.createSignalDefResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/signal_defs/{id}": {
            "get": {
                "tags": [
                    "signal definitions"
                ],
                "summary": "Get a signal definition by id",
                "parameters": [
                    {
                        "type": "string",
                        "example": "6f4eb8dc-1411-4395-93d6-fc316b85aa74",
                        "description": "ID of the signal definition to retrieve",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.GetSignalDefByIDRow"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/signal_defs/{slug}/v{sem_ver}": {
            "get": {
                "tags": [
                    "signal definitions"
                ],
                "summary": "Get a signal definition by slug",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal---example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "version to be recieved",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.GetSignalDefBySlugRow"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "update email and/or password",
                "tags": [
                    "auth"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserHandler.updateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserHandler.updateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserHandler.createUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserHandler.createUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.GetSignalDefByIDRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "stage": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_email": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "database.GetSignalDefBySlugRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "stage": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_email": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "database.GetSignalDefsRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "stage": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateSignalDefHandler.createSignalDefRequest": {
            "type": "object",
            "properties": {
                "bump_type": {
                    "description": "this is used to increment semver for the signal definition",
                    "type": "string",
                    "enum": [
                        "major",
                        "minor",
                        "patch"
                    ],
                    "example": "patch"
                },
                "detail": {
                    "description": "description",
                    "type": "string",
                    "example": "Sample Signal description"
                },
                "readme_url": {
                    "description": "Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.md"
                },
                "schema_url": {
                    "description": "Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.json"
                },
                "stage": {
                    "type": "string",
                    "enum": [
                        "dev",
                        "test",
                        "live",
                        "deprecated",
                        "closed",
                        "shuttered"
                    ],
                    "example": "dev"
                },
                "title": {
                    "description": "unique title",
                    "type": "string",
                    "example": "Sample Signal (example.org)"
                }
            }
        },
        "handlers.CreateSignalDefHandler.createSignalDefResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-05-09T13:25:44.126721+01:00"
                },
                "id": {
                    "type": "string",
                    "example": "8e4bf0e9-b962-4707-9639-ef314dcf6fed"
                },
                "sem_ver": {
                    "type": "string",
                    "example": "0.0.1"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-signal--example-org"
                }
            }
        },
        "handlers.CreateUserHandler.createUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "handlers.CreateUserHandler.createUserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "68fb5f5b-e3f5-4a96-8d35-cd2203a06f73"
                }
            }
        },
        "handlers.LoginHandler.loginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginHandler.loginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTaWduYWxTZXJ2ZXIiLCJzdWIiOiI2OGZiNWY1Yi1lM2Y1LTRhOTYtOGQzNS1jZDIyMDNhMDZmNzMiLCJleHAiOjE3NDY3NzA2MzQsImlhdCI6MTc0Njc2NzAzNH0.3OdnUNgrvt1Zxs9AlLeaC9DVT6Xwc6uGvFQHb6nDfZs"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-05-09T05:41:22.57328+01:00"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "fb948e0b74de1f65e801b4e70fc9c047424ab775f2b4dc5226f472f3b6460c37"
                },
                "user_id": {
                    "type": "string",
                    "example": "68fb5f5b-e3f5-4a96-8d35-cd2203a06f73"
                }
            }
        },
        "handlers.RefreshAccessTokenHandler.refreshResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateSignalDefHandler.updateSignalDefRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "updated description",
                    "type": "string",
                    "example": "updated description"
                },
                "readme_url": {
                    "description": "Updated readem file. Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/new_t pfilename.md"
                },
                "stage": {
                    "description": "updated stage",
                    "type": "string",
                    "enum": [
                        "dev",
                        "test",
                        "live",
                        "deprecated",
                        "closed",
                        "shuttered"
                    ]
                }
            }
        },
        "handlers.UpdateUserHandler.updateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserHandler.updateUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "signals.ErrorCode": {
            "type": "string",
            "enum": [
                "access_token_expired",
                "authentication_error",
                "authorization_error",
                "database_error",
                "forbidden",
                "internal_error",
                "invalid_request",
                "malformed_body",
                "not_implemented",
                "refresh_token_expired",
                "refresh_token_revoked",
                "resource_already_exists",
                "resource_not_found",
                "token_error",
                "user_alread_exists",
                "user_not_found"
            ],
            "x-enum-varnames": [
                "ErrCodeAccessTokenExpired",
                "ErrCodeAuthenticationFailure",
                "ErrCodeAuthorizationFailure",
                "ErrCodeDatabaseError",
                "ErrCodeForbidden",
                "ErrCodeInternalError",
                "ErrCodeInvalidRequest",
                "ErrCodeMalformedBody",
                "ErrCodeNotImplemented",
                "ErrCodeRefreshTokenExpired",
                "ErrCodeRefreshTokenRevoked",
                "ErrCodeResourceAlreadyExists",
                "ErrCodeResourceNotFound",
                "ErrCodeTokenError",
                "ErrCodeUserAlreadyExists",
                "ErrCodeUserNotFound"
            ]
        },
        "signals.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/signals.ErrorCode"
                        }
                    ],
                    "example": "example_error_code"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAccessToken": {
            "description": "Bearer {JWT access token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BearerRefreshToken": {
            "description": "Bearer { refresh token }",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "User and token management endpoints",
            "name": "auth"
        },
        {
            "description": "Signal defintion management endpoints",
            "name": "signal definitions"
        }
    ]
}