{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Signals ISN service API",
        "contact": {}
    },
    "host": "localhost:8080",
    "paths": {
        "/admin/health": {
            "get": {
                "description": "check if the signals service is running",
                "tags": [
                    "admin"
                ],
                "summary": "Health",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/admin/reset": {
            "post": {
                "description": "Delete all registered users and associated data.\nThis endpoint only works on environments configured as 'dev'",
                "tags": [
                    "admin"
                ],
                "summary": "reset",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/receiver/{isn_receivers_slug}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "the receiver service should be hosted on {receiver_origin}/signals/receiver/{receiver_slug}",
                "tags": [
                    "ISN config"
                ],
                "summary": "Update an ISN Receiver",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-ISN-receiver--example-org",
                        "description": "isn receiver slug",
                        "name": "isn_receivers_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN receiver details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateIsnReceiverRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/receiver/{receiver_slug}": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "A receiver service handles incoming signals and will be hosted on {receiver_origin}/signals/receiver/{receiver_slug}\n\nWhen the ISN storage_type is set to \"local\", the receiver_origin must also be \"local\", indicating that the signals are stored in the relational database used by the API service.\n\nthe receiver service should be hosted on {receiver_origin}/signals/receiver/{receiver_slug}",
                "tags": [
                    "ISN config"
                ],
                "summary": "Create an ISN Receiver",
                "parameters": [
                    {
                        "description": "ISN receiver details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnReceiverRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnReceiverResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/retriever/{isn_retrievers_slug}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "tags": [
                    "ISN config"
                ],
                "summary": "Update an ISN Retriever",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-ISN-retriever--example-org",
                        "description": "isn retriever slug",
                        "name": "isn_retrievers_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN retriever details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateIsnRetrieverRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/retriever/{retriever_slug}": {
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "the retriever service handles requests to get signals and will be hosted on {retriever_origin}/signals/retriever/{retriever_slug}\n\nWhen the ISN storage_type is set to \"local\", the retriever_origin must also be \"local\", indicating that the signals are retieved from the relational database used by the API service.\n",
                "tags": [
                    "ISN config"
                ],
                "summary": "Create an ISN Retriever",
                "parameters": [
                    {
                        "description": "ISN retriever details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnRetrieverRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnRetrieverResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isn/{isn_slug}": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Update the ISN details",
                "tags": [
                    "ISN config"
                ],
                "summary": "Update an ISN",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-ISN--example-org",
                        "description": "isn slug",
                        "name": "isn_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ISN details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateIsnRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Create an Information Sharing Network (ISN)\n\nvisibility = \"private\" means that signals on the network can only be seen by network participants.\n\nThe only storage_type currently supported is \"local\"\nwhen storage_type = \"local\" the signals are stored in the relational database used by the API service to store the admin configuration",
                "tags": [
                    "ISN config"
                ],
                "summary": "Create an ISN",
                "parameters": [
                    {
                        "description": "ISN details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateIsnResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/signal_defs": {
            "get": {
                "tags": [
                    "signal definitions"
                ],
                "summary": "Get the signal definitions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetSignalDefsRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "A signal definition describes a data set that is sharable over an ISN.  Setup the ISN before defining any signal defs.\n\nA URL-friendly slug is created based on the title supplied when you load the first version of a definition.\nThe title and slug fields can't be changed and it is not allowed to reuse a slug that was created by another account.\n\nSlugs are vesioned automatically with semvers: when there is a change to the schema describing the data, the user should create a new definition and specify the bump type (major/minor/patch) to increment the semver\n\nSignal definitions are referred to with a url like this http://{hostname}/api/signal_defs/{slug}/v{sem_ver}\n",
                "tags": [
                    "signal definitions"
                ],
                "summary": "Create signal definition",
                "parameters": [
                    {
                        "description": "signal definition details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalDefRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalDefResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/signal_defs/{slug}/v{sem_ver}": {
            "get": {
                "tags": [
                    "signal definitions"
                ],
                "summary": "Get a signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "version to be recieved",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SignalDefAndLinkedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "users can update the detailed description, the stage or the link to the readme md\n\nIt is not allowed to update the schema url - instead users should create a new declaration with the same title and bump the version",
                "tags": [
                    "signal definitions"
                ],
                "summary": "Update signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "version to be recieved",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "signal definition details to be updated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateSignalDefRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "tags": [
                    "signal definitions"
                ],
                "summary": "Delete signal definition",
                "parameters": [
                    {
                        "type": "string",
                        "example": "sample-signal--example-org",
                        "description": "signal definiton slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0.0.1",
                        "description": "version to be recieved",
                        "name": "sem_ver",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "auth"
                ],
                "summary": "Get registered user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "68fb5f5b-e3f5-4a96-8d35-cd2203a06f73",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.GetForDisplayUserByIDRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "The response body includes an access token and a refresh_token.\nThe access_token is valid for 1 hour.\n\nUse the refresh_token with the /auth/refresh-token endpoint to renew the access_token.\nThe refresh_token lasts 60 days unless it is revoked earlier.\nTo renew the refresh_token, log in again.",
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "email and password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/password/reset": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "Use this api to reset the users password.  Requires a valid access token and the current password\nTODO - forgotten password facility",
                "tags": [
                    "auth"
                ],
                "summary": "Update password",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdatePasswordRequest"
                        }
                    },
                    {
                        "type": "string",
                        "example": "sample-ISN--example-org",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "security": [
                    {
                        "BearerRefreshToken": []
                    }
                ],
                "description": "Returns a new JWT access token.\nAccess tokens are not issued if the refresh token has expired or been revoked.\nUsers must log in again to obtain a new refresh token if the current one has expired or been revoked.",
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshAccessTokenHandler.refreshResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/revoke-refresh-token": {
            "post": {
                "description": "Revoke a refresh token to prevent it being used to create new access tokens.\n\nNote that any unexpired access tokens issued for this user will continue to work until they expire.\nUsers must log in again to obtain a new refresh token if the current one has been revoked.\n\nAnyone in possession of a refresh token can revoke it",
                "tags": [
                    "auth"
                ],
                "summary": "Revoke refresh token",
                "parameters": [
                    {
                        "description": "refresh token to be revoked",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RevokeRefreshTokenHandler.revokeRefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apperrors.ErrorCode": {
            "type": "string",
            "enum": [
                "access_token_expired",
                "authentication_error",
                "authorization_error",
                "database_error",
                "forbidden",
                "internal_error",
                "invalid_request",
                "malformed_body",
                "not_implemented",
                "password_too_short",
                "refresh_token_expired",
                "refresh_token_revoked",
                "resource_already_exists",
                "resource_not_found",
                "signal_def_closed",
                "token_error",
                "user_alread_exists",
                "user_not_found"
            ],
            "x-enum-varnames": [
                "ErrCodeAccessTokenExpired",
                "ErrCodeAuthenticationFailure",
                "ErrCodeAuthorizationFailure",
                "ErrCodeDatabaseError",
                "ErrCodeForbidden",
                "ErrCodeInternalError",
                "ErrCodeInvalidRequest",
                "ErrCodeMalformedBody",
                "ErrCodeNotImplemented",
                "ErrCodePasswordTooShort",
                "ErrCodeRefreshTokenExpired",
                "ErrCodeRefreshTokenRevoked",
                "ErrCodeResourceAlreadyExists",
                "ErrCodeResourceNotFound",
                "ErrCodeSignalDefClosed",
                "ErrCodeTokenError",
                "ErrCodeUserAlreadyExists",
                "ErrCodeUserNotFound"
            ]
        },
        "apperrors.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/apperrors.ErrorCode"
                        }
                    ],
                    "example": "example_error_code"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "database.GetForDisplayUserByIDRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "database.GetForDisplayUserBySignalDefIDRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.GetSignalDefsRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isn_id": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "stage": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "database.Isn": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_in_use": {
                    "type": "boolean"
                },
                "slug": {
                    "type": "string"
                },
                "storage_type": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateIsnReceiverRequest": {
            "type": "object",
            "properties": {
                "default_rate_limit": {
                    "description": "maximum number of requests per minute",
                    "type": "integer",
                    "example": 600
                },
                "detail": {
                    "type": "string",
                    "example": "Sample ISN Receiver description"
                },
                "isn_slug": {
                    "type": "string",
                    "example": "sample-ISN--example-org"
                },
                "max_batch_records": {
                    "type": "integer",
                    "example": 100
                },
                "max_daily_validation_failures": {
                    "description": "default = 0",
                    "type": "integer",
                    "example": 5
                },
                "max_payload_kilobytes": {
                    "type": "integer",
                    "example": 50
                },
                "min_batch_records": {
                    "type": "integer",
                    "example": 10
                },
                "payload_validation": {
                    "type": "string",
                    "enum": [
                        "always",
                        "never",
                        "optional"
                    ],
                    "example": "always"
                },
                "receiver_origin": {
                    "description": "do not provide this field if the isn is using local storage",
                    "type": "string",
                    "example": "http://example.com:8080"
                },
                "receiver_status": {
                    "type": "string",
                    "enum": [
                        "offline",
                        " online",
                        " error",
                        " closed"
                    ],
                    "example": "offline"
                },
                "title": {
                    "type": "string",
                    "example": "Sample ISN Receiver @example.org"
                }
            }
        },
        "handlers.CreateIsnReceiverResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "4f1bc74b-cf79-410f-9c21-dc2cba047385"
                },
                "receiver_url": {
                    "type": "string",
                    "example": "http://localhost:8080/signals/receiver/sample-ISN-receiver--example-org"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/receiver/sample-ISN-receiver--example-org"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-ISN-receiver--example-org"
                }
            }
        },
        "handlers.CreateIsnRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Sample ISN description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": true
                },
                "storage_type": {
                    "type": "string",
                    "example": "mq"
                },
                "title": {
                    "type": "string",
                    "example": "Sample ISN @example.org"
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "example": "private"
                }
            }
        },
        "handlers.CreateIsnResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "67890684-3b14-42cf-b785-df28ce570400"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/sample-ISN--example-org"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-ISN--example-org"
                }
            }
        },
        "handlers.CreateIsnRetrieverRequest": {
            "type": "object",
            "properties": {
                "default_rate_limit": {
                    "description": "maximum number of requests per minute",
                    "type": "integer",
                    "example": 600
                },
                "detail": {
                    "type": "string",
                    "example": "sample-ISN--example-org"
                },
                "isn_slug": {
                    "type": "string",
                    "example": "sample-ISN--example-org"
                },
                "retriever_origin": {
                    "description": "do not provide this field if the isn is using local storage",
                    "type": "string",
                    "example": "http://example.com:8080"
                },
                "retriever_status": {
                    "type": "string",
                    "enum": [
                        "offline",
                        " online",
                        " error",
                        " closed"
                    ],
                    "example": "offline"
                },
                "title": {
                    "type": "string",
                    "example": "Sample ISN Retriever @example.org"
                }
            }
        },
        "handlers.CreateIsnRetrieverResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "4f1bc74b-cf79-410f-9c21-dc2cba047385"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/isn/retriever/sample-ISN-retriever--example-org"
                },
                "retriever_url": {
                    "type": "string",
                    "example": "http://localhost:8080/signals/retriever/sample-ISN-retriever--example-org"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-ISN-retriever--example-org"
                }
            }
        },
        "handlers.CreateSignalDefRequest": {
            "type": "object",
            "properties": {
                "bump_type": {
                    "description": "this is used to increment semver for the signal definition",
                    "type": "string",
                    "enum": [
                        "major",
                        "minor",
                        "patch"
                    ],
                    "example": "patch"
                },
                "detail": {
                    "description": "updated description",
                    "type": "string",
                    "example": "description"
                },
                "isn_slug": {
                    "type": "string",
                    "example": "sample-ISN--example-org"
                },
                "readme_url": {
                    "description": "Updated readem file. Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.md"
                },
                "schema_url": {
                    "description": "Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.json"
                },
                "stage": {
                    "description": "updated stage",
                    "type": "string",
                    "enum": [
                        "dev",
                        "test",
                        "live",
                        "deprecated",
                        "closed",
                        "shuttered"
                    ]
                },
                "title": {
                    "description": "unique title",
                    "type": "string",
                    "example": "Sample Signal @example.org"
                }
            }
        },
        "handlers.CreateSignalDefResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "8e4bf0e9-b962-4707-9639-ef314dcf6fed"
                },
                "resource_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string",
                    "example": "0.0.1"
                },
                "slug": {
                    "type": "string",
                    "example": "sample-signal--example-org"
                }
            }
        },
        "handlers.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "description": "passwords must be at least 11 chars long",
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                }
            }
        },
        "handlers.CreateUserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "68fb5f5b-e3f5-4a96-8d35-cd2203a06f73"
                },
                "resource_url": {
                    "type": "string",
                    "example": "http://localhost:8080/api/users/01a38b82-cbc7-4a24-b61f-e55cb99ac41e"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "description": "passwords must be at least 11 chars long",
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTaWduYWxTZXJ2ZXIiLCJzdWIiOiI2OGZiNWY1Yi1lM2Y1LTRhOTYtOGQzNS1jZDIyMDNhMDZmNzMiLCJleHAiOjE3NDY3NzA2MzQsImlhdCI6MTc0Njc2NzAzNH0.3OdnUNgrvt1Zxs9AlLeaC9DVT6Xwc6uGvFQHb6nDfZs"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-05-09T05:41:22.57328+01:00"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "fb948e0b74de1f65e801b4e70fc9c047424ab775f2b4dc5226f472f3b6460c37"
                },
                "user_id": {
                    "type": "string",
                    "example": "68fb5f5b-e3f5-4a96-8d35-cd2203a06f73"
                }
            }
        },
        "handlers.RefreshAccessTokenHandler.refreshResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTaWduYWxTZXJ2ZXIiLCJzdWIiOiI2OGZiNWY1Yi1lM2Y1LTRhOTYtOGQzNS1jZDIyMDNhMDZmNzMiLCJleHAiOjE3NDY3NzA2MzQsImlhdCI6MTc0Njc2NzAzNH0.3OdnUNgrvt1Zxs9AlLeaC9DVT6Xwc6uGvFQHb6nDfZs"
                }
            }
        },
        "handlers.RevokeRefreshTokenHandler.revokeRefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "fb948e0b74de1f65e801b4e70fc9c047424ab775f2b4dc5226f472f3b6460c37"
                }
            }
        },
        "handlers.SignalDefAndLinkedInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isn": {
                    "$ref": "#/definitions/database.Isn"
                },
                "readme_url": {
                    "type": "string"
                },
                "schema_url": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "stage": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/database.GetForDisplayUserBySignalDefIDRow"
                }
            }
        },
        "handlers.UpdateIsnReceiverRequest": {
            "type": "object",
            "properties": {
                "default_rate_limit": {
                    "description": "maximum number of requests per minute",
                    "type": "integer",
                    "example": 600
                },
                "detail": {
                    "type": "string",
                    "example": "Sample ISN Receiver description"
                },
                "max_batch_records": {
                    "type": "integer",
                    "example": 100
                },
                "max_daily_validation_failures": {
                    "description": "default = 0",
                    "type": "integer",
                    "example": 5
                },
                "max_payload_kilobytes": {
                    "type": "integer",
                    "example": 50
                },
                "min_batch_records": {
                    "type": "integer",
                    "example": 10
                },
                "payload_validation": {
                    "type": "string",
                    "enum": [
                        "always",
                        "never",
                        "optional"
                    ],
                    "example": "always"
                },
                "receiver_origin": {
                    "description": "do not provide this field if the isn is using local storage",
                    "type": "string",
                    "example": "http://example.com:8080"
                },
                "receiver_status": {
                    "type": "string",
                    "enum": [
                        "offline",
                        " online",
                        " error",
                        " closed"
                    ],
                    "example": "offline"
                }
            }
        },
        "handlers.UpdateIsnRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Sample ISN description"
                },
                "is_in_use": {
                    "type": "boolean",
                    "example": true
                },
                "storage_type": {
                    "type": "string",
                    "example": "mq"
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ],
                    "example": "private"
                }
            }
        },
        "handlers.UpdateIsnRetrieverRequest": {
            "type": "object",
            "properties": {
                "default_rate_limit": {
                    "description": "maximum number of requests per minute",
                    "type": "integer",
                    "example": 600
                },
                "detail": {
                    "type": "string",
                    "example": "sample-ISN--example-org"
                },
                "retriever_origin": {
                    "description": "do not provide this field if the isn is using local storage",
                    "type": "string",
                    "example": "http://example.com:8080"
                },
                "retriever_status": {
                    "type": "string",
                    "enum": [
                        "offline",
                        " online",
                        " error",
                        " closed"
                    ],
                    "example": "offline"
                }
            }
        },
        "handlers.UpdatePasswordRequest": {
            "type": "object",
            "properties": {
                "current_password": {
                    "type": "string",
                    "example": "lkIB53@6O^Y"
                },
                "new_password": {
                    "type": "string",
                    "example": "ue6U\u003e\u0026X3j570"
                }
            }
        },
        "handlers.UpdateSignalDefRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "updated description",
                    "type": "string",
                    "example": "description"
                },
                "readme_url": {
                    "description": "Updated readem file. Note file must be on a public github repo",
                    "type": "string",
                    "example": "https://github.com/user/project/v0.0.1/locales/filename.md"
                },
                "stage": {
                    "description": "updated stage",
                    "type": "string",
                    "enum": [
                        "dev",
                        "test",
                        "live",
                        "deprecated",
                        "closed",
                        "shuttered"
                    ]
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAccessToken": {
            "description": "Bearer {JWT access token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BearerRefreshToken": {
            "description": "Bearer { refresh token }",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "User and token management endpoints",
            "name": "auth"
        },
        {
            "description": "signal definitions describe the format of the data being shared in an ISN",
            "name": "signal definitions"
        },
        {
            "description": "Information sharing networks are used to exchange signals between participating users.",
            "name": "ISN config"
        }
    ]
}