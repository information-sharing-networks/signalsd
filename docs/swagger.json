{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Signals service API",
        "title": "Signals",
        "contact": {},
        "version": "v0.0.1"
    },
    "host": "localhost:8080",
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginHandler.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginHandler.loginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/refresh": {
            "post": {
                "security": [
                    {
                        "BearerRefreshToken": []
                    }
                ],
                "description": "Returns a new JWT access token.\nAccess tokens are not issued if the refresh token has expired or been revoked.\nUsers must log in again to obtain a new refresh token if the current one has expired or been revoked.",
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshAccessTokenHandler.refreshResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/revoke": {
            "post": {
                "security": [
                    {
                        "BearerRefreshToken": []
                    }
                ],
                "description": "Revoke a refresh token to prevent it being used to create new access tokens.\nNote that any unexpired access tokens issued for this user will continue to work until they expire.\nUsers must log in again to obtain a new refresh token if the current one has been revoked.",
                "tags": [
                    "auth"
                ],
                "summary": "Revoke refresh token",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/signal_defs": {
            "put": {
                "description": "users can update the detailed description, the stage or the link to the readme md\n\nNote that it is not allowed to update the schema url - instead users should create a new declaration with the same title and bump the version",
                "tags": [
                    "signal definitions"
                ],
                "summary": "Update signal definition",
                "parameters": [
                    {
                        "description": "signal definition etails",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateSignalDefHandler.updateSignalDefRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "The supplied title is converted into a url-friendly slug.\n\nSlugs represent a group of versioned signal definitions.\n\nSlugs are owned by the originating user and can't be reused by other users.\n\nSlugs are vesioned automatically with semvers: when there is a change to the schema describing the data, the user should create a new def and specify the bump type (major/minor/patch) to increment the semver\n\nSlugs are vesioned automatically with semvers: when there is a change to the schema describing the data, the user should create a new def and specify the bump type (major/minor/patch) to increment the semver\n",
                "tags": [
                    "signal definitions"
                ],
                "summary": "Create signal definition",
                "parameters": [
                    {
                        "description": "signal definition etails",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalDefHandler.createSignalDefRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSignalDefHandler.createSignalDefResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "put": {
                "security": [
                    {
                        "BearerAccessToken": []
                    }
                ],
                "description": "update email and/or password",
                "tags": [
                    "auth"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserHandler.updateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserHandler.updateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "The response body includes an access token and a refresh_token.\nThe access_token is valid for 1 hour.\nUse the refresh_token with the /api/refresh endpoint to renew the access_token.\nThe refresh_token lasts 60 days unless it is revoked earlier.\nTo renew the refresh_token, log in again.",
                "tags": [
                    "auth"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserHandler.createUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserHandler.createUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/signals.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CreateSignalDefHandler.createSignalDefRequest": {
            "type": "object",
            "properties": {
                "bump_type": {
                    "description": "major/minor/patch (used to increment signal_def.sem_ver)",
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "readme_url": {
                    "description": "url for a .md markdown file (public github repo)",
                    "type": "string"
                },
                "schema_url": {
                    "description": "url for a JSON schema file (public github repo)",
                    "type": "string"
                },
                "stage": {
                    "description": "dev/test/live/deprecated/closed/shuttered",
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateSignalDefHandler.createSignalDefResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "sem_ver": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateUserHandler.createUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateUserHandler.createUserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginHandler.loginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginHandler.loginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.RefreshAccessTokenHandler.refreshResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateSignalDefHandler.updateSignalDefRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "stage": {
                    "description": "dev/test/live/deprecated/closed/shuttered",
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserHandler.updateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserHandler.updateUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "signals.ErrorCode": {
            "type": "string",
            "enum": [
                "access_token_expired",
                "authentication_error",
                "authorization_error",
                "database_error",
                "forbidden",
                "internal_error",
                "invalid_request",
                "malformed_body",
                "not_implemented",
                "refresh_token_expired",
                "refresh_token_revoked",
                "resource_already_exists",
                "resource_not_found",
                "token_error",
                "user_alread_exists",
                "user_not_found"
            ],
            "x-enum-varnames": [
                "ErrCodeAccessTokenExpired",
                "ErrCodeAuthenticationFailure",
                "ErrCodeAuthorizationFailure",
                "ErrCodeDatabaseError",
                "ErrCodeForbidden",
                "ErrCodeInternalError",
                "ErrCodeInvalidRequest",
                "ErrCodeMalformedBody",
                "ErrCodeNotImplemented",
                "ErrCodeRefreshTokenExpired",
                "ErrCodeRefreshTokenRevoked",
                "ErrCodeResourceAlreadyExists",
                "ErrCodeResourceNotFound",
                "ErrCodeTokenError",
                "ErrCodeUserAlreadyExists",
                "ErrCodeUserNotFound"
            ]
        },
        "signals.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/signals.ErrorCode"
                        }
                    ],
                    "example": "example_error_code"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAccessToken": {
            "description": "Bearer {JWT access token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BearerRefreshToken": {
            "description": "Bearer { refresh token }",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "User and token management endpoints",
            "name": "auth"
        },
        {
            "description": "Signal defintion management endpoints",
            "name": "signal definitions"
        }
    ]
}