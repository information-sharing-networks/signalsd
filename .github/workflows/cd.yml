# build signalsd image, push to gcloud and deploy to gcloud run
name: CD

on:
  push:
    tags:
      - 'v*'  

env:
  # Secrets
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

  # service configuration (GitHub variables with app defaults as fallback)
  ENVIRONMENT: prod
  LOG_LEVEL: info
  DB_MAX_CONNECTIONS: ${{ vars.DB_MAX_CONNECTIONS }}
  DB_MIN_CONNECTIONS: ${{ vars.DB_MIN_CONNECTIONS }}
  DB_MAX_CONN_LIFETIME: ${{ vars.DB_MAX_CONN_LIFETIME }}
  DB_MAX_CONN_IDLE_TIME: ${{ vars.DB_MAX_CONN_IDLE_TIME }}
  DB_CONNECT_TIMEOUT: ${{ vars.DB_CONNECT_TIMEOUT }}
  RATE_LIMIT_RPS: ${{ vars.RATE_LIMIT_RPS }}
  RATE_LIMIT_BURST: ${{ vars.RATE_LIMIT_BURST }}
  MAX_SIGNAL_PAYLOAD_SIZE: ${{ vars.MAX_SIGNAL_PAYLOAD_SIZE }}
  READ_TIMEOUT: ${{ vars.READ_TIMEOUT }}
  WRITE_TIMEOUT: ${{ vars.WRITE_TIMEOUT }}
  IDLE_TIMEOUT: ${{ vars.IDLE_TIMEOUT }}

  # Google Cloud configuration
  SERVICE_NAME: signalsd
  PROJECT_ID: signals-462015
  REGION: europe-west2
  REPOSITORY: signalsd
  IMAGE_NAME: signalsd
  DEPLOY_REGION: europe-west1
  RUNTIME_SERVICE_ACCOUNT: cloud-run-runtime@signals-462015.iam.gserviceaccount.com
  MAX_INSTANCES: 4
  CPU: 1

jobs:
  tests:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history including tags

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"
          cache: true                                
          cache-dependency-path: app/go.sum

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as credential helper
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and push Docker image
        run: |
          # Get version info for Docker build
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || git describe --tags --always --dirty)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=$(git rev-parse --short HEAD)

          docker buildx build \
          --platform linux/amd64 \
          -f app/Dockerfile \
          --build-arg VERSION=${VERSION} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg GIT_COMMIT=${GIT_COMMIT} \
          --push \
          -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest \
          .
      
      - name: Install goose
        run: go install github.com/pressly/goose/v3/cmd/goose@latest

      - name: Run migrations
        run: |
          cd app
          goose -dir sql/schema postgres ${{ env.DATABASE_URL }} up

      - name: Deploy to Cloud Run
        run: |
          # Build environment variables string for Cloud Run
          ENV_VARS="DATABASE_URL=${{ env.DATABASE_URL }}"
          ENV_VARS="${ENV_VARS},SECRET_KEY=${{ env.SECRET_KEY }}"
          ENV_VARS="${ENV_VARS},ENVIRONMENT=${{ env.ENVIRONMENT }}"
          ENV_VARS="${ENV_VARS},LOG_LEVEL=${{ env.LOG_LEVEL }}"
          ENV_VARS="${ENV_VARS},DB_MAX_CONNECTIONS=${{ env.DB_MAX_CONNECTIONS }}"
          ENV_VARS="${ENV_VARS},DB_MIN_CONNECTIONS=${{ env.DB_MIN_CONNECTIONS }}"
          ENV_VARS="${ENV_VARS},DB_MAX_CONN_LIFETIME=${{ env.DB_MAX_CONN_LIFETIME }}"
          ENV_VARS="${ENV_VARS},DB_MAX_CONN_IDLE_TIME=${{ env.DB_MAX_CONN_IDLE_TIME }}"
          ENV_VARS="${ENV_VARS},DB_CONNECT_TIMEOUT=${{ env.DB_CONNECT_TIMEOUT }}"
          ENV_VARS="${ENV_VARS},RATE_LIMIT_RPS=${{ env.RATE_LIMIT_RPS }}"
          ENV_VARS="${ENV_VARS},RATE_LIMIT_BURST=${{ env.RATE_LIMIT_BURST }}"
          ENV_VARS="${ENV_VARS},MAX_SIGNAL_PAYLOAD_SIZE=${{ env.MAX_SIGNAL_PAYLOAD_SIZE }}"
          ENV_VARS="${ENV_VARS},READ_TIMEOUT=${{ env.READ_TIMEOUT }}"
          ENV_VARS="${ENV_VARS},WRITE_TIMEOUT=${{ env.WRITE_TIMEOUT }}"
          ENV_VARS="${ENV_VARS},IDLE_TIMEOUT=${{ env.IDLE_TIMEOUT }}"

          # Deploy to Cloud Run
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region ${{ env.DEPLOY_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --service-account ${{ env.RUNTIME_SERVICE_ACCOUNT }} \
            --set-env-vars "${ENV_VARS}" \
            --args="--mode,all" \
            --port 8080 \
            --memory 512Mi \
            --cpu ${{ env.CPU }} \
            --min-instances 0 \
            --max-instances ${{ env.MAX_INSTANCES }}
