# Makefile for signalsd using locally installed go tools
# Simple automation for common development tasks

DATABASE_URL = "postgres://$(USER):@localhost:5432/signalsd_admin?sslmode=disable"

.PHONY: help psql check generate docs swag-fmt sqlc fmt vet lint security test clean


# Default target - show available commands
help:
	@echo "Available commands:"
	@echo "  make check     - Run all pre-commit checks (recommended before committing)"
	@echo "  make generate  - Generate docs and code (swagger + sqlc)"
	@echo "  make docs      - Generate swagger documentation"
	@echo "  make swag-fmt  - format swag comments"
	@echo "  make sqlc      - Generate sqlc code"
	@echo "  make fmt       - Format code"
	@echo "  make vet       - Run go vet"
	@echo "  make lint      - Run staticcheck"
	@echo "  make security  - Run gosec security analysis"
	@echo "  make test      - Run tests"
	@echo "  make clean     - Clean build artifacts"
	@echo "  make psql      - run psql agaist the dev database"

# Main target: run all checks before committing
check: generate fmt swag-fmt vet lint security test
	@echo ""
	@echo "âœ… All checks passed! Ready to commit."

# Generate all code and documentation
generate: docs sqlc swag-fmt

# Generate swagger documentation
docs:
	@echo "ðŸ”„ Generating swagger documentation..."
	@cd app && swag init -g ./cmd/signalsd/main.go


# Generate swagger documentation
docs:
	@echo "ðŸ”„ formatting swag comments..."
	@cd app && swag fmt"

# Generate type-safe SQL code
sqlc:
	@echo "ðŸ”„ Generating SQLC code..."
	@cd app && sqlc generate

# Format code
fmt:
	@echo "ðŸ”„ Formatting code..."
	@cd app && go fmt ./...

# Run go vet
vet:
	@echo "ðŸ”„ Running go vet..."
	@cd app && go vet ./...

# Run staticcheck linter
lint:
	@echo "ðŸ”„ Running staticcheck..."
	@cd app && staticcheck ./...

# Run security analysis
security:
	@echo "ðŸ”„ Running security analysis..."
	@cd app && gosec -exclude-generated ./...

# Run tests
test:
	@echo "ðŸ”„ Running tests..."
	@cd app && go test ./...
	@cd app && go test -v -tags=integration ./test/integration/

# Clean build artifacts
clean:
	@echo "ðŸ”„ Cleaning..."
	@cd app && go clean -cache -testcache
	@rm appu/signalsd

psql: 
	@echo "ðŸ”„ running psql on local postgres db "
	psql ${DATABASE_URL}
